# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any

from azure.mgmt.core import ARMPipelineClient
from msrest import Deserializer, Serializer

from ._configuration import BatchServiceConfiguration
from .operations import ApplicationOperations
from .operations import PoolOperations
from .operations import AccountOperations
from .operations import JobOperations
from .operations import CertificateOperations
from .operations import FileOperations
from .operations import JobScheduleOperations
from .operations import TaskOperations
from .operations import ComputeNodeOperations
from . import models


class BatchService(object):
    """A client for issuing REST requests to the Azure Batch service.

    :ivar application: ApplicationOperations operations
    :vartype application: azure.batch.operations.ApplicationOperations
    :ivar pool: PoolOperations operations
    :vartype pool: azure.batch.operations.PoolOperations
    :ivar account: AccountOperations operations
    :vartype account: azure.batch.operations.AccountOperations
    :ivar job: JobOperations operations
    :vartype job: azure.batch.operations.JobOperations
    :ivar certificate: CertificateOperations operations
    :vartype certificate: azure.batch.operations.CertificateOperations
    :ivar file: FileOperations operations
    :vartype file: azure.batch.operations.FileOperations
    :ivar job_schedule: JobScheduleOperations operations
    :vartype job_schedule: azure.batch.operations.JobScheduleOperations
    :ivar task: TaskOperations operations
    :vartype task: azure.batch.operations.TaskOperations
    :ivar compute_node: ComputeNodeOperations operations
    :vartype compute_node: azure.batch.operations.ComputeNodeOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: azure.core.credentials.TokenCredential
    :param batch_url: The base URL for all Azure Batch service requests.
    :type batch_url: str
    """

    def __init__(
        self,
        credential,  # type: "TokenCredential"
        batch_url,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        base_url = '{batchUrl}'
        self._config = BatchServiceConfiguration(credential, batch_url, **kwargs)
        self._client = ARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.application = ApplicationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.pool = PoolOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.account = AccountOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.job = JobOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.certificate = CertificateOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.file = FileOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.job_schedule = JobScheduleOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.task = TaskOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.compute_node = ComputeNodeOperations(
            self._client, self._config, self._serialize, self._deserialize)

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> BatchService
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
