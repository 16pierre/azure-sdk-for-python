# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class ApplicationOperations:
    """ApplicationOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.batch.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list(
        self,
        application_list_options: Optional["models.ApplicationListOptions"] = None,
        **kwargs
    ) -> "models.ApplicationListResult":
        """This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API.

        Lists all of the applications available in the specified Account.

        :param application_list_options: Parameter group.
        :type application_list_options: ~azure.batch.models.ApplicationListOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ApplicationListResult or the result of cls(response)
        :rtype: ~azure.batch.models.ApplicationListResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.ApplicationListResult"]
        error_map = kwargs.pop('error_map', {404: ResourceNotFoundError, 409: ResourceExistsError})
        
        _max_results = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if application_list_options is not None:
            _max_results = application_list_options.max_results
            _timeout = application_list_options.timeout
            _client_request_id = application_list_options.client_request_id
            _return_client_request_id = application_list_options.return_client_request_id
            _ocp_date = application_list_options.ocp_date
        api_version = "2020-03-01.11.0"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list.metadata['url']
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                }
                url = self._client.format_url(url, **path_format_arguments)

            # Construct parameters
            query_parameters = {}  # type: Dict[str, Any]
            if _max_results is not None:
                query_parameters['maxresults'] = self._serialize.query("max_results", _max_results, 'int', maximum=1000, minimum=1)
            if _timeout is not None:
                query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            if _client_request_id is not None:
                header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
            if _return_client_request_id is not None:
                header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
            if _ocp_date is not None:
                header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('ApplicationListResult', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.BatchError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/applications'}

    async def get(
        self,
        application_id: str,
        application_get_options: Optional["models.ApplicationGetOptions"] = None,
        **kwargs
    ) -> "models.ApplicationSummary":
        """This operation returns only Applications and versions that are available for use on Compute Nodes; that is, that can be used in an Package reference. For administrator information about Applications and versions that are not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API.

        Gets information about the specified Application.

        :param application_id: The ID of the Application.
        :type application_id: str
        :param application_get_options: Parameter group.
        :type application_get_options: ~azure.batch.models.ApplicationGetOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ApplicationSummary or the result of cls(response)
        :rtype: ~azure.batch.models.ApplicationSummary
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.ApplicationSummary"]
        error_map = kwargs.pop('error_map', {404: ResourceNotFoundError, 409: ResourceExistsError})
        
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if application_get_options is not None:
            _timeout = application_get_options.timeout
            _client_request_id = application_get_options.client_request_id
            _return_client_request_id = application_get_options.return_client_request_id
            _ocp_date = application_get_options.ocp_date
        api_version = "2020-03-01.11.0"

        # Construct URL
        url = self.get.metadata['url']
        path_format_arguments = {
            'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
            'applicationId': self._serialize.url("application_id", application_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if _timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if _client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
        if _return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
        if _ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.BatchError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        response_headers = {}
        response_headers['client-request-id']=self._deserialize('str', response.headers.get('client-request-id'))
        response_headers['request-id']=self._deserialize('str', response.headers.get('request-id'))
        response_headers['ETag']=self._deserialize('str', response.headers.get('ETag'))
        response_headers['Last-Modified']=self._deserialize('rfc-1123', response.headers.get('Last-Modified'))
        deserialized = self._deserialize('ApplicationSummary', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    get.metadata = {'url': '/applications/{applicationId}'}
