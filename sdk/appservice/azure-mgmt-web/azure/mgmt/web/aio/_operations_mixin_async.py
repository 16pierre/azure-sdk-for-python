# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from msrest import Serializer, Deserializer
try:
    from typing import TYPE_CHECKING
except ImportError:
    TYPE_CHECKING = False

if TYPE_CHECKING:
    # pylint:disable=unused-import
    import datetime
    from typing import Dict, List, Optional, Union


class WebSiteManagementClientOperationsMixin(object):

    async def check_name_availability(
        self,
        name: str,
        type: Union[str, "models.CheckNameResourceTypes"],
        is_fqdn: Optional[bool] = None,
        **kwargs
    ) -> "models.ResourceNameAvailability":
        """Check if a resource name is available.

        Check if a resource name is available.

        :param name: Resource name to verify.
        :type name: str
        :param type: Resource type used for verification.
        :type type: str or ~azure.mgmt.web.v2018_02_01.models.CheckNameResourceTypes
        :param is_fqdn: Is fully qualified domain name.
        :type is_fqdn: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ResourceNameAvailability or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.ResourceNameAvailability
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('check_name_availability')
        if api_version == '2016-03-01':
            from ..v2016_03_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return await mixin_instance.check_name_availability(name, type, is_fqdn, **kwargs)

    async def get_publishing_user(
        self,
        **kwargs
    ) -> "models.User":
        """Gets publishing user.

        Gets publishing user.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: User or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.User
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('get_publishing_user')
        if api_version == '2016-03-01':
            from ..v2016_03_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return await mixin_instance.get_publishing_user(**kwargs)

    async def get_source_control(
        self,
        source_control_type: str,
        **kwargs
    ) -> "models.SourceControl":
        """Gets source control token.

        Gets source control token.

        :param source_control_type: Type of source control.
        :type source_control_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SourceControl or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.SourceControl
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('get_source_control')
        if api_version == '2016-03-01':
            from ..v2016_03_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return await mixin_instance.get_source_control(source_control_type, **kwargs)

    async def get_subscription_deployment_locations(
        self,
        **kwargs
    ) -> "models.DeploymentLocations":
        """Gets list of available geo regions plus ministamps.

        Gets list of available geo regions plus ministamps.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DeploymentLocations or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DeploymentLocations
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('get_subscription_deployment_locations')
        if api_version == '2016-03-01':
            from ..v2016_03_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return await mixin_instance.get_subscription_deployment_locations(**kwargs)

    def list_billing_meters(
        self,
        billing_location: Optional[str] = None,
        os_type: Optional[str] = None,
        **kwargs
    ) -> "models.BillingMeterCollection":
        """Gets a list of meters for a given location.

        Gets a list of meters for a given location.

        :param billing_location: Azure Location of billable resource.
        :type billing_location: str
        :param os_type: App Service OS type meters used for.
        :type os_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BillingMeterCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.BillingMeterCollection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('list_billing_meters')
        if api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return mixin_instance.list_billing_meters(billing_location, os_type, **kwargs)

    def list_geo_regions(
        self,
        sku: Optional[Union[str, "models.SkuName"]] = None,
        linux_workers_enabled: Optional[bool] = None,
        xenon_workers_enabled: Optional[bool] = None,
        linux_dynamic_workers_enabled: Optional[bool] = None,
        **kwargs
    ) -> "models.GeoRegionCollection":
        """Get a list of available geographical regions.

        Get a list of available geographical regions.

        :param sku: Name of SKU used to filter the regions.
        :type sku: str or ~azure.mgmt.web.v2018_02_01.models.SkuName
        :param linux_workers_enabled: Specify :code:`<code>true</code>` if you want to filter to only
         regions that support Linux workers.
        :type linux_workers_enabled: bool
        :param xenon_workers_enabled: Specify :code:`<code>true</code>` if you want to filter to only
         regions that support Xenon workers.
        :type xenon_workers_enabled: bool
        :param linux_dynamic_workers_enabled: Specify :code:`<code>true</code>` if you want to filter
         to only regions that support Linux Consumption Workers.
        :type linux_dynamic_workers_enabled: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: GeoRegionCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.GeoRegionCollection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('list_geo_regions')
        if api_version == '2016-03-01':
            from ..v2016_03_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return mixin_instance.list_geo_regions(sku, linux_workers_enabled, xenon_workers_enabled, linux_dynamic_workers_enabled, **kwargs)

    def list_premier_add_on_offers(
        self,
        **kwargs
    ) -> "models.PremierAddOnOfferCollection":
        """List all premier add-on offers.

        List all premier add-on offers.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PremierAddOnOfferCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.PremierAddOnOfferCollection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('list_premier_add_on_offers')
        if api_version == '2016-03-01':
            from ..v2016_03_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return mixin_instance.list_premier_add_on_offers(**kwargs)

    def list_site_identifiers_assigned_to_host_name(
        self,
        name: Optional[str] = None,
        **kwargs
    ) -> "models.IdentifierCollection":
        """List all apps that are assigned to a hostname.

        List all apps that are assigned to a hostname.

        :param name: Name of the object.
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IdentifierCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.IdentifierCollection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('list_site_identifiers_assigned_to_host_name')
        if api_version == '2016-03-01':
            from ..v2016_03_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return mixin_instance.list_site_identifiers_assigned_to_host_name(name, **kwargs)

    async def list_skus(
        self,
        **kwargs
    ) -> "models.SkuInfos":
        """List all SKUs.

        List all SKUs.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuInfos or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.SkuInfos
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('list_skus')
        if api_version == '2016-03-01':
            from ..v2016_03_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return await mixin_instance.list_skus(**kwargs)

    def list_source_controls(
        self,
        **kwargs
    ) -> "models.SourceControlCollection":
        """Gets the source controls available for Azure websites.

        Gets the source controls available for Azure websites.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SourceControlCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.SourceControlCollection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('list_source_controls')
        if api_version == '2016-03-01':
            from ..v2016_03_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return mixin_instance.list_source_controls(**kwargs)

    async def move(
        self,
        resource_group_name: str,
        target_resource_group: Optional[str] = None,
        resources: Optional[List[str]] = None,
        **kwargs
    ) -> None:
        """Move resources between resource groups.

        Move resources between resource groups.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param target_resource_group:
        :type target_resource_group: str
        :param resources:
        :type resources: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('move')
        if api_version == '2016-03-01':
            from ..v2016_03_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return await mixin_instance.move(resource_group_name, target_resource_group, resources, **kwargs)

    async def update_publishing_user(
        self,
        user_details: "models.User",
        **kwargs
    ) -> "models.User":
        """Updates publishing user.

        Updates publishing user.

        :param user_details: Details of publishing user.
        :type user_details: ~azure.mgmt.web.v2018_02_01.models.User
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: User or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.User
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('update_publishing_user')
        if api_version == '2016-03-01':
            from ..v2016_03_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return await mixin_instance.update_publishing_user(user_details, **kwargs)

    async def update_source_control(
        self,
        source_control_type: str,
        request_message: "models.SourceControl",
        **kwargs
    ) -> "models.SourceControl":
        """Updates source control token.

        Updates source control token.

        :param source_control_type: Type of source control.
        :type source_control_type: str
        :param request_message: Source control token information.
        :type request_message: ~azure.mgmt.web.v2018_02_01.models.SourceControl
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SourceControl or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.SourceControl
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('update_source_control')
        if api_version == '2016-03-01':
            from ..v2016_03_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return await mixin_instance.update_source_control(source_control_type, request_message, **kwargs)

    async def validate(
        self,
        resource_group_name: str,
        validate_request: "models.ValidateRequest",
        **kwargs
    ) -> "models.ValidateResponse":
        """Validate if a resource can be created.

        Validate if a resource can be created.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param validate_request: Request with the resources to validate.
        :type validate_request: ~azure.mgmt.web.v2018_02_01.models.ValidateRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ValidateResponse or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.ValidateResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('validate')
        if api_version == '2016-03-01':
            from ..v2016_03_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return await mixin_instance.validate(resource_group_name, validate_request, **kwargs)

    async def validate_container_settings(
        self,
        resource_group_name: str,
        validate_container_settings_request: "models.ValidateContainerSettingsRequest",
        **kwargs
    ) -> object:
        """Validate if the container settings are correct.

        Validate if the container settings are correct.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param validate_container_settings_request:
        :type validate_container_settings_request: ~azure.mgmt.web.v2018_02_01.models.ValidateContainerSettingsRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: object or the result of cls(response)
        :rtype: object
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('validate_container_settings')
        if api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return await mixin_instance.validate_container_settings(resource_group_name, validate_container_settings_request, **kwargs)

    async def validate_move(
        self,
        resource_group_name: str,
        target_resource_group: Optional[str] = None,
        resources: Optional[List[str]] = None,
        **kwargs
    ) -> None:
        """Validate whether a resource can be moved.

        Validate whether a resource can be moved.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param target_resource_group:
        :type target_resource_group: str
        :param resources:
        :type resources: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('validate_move')
        if api_version == '2016-03-01':
            from ..v2016_03_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return await mixin_instance.validate_move(resource_group_name, target_resource_group, resources, **kwargs)

    async def verify_hosting_environment_vnet(
        self,
        parameters: "models.VnetParameters",
        **kwargs
    ) -> "models.VnetValidationFailureDetails":
        """Verifies if this VNET is compatible with an App Service Environment by analyzing the Network Security Group rules.

        Verifies if this VNET is compatible with an App Service Environment by analyzing the Network
        Security Group rules.

        :param parameters: VNET information.
        :type parameters: ~azure.mgmt.web.v2018_02_01.models.VnetParameters
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: VnetValidationFailureDetails or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.VnetValidationFailureDetails
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version('verify_hosting_environment_vnet')
        if api_version == '2016-03-01':
            from ..v2016_03_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2018-02-01':
            from ..v2018_02_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        elif api_version == '2019-08-01':
            from ..v2019_08_01.aio.operations_async import WebSiteManagementClientOperationsMixin as OperationClass
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance.config = self.config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        mixin_instance.api_version = api_version
        return await mixin_instance.verify_hosting_environment_vnet(parameters, **kwargs)
