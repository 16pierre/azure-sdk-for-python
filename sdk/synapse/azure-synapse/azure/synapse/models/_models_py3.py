# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class Activity(msrest.serialization.Model):
    """A pipeline activity.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AppendVariableActivity, ExecutePipelineActivity, ExecutionActivity, FilterActivity, ForEachActivity, IfConditionActivity, SetVariableActivity, SwitchActivity, UntilActivity, ValidationActivity, WaitActivity, WebHookActivity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
    }

    _subtype_map = {
        'type': {'AppendVariable': 'AppendVariableActivity', 'ExecutePipeline': 'ExecutePipelineActivity', 'Execution': 'ExecutionActivity', 'Filter': 'FilterActivity', 'ForEach': 'ForEachActivity', 'IfCondition': 'IfConditionActivity', 'SetVariable': 'SetVariableActivity', 'Switch': 'SwitchActivity', 'Until': 'UntilActivity', 'Validation': 'ValidationActivity', 'Wait': 'WaitActivity', 'WebHook': 'WebHookActivity'}
    }

    def __init__(
        self,
        *,
        name: str,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        **kwargs
    ):
        super(Activity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.name = name
        self.type = 'Activity'
        self.description = description
        self.depends_on = depends_on
        self.user_properties = user_properties


class ActivityDependency(msrest.serialization.Model):
    """Activity dependency information.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param activity: Required. Activity name.
    :type activity: str
    :param dependency_conditions: Required. Match-Condition for the dependency.
    :type dependency_conditions: list[str or ~azure.synapse.models.DependencyCondition]
    """

    _validation = {
        'activity': {'required': True},
        'dependency_conditions': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'activity': {'key': 'activity', 'type': 'str'},
        'dependency_conditions': {'key': 'dependencyConditions', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        activity: str,
        dependency_conditions: List[Union[str, "DependencyCondition"]],
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(ActivityDependency, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.activity = activity
        self.dependency_conditions = dependency_conditions


class ActivityPolicy(msrest.serialization.Model):
    """Execution policy for an activity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param retry: Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with
     resultType integer), minimum: 0.
    :type retry: object
    :param retry_interval_in_seconds: Interval between each retry attempt (in seconds). The default
     is 30 sec.
    :type retry_interval_in_seconds: int
    :param secure_input: When set to true, Input from activity is considered as secure and will not
     be logged to monitoring.
    :type secure_input: bool
    :param secure_output: When set to true, Output from activity is considered as secure and will
     not be logged to monitoring.
    :type secure_output: bool
    :param timeout: Specifies the timeout for the activity to run. The default timeout is 7 days.
     Type: string (or Expression with resultType string), pattern:
     ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
    :type timeout: object
    """

    _validation = {
        'retry_interval_in_seconds': {'maximum': 86400, 'minimum': 30},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'retry': {'key': 'retry', 'type': 'object'},
        'retry_interval_in_seconds': {'key': 'retryIntervalInSeconds', 'type': 'int'},
        'secure_input': {'key': 'secureInput', 'type': 'bool'},
        'secure_output': {'key': 'secureOutput', 'type': 'bool'},
        'timeout': {'key': 'timeout', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        retry: Optional[object] = None,
        retry_interval_in_seconds: Optional[int] = None,
        secure_input: Optional[bool] = None,
        secure_output: Optional[bool] = None,
        timeout: Optional[object] = None,
        **kwargs
    ):
        super(ActivityPolicy, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.retry = retry
        self.retry_interval_in_seconds = retry_interval_in_seconds
        self.secure_input = secure_input
        self.secure_output = secure_output
        self.timeout = timeout


class ActivityRun(msrest.serialization.Model):
    """Information about an activity run in a pipeline.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :ivar activity_name: The name of the activity.
    :vartype activity_name: str
    :ivar activity_run_end: The end time of the activity run in 'ISO 8601' format.
    :vartype activity_run_end: ~datetime.datetime
    :ivar activity_run_id: The id of the activity run.
    :vartype activity_run_id: str
    :ivar activity_run_start: The start time of the activity run in 'ISO 8601' format.
    :vartype activity_run_start: ~datetime.datetime
    :ivar activity_type: The type of the activity.
    :vartype activity_type: str
    :ivar duration_in_ms: The duration of the activity run.
    :vartype duration_in_ms: int
    :ivar error: The error if any from the activity run.
    :vartype error: object
    :ivar input: The input for the activity.
    :vartype input: object
    :ivar linked_service_name: The name of the compute linked service.
    :vartype linked_service_name: str
    :ivar output: The output for the activity.
    :vartype output: object
    :ivar pipeline_name: The name of the pipeline.
    :vartype pipeline_name: str
    :ivar pipeline_run_id: The id of the pipeline run.
    :vartype pipeline_run_id: str
    :ivar status: The status of the activity run.
    :vartype status: str
    """

    _validation = {
        'activity_name': {'readonly': True},
        'activity_run_end': {'readonly': True},
        'activity_run_id': {'readonly': True},
        'activity_run_start': {'readonly': True},
        'activity_type': {'readonly': True},
        'duration_in_ms': {'readonly': True},
        'error': {'readonly': True},
        'input': {'readonly': True},
        'linked_service_name': {'readonly': True},
        'output': {'readonly': True},
        'pipeline_name': {'readonly': True},
        'pipeline_run_id': {'readonly': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'activity_name': {'key': 'activityName', 'type': 'str'},
        'activity_run_end': {'key': 'activityRunEnd', 'type': 'iso-8601'},
        'activity_run_id': {'key': 'activityRunId', 'type': 'str'},
        'activity_run_start': {'key': 'activityRunStart', 'type': 'iso-8601'},
        'activity_type': {'key': 'activityType', 'type': 'str'},
        'duration_in_ms': {'key': 'durationInMs', 'type': 'int'},
        'error': {'key': 'error', 'type': 'object'},
        'input': {'key': 'input', 'type': 'object'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'str'},
        'output': {'key': 'output', 'type': 'object'},
        'pipeline_name': {'key': 'pipelineName', 'type': 'str'},
        'pipeline_run_id': {'key': 'pipelineRunId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(ActivityRun, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.activity_name = None
        self.activity_run_end = None
        self.activity_run_id = None
        self.activity_run_start = None
        self.activity_type = None
        self.duration_in_ms = None
        self.error = None
        self.input = None
        self.linked_service_name = None
        self.output = None
        self.pipeline_name = None
        self.pipeline_run_id = None
        self.status = None


class ActivityRunsQueryResponse(msrest.serialization.Model):
    """A list activity runs.

    All required parameters must be populated in order to send to Azure.

    :param continuation_token: The continuation token for getting the next page of results, if any
     remaining results exist, null otherwise.
    :type continuation_token: str
    :param value: Required. List of activity runs.
    :type value: list[~azure.synapse.models.ActivityRun]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'continuation_token': {'key': 'continuationToken', 'type': 'str'},
        'value': {'key': 'value', 'type': '[ActivityRun]'},
    }

    def __init__(
        self,
        *,
        value: List["ActivityRun"],
        continuation_token: Optional[str] = None,
        **kwargs
    ):
        super(ActivityRunsQueryResponse, self).__init__(**kwargs)
        self.continuation_token = continuation_token
        self.value = value


class AddDataFlowToDebugSessionResponse(msrest.serialization.Model):
    """Response body structure for starting data flow debug session.

    :param job_version: The ID of data flow debug job version.
    :type job_version: str
    """

    _attribute_map = {
        'job_version': {'key': 'jobVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        job_version: Optional[str] = None,
        **kwargs
    ):
        super(AddDataFlowToDebugSessionResponse, self).__init__(**kwargs)
        self.job_version = job_version


class LinkedService(msrest.serialization.Model):
    """The Azure Synapse nested object which contains the information and credential which can be used to connect with related store or compute resource.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AmazonMWSLinkedService, AmazonRedshiftLinkedService, AmazonS3LinkedService, AzureBatchLinkedService, AzureBlobFSLinkedService, AzureBlobStorageLinkedService, AzureDataExplorerLinkedService, AzureDataLakeAnalyticsLinkedService, AzureDataLakeStoreLinkedService, AzureDatabricksLinkedService, AzureFileStorageLinkedService, AzureFunctionLinkedService, AzureKeyVaultLinkedService, AzureMLLinkedService, AzureMLServiceLinkedService, AzureMariaDBLinkedService, AzureMySqlLinkedService, AzurePostgreSqlLinkedService, AzureSearchLinkedService, AzureSqlDWLinkedService, AzureSqlDatabaseLinkedService, AzureSqlMILinkedService, AzureStorageLinkedService, AzureTableStorageLinkedService, CassandraLinkedService, CommonDataServiceForAppsLinkedService, ConcurLinkedService, CosmosDbLinkedService, CosmosDbMongoDbApiLinkedService, CouchbaseLinkedService, CustomDataSourceLinkedService, Db2LinkedService, DrillLinkedService, DynamicsLinkedService, DynamicsAXLinkedService, DynamicsCrmLinkedService, EloquaLinkedService, FileServerLinkedService, FtpServerLinkedService, GoogleAdWordsLinkedService, GoogleBigQueryLinkedService, GoogleCloudStorageLinkedService, GreenplumLinkedService, HBaseLinkedService, HDInsightLinkedService, HDInsightOnDemandLinkedService, HdfsLinkedService, HiveLinkedService, HttpLinkedService, HubspotLinkedService, ImpalaLinkedService, InformixLinkedService, JiraLinkedService, MagentoLinkedService, MariaDBLinkedService, MarketoLinkedService, MicrosoftAccessLinkedService, MongoDbLinkedService, MongoDbV2LinkedService, MySqlLinkedService, NetezzaLinkedService, ODataLinkedService, OdbcLinkedService, Office365LinkedService, OracleLinkedService, OracleServiceCloudLinkedService, PaypalLinkedService, PhoenixLinkedService, PostgreSqlLinkedService, PrestoLinkedService, QuickBooksLinkedService, ResponsysLinkedService, RestServiceLinkedService, SalesforceLinkedService, SalesforceMarketingCloudLinkedService, SalesforceServiceCloudLinkedService, SapBWLinkedService, SapCloudForCustomerLinkedService, SapEccLinkedService, SapHanaLinkedService, SapOpenHubLinkedService, SapTableLinkedService, ServiceNowLinkedService, SftpServerLinkedService, ShopifyLinkedService, SparkLinkedService, SqlServerLinkedService, SquareLinkedService, SybaseLinkedService, TeradataLinkedService, VerticaLinkedService, WebLinkedService, XeroLinkedService, ZohoLinkedService.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
    }

    _subtype_map = {
        'type': {'AmazonMWS': 'AmazonMWSLinkedService', 'AmazonRedshift': 'AmazonRedshiftLinkedService', 'AmazonS3': 'AmazonS3LinkedService', 'AzureBatch': 'AzureBatchLinkedService', 'AzureBlobFS': 'AzureBlobFSLinkedService', 'AzureBlobStorage': 'AzureBlobStorageLinkedService', 'AzureDataExplorer': 'AzureDataExplorerLinkedService', 'AzureDataLakeAnalytics': 'AzureDataLakeAnalyticsLinkedService', 'AzureDataLakeStore': 'AzureDataLakeStoreLinkedService', 'AzureDatabricks': 'AzureDatabricksLinkedService', 'AzureFileStorage': 'AzureFileStorageLinkedService', 'AzureFunction': 'AzureFunctionLinkedService', 'AzureKeyVault': 'AzureKeyVaultLinkedService', 'AzureML': 'AzureMLLinkedService', 'AzureMLService': 'AzureMLServiceLinkedService', 'AzureMariaDB': 'AzureMariaDBLinkedService', 'AzureMySql': 'AzureMySqlLinkedService', 'AzurePostgreSql': 'AzurePostgreSqlLinkedService', 'AzureSearch': 'AzureSearchLinkedService', 'AzureSqlDW': 'AzureSqlDWLinkedService', 'AzureSqlDatabase': 'AzureSqlDatabaseLinkedService', 'AzureSqlMI': 'AzureSqlMILinkedService', 'AzureStorage': 'AzureStorageLinkedService', 'AzureTableStorage': 'AzureTableStorageLinkedService', 'Cassandra': 'CassandraLinkedService', 'CommonDataServiceForApps': 'CommonDataServiceForAppsLinkedService', 'Concur': 'ConcurLinkedService', 'CosmosDb': 'CosmosDbLinkedService', 'CosmosDbMongoDbApi': 'CosmosDbMongoDbApiLinkedService', 'Couchbase': 'CouchbaseLinkedService', 'CustomDataSource': 'CustomDataSourceLinkedService', 'Db2': 'Db2LinkedService', 'Drill': 'DrillLinkedService', 'Dynamics': 'DynamicsLinkedService', 'DynamicsAX': 'DynamicsAXLinkedService', 'DynamicsCrm': 'DynamicsCrmLinkedService', 'Eloqua': 'EloquaLinkedService', 'FileServer': 'FileServerLinkedService', 'FtpServer': 'FtpServerLinkedService', 'GoogleAdWords': 'GoogleAdWordsLinkedService', 'GoogleBigQuery': 'GoogleBigQueryLinkedService', 'GoogleCloudStorage': 'GoogleCloudStorageLinkedService', 'Greenplum': 'GreenplumLinkedService', 'HBase': 'HBaseLinkedService', 'HDInsight': 'HDInsightLinkedService', 'HDInsightOnDemand': 'HDInsightOnDemandLinkedService', 'Hdfs': 'HdfsLinkedService', 'Hive': 'HiveLinkedService', 'HttpServer': 'HttpLinkedService', 'Hubspot': 'HubspotLinkedService', 'Impala': 'ImpalaLinkedService', 'Informix': 'InformixLinkedService', 'Jira': 'JiraLinkedService', 'Magento': 'MagentoLinkedService', 'MariaDB': 'MariaDBLinkedService', 'Marketo': 'MarketoLinkedService', 'MicrosoftAccess': 'MicrosoftAccessLinkedService', 'MongoDb': 'MongoDbLinkedService', 'MongoDbV2': 'MongoDbV2LinkedService', 'MySql': 'MySqlLinkedService', 'Netezza': 'NetezzaLinkedService', 'OData': 'ODataLinkedService', 'Odbc': 'OdbcLinkedService', 'Office365': 'Office365LinkedService', 'Oracle': 'OracleLinkedService', 'OracleServiceCloud': 'OracleServiceCloudLinkedService', 'Paypal': 'PaypalLinkedService', 'Phoenix': 'PhoenixLinkedService', 'PostgreSql': 'PostgreSqlLinkedService', 'Presto': 'PrestoLinkedService', 'QuickBooks': 'QuickBooksLinkedService', 'Responsys': 'ResponsysLinkedService', 'RestService': 'RestServiceLinkedService', 'Salesforce': 'SalesforceLinkedService', 'SalesforceMarketingCloud': 'SalesforceMarketingCloudLinkedService', 'SalesforceServiceCloud': 'SalesforceServiceCloudLinkedService', 'SapBW': 'SapBWLinkedService', 'SapCloudForCustomer': 'SapCloudForCustomerLinkedService', 'SapEcc': 'SapEccLinkedService', 'SapHana': 'SapHanaLinkedService', 'SapOpenHub': 'SapOpenHubLinkedService', 'SapTable': 'SapTableLinkedService', 'ServiceNow': 'ServiceNowLinkedService', 'Sftp': 'SftpServerLinkedService', 'Shopify': 'ShopifyLinkedService', 'Spark': 'SparkLinkedService', 'SqlServer': 'SqlServerLinkedService', 'Square': 'SquareLinkedService', 'Sybase': 'SybaseLinkedService', 'Teradata': 'TeradataLinkedService', 'Vertica': 'VerticaLinkedService', 'Web': 'WebLinkedService', 'Xero': 'XeroLinkedService', 'Zoho': 'ZohoLinkedService'}
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        **kwargs
    ):
        super(LinkedService, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.type = 'LinkedService'
        self.description = description
        self.annotations = annotations
        self.connect_via = connect_via
        self.parameters = parameters


class AmazonMWSLinkedService(LinkedService):
    """Amazon Marketplace Web Service linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param access_key_id: Required. The access key id used to access data.
    :type access_key_id: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param endpoint: Required. The endpoint of the Amazon MWS server, (i.e.
     mws.amazonservices.com).
    :type endpoint: object
    :param marketplace_id: Required. The Amazon Marketplace ID you want to retrieve data from. To
     retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e.
     A2EUQ1WTGCTBG2).
    :type marketplace_id: object
    :param mws_auth_token: The Amazon MWS authentication token.
    :type mws_auth_token: ~azure.synapse.models.SecretBase
    :param secret_key: The secret key used to access data.
    :type secret_key: ~azure.synapse.models.SecretBase
    :param seller_id: Required. The Amazon seller ID.
    :type seller_id: object
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true.
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true.
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true.
    :type use_peer_verification: object
    """

    _validation = {
        'type': {'required': True},
        'access_key_id': {'required': True},
        'endpoint': {'required': True},
        'marketplace_id': {'required': True},
        'seller_id': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'access_key_id': {'key': 'typeProperties.accessKeyId', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'endpoint': {'key': 'typeProperties.endpoint', 'type': 'object'},
        'marketplace_id': {'key': 'typeProperties.marketplaceID', 'type': 'object'},
        'mws_auth_token': {'key': 'typeProperties.mwsAuthToken', 'type': 'SecretBase'},
        'secret_key': {'key': 'typeProperties.secretKey', 'type': 'SecretBase'},
        'seller_id': {'key': 'typeProperties.sellerID', 'type': 'object'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        access_key_id: object,
        endpoint: object,
        marketplace_id: object,
        seller_id: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        mws_auth_token: Optional["SecretBase"] = None,
        secret_key: Optional["SecretBase"] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        **kwargs
    ):
        super(AmazonMWSLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AmazonMWS'
        self.access_key_id = access_key_id
        self.encrypted_credential = encrypted_credential
        self.endpoint = endpoint
        self.marketplace_id = marketplace_id
        self.mws_auth_token = mws_auth_token
        self.secret_key = secret_key
        self.seller_id = seller_id
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification


class Dataset(msrest.serialization.Model):
    """The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AmazonMWSObjectDataset, AmazonRedshiftTableDataset, AvroDataset, AzureDataExplorerTableDataset, AzureMariaDBTableDataset, AzureMySqlTableDataset, AzurePostgreSqlTableDataset, AzureSearchIndexDataset, AzureSqlDWTableDataset, AzureSqlMITableDataset, AzureSqlTableDataset, AzureTableDataset, BinaryDataset, CassandraTableDataset, CommonDataServiceForAppsEntityDataset, ConcurObjectDataset, CosmosDbMongoDbApiCollectionDataset, CosmosDbSqlApiCollectionDataset, CouchbaseTableDataset, Db2TableDataset, DelimitedTextDataset, DocumentDbCollectionDataset, DrillTableDataset, DynamicsAXResourceDataset, DynamicsCrmEntityDataset, DynamicsEntityDataset, EloquaObjectDataset, GoogleAdWordsObjectDataset, GoogleBigQueryObjectDataset, GreenplumTableDataset, HBaseObjectDataset, HiveObjectDataset, HubspotObjectDataset, ImpalaObjectDataset, InformixTableDataset, JiraObjectDataset, JsonDataset, MagentoObjectDataset, MariaDBTableDataset, MarketoObjectDataset, MicrosoftAccessTableDataset, MongoDbCollectionDataset, MongoDbV2CollectionDataset, MySqlTableDataset, NetezzaTableDataset, ODataResourceDataset, OdbcTableDataset, Office365Dataset, OracleServiceCloudObjectDataset, OracleTableDataset, OrcDataset, ParquetDataset, PaypalObjectDataset, PhoenixObjectDataset, PostgreSqlTableDataset, PrestoObjectDataset, QuickBooksObjectDataset, RelationalTableDataset, ResponsysObjectDataset, RestResourceDataset, SalesforceMarketingCloudObjectDataset, SalesforceObjectDataset, SalesforceServiceCloudObjectDataset, SapCloudForCustomerResourceDataset, SapEccResourceDataset, SapHanaTableDataset, SapOpenHubTableDataset, SapTableResourceDataset, ServiceNowObjectDataset, ShopifyObjectDataset, SparkObjectDataset, SqlServerTableDataset, SquareObjectDataset, SybaseTableDataset, TeradataTableDataset, VerticaTableDataset, WebTableDataset, XeroObjectDataset, ZohoObjectDataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
    }

    _subtype_map = {
        'type': {'AmazonMWSObject': 'AmazonMWSObjectDataset', 'AmazonRedshiftTable': 'AmazonRedshiftTableDataset', 'Avro': 'AvroDataset', 'AzureDataExplorerTable': 'AzureDataExplorerTableDataset', 'AzureMariaDBTable': 'AzureMariaDBTableDataset', 'AzureMySqlTable': 'AzureMySqlTableDataset', 'AzurePostgreSqlTable': 'AzurePostgreSqlTableDataset', 'AzureSearchIndex': 'AzureSearchIndexDataset', 'AzureSqlDWTable': 'AzureSqlDWTableDataset', 'AzureSqlMITable': 'AzureSqlMITableDataset', 'AzureSqlTable': 'AzureSqlTableDataset', 'AzureTable': 'AzureTableDataset', 'Binary': 'BinaryDataset', 'CassandraTable': 'CassandraTableDataset', 'CommonDataServiceForAppsEntity': 'CommonDataServiceForAppsEntityDataset', 'ConcurObject': 'ConcurObjectDataset', 'CosmosDbMongoDbApiCollection': 'CosmosDbMongoDbApiCollectionDataset', 'CosmosDbSqlApiCollection': 'CosmosDbSqlApiCollectionDataset', 'CouchbaseTable': 'CouchbaseTableDataset', 'Db2Table': 'Db2TableDataset', 'DelimitedText': 'DelimitedTextDataset', 'DocumentDbCollection': 'DocumentDbCollectionDataset', 'DrillTable': 'DrillTableDataset', 'DynamicsAXResource': 'DynamicsAXResourceDataset', 'DynamicsCrmEntity': 'DynamicsCrmEntityDataset', 'DynamicsEntity': 'DynamicsEntityDataset', 'EloquaObject': 'EloquaObjectDataset', 'GoogleAdWordsObject': 'GoogleAdWordsObjectDataset', 'GoogleBigQueryObject': 'GoogleBigQueryObjectDataset', 'GreenplumTable': 'GreenplumTableDataset', 'HBaseObject': 'HBaseObjectDataset', 'HiveObject': 'HiveObjectDataset', 'HubspotObject': 'HubspotObjectDataset', 'ImpalaObject': 'ImpalaObjectDataset', 'InformixTable': 'InformixTableDataset', 'JiraObject': 'JiraObjectDataset', 'Json': 'JsonDataset', 'MagentoObject': 'MagentoObjectDataset', 'MariaDBTable': 'MariaDBTableDataset', 'MarketoObject': 'MarketoObjectDataset', 'MicrosoftAccessTable': 'MicrosoftAccessTableDataset', 'MongoDbCollection': 'MongoDbCollectionDataset', 'MongoDbV2Collection': 'MongoDbV2CollectionDataset', 'MySqlTable': 'MySqlTableDataset', 'NetezzaTable': 'NetezzaTableDataset', 'ODataResource': 'ODataResourceDataset', 'OdbcTable': 'OdbcTableDataset', 'Office365Table': 'Office365Dataset', 'OracleServiceCloudObject': 'OracleServiceCloudObjectDataset', 'OracleTable': 'OracleTableDataset', 'Orc': 'OrcDataset', 'Parquet': 'ParquetDataset', 'PaypalObject': 'PaypalObjectDataset', 'PhoenixObject': 'PhoenixObjectDataset', 'PostgreSqlTable': 'PostgreSqlTableDataset', 'PrestoObject': 'PrestoObjectDataset', 'QuickBooksObject': 'QuickBooksObjectDataset', 'RelationalTable': 'RelationalTableDataset', 'ResponsysObject': 'ResponsysObjectDataset', 'RestResource': 'RestResourceDataset', 'SalesforceMarketingCloudObject': 'SalesforceMarketingCloudObjectDataset', 'SalesforceObject': 'SalesforceObjectDataset', 'SalesforceServiceCloudObject': 'SalesforceServiceCloudObjectDataset', 'SapCloudForCustomerResource': 'SapCloudForCustomerResourceDataset', 'SapEccResource': 'SapEccResourceDataset', 'SapHanaTable': 'SapHanaTableDataset', 'SapOpenHubTable': 'SapOpenHubTableDataset', 'SapTableResource': 'SapTableResourceDataset', 'ServiceNowObject': 'ServiceNowObjectDataset', 'ShopifyObject': 'ShopifyObjectDataset', 'SparkObject': 'SparkObjectDataset', 'SqlServerTable': 'SqlServerTableDataset', 'SquareObject': 'SquareObjectDataset', 'SybaseTable': 'SybaseTableDataset', 'TeradataTable': 'TeradataTableDataset', 'VerticaTable': 'VerticaTableDataset', 'WebTable': 'WebTableDataset', 'XeroObject': 'XeroObjectDataset', 'ZohoObject': 'ZohoObjectDataset'}
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        **kwargs
    ):
        super(Dataset, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.type = 'Dataset'
        self.schema = schema
        self.description = description
        self.annotations = annotations
        self.folder = folder
        self.linked_service_name = linked_service_name
        self.parameters = parameters
        self.structure = structure


class AmazonMWSObjectDataset(Dataset):
    """Amazon Marketplace Web Service dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(AmazonMWSObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'AmazonMWSObject'
        self.table_name = table_name


class AmazonRedshiftLinkedService(LinkedService):
    """Linked service for Amazon Redshift.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param database: Required. The database name of the Amazon Redshift source. Type: string (or
     Expression with resultType string).
    :type database: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: The password of the Amazon Redshift source.
    :type password: ~azure.synapse.models.SecretBase
    :param port: The TCP port number that the Amazon Redshift server uses to listen for client
     connections. The default value is 5439. Type: integer (or Expression with resultType integer).
    :type port: object
    :param server: Required. The name of the Amazon Redshift server. Type: string (or Expression
     with resultType string).
    :type server: object
    :param username: The username of the Amazon Redshift source. Type: string (or Expression with
     resultType string).
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'database': {'required': True},
        'server': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'database': {'key': 'typeProperties.database', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'port': {'key': 'typeProperties.port', 'type': 'object'},
        'server': {'key': 'typeProperties.server', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        database: object,
        server: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        port: Optional[object] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(AmazonRedshiftLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AmazonRedshift'
        self.database = database
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.port = port
        self.server = server
        self.username = username


class AmazonRedshiftTableDataset(Dataset):
    """The Amazon Redshift table dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The Amazon Redshift schema name. Type: string (or
     Expression with resultType string).
    :type schema_type_properties_schema: object
    :param table: The Amazon Redshift table name. Type: string (or Expression with resultType
     string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(AmazonRedshiftTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'AmazonRedshiftTable'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class AmazonS3LinkedService(LinkedService):
    """Linked service for Amazon S3.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param access_key_id: The access key identifier of the Amazon S3 Identity and Access Management
     (IAM) user. Type: string (or Expression with resultType string).
    :type access_key_id: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param secret_access_key: The secret access key of the Amazon S3 Identity and Access Management
     (IAM) user.
    :type secret_access_key: ~azure.synapse.models.SecretBase
    :param service_url: This value specifies the endpoint to access with the S3 Connector. This is
     an optional property; change it only if you want to try a different service endpoint or want to
     switch between https and http. Type: string (or Expression with resultType string).
    :type service_url: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'access_key_id': {'key': 'typeProperties.accessKeyId', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'secret_access_key': {'key': 'typeProperties.secretAccessKey', 'type': 'SecretBase'},
        'service_url': {'key': 'typeProperties.serviceUrl', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        access_key_id: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        secret_access_key: Optional["SecretBase"] = None,
        service_url: Optional[object] = None,
        **kwargs
    ):
        super(AmazonS3LinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AmazonS3'
        self.access_key_id = access_key_id
        self.encrypted_credential = encrypted_credential
        self.secret_access_key = secret_access_key
        self.service_url = service_url


class AppendVariableActivity(Activity):
    """Append value for a Variable of type Array.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param value: Value to be appended. Could be a static value or Expression.
    :type value: object
    :param variable_name: Name of the variable whose value needs to be appended to.
    :type variable_name: str
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'value': {'key': 'typeProperties.value', 'type': 'object'},
        'variable_name': {'key': 'typeProperties.variableName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        value: Optional[object] = None,
        variable_name: Optional[str] = None,
        **kwargs
    ):
        super(AppendVariableActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, **kwargs)
        self.type = 'AppendVariable'
        self.value = value
        self.variable_name = variable_name


class AvroDataset(Dataset):
    """Avro dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param avro_compression_codec:  Possible values include: "none", "deflate", "snappy", "xz",
     "bzip2".
    :type avro_compression_codec: str or ~azure.synapse.models.AvroCompressionCodec
    :param avro_compression_level:
    :type avro_compression_level: int
    :param location: The location of the avro storage.
    :type location: ~azure.synapse.models.DatasetLocation
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
        'avro_compression_level': {'maximum': 9, 'minimum': 1},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'avro_compression_codec': {'key': 'typeProperties.avroCompressionCodec', 'type': 'str'},
        'avro_compression_level': {'key': 'typeProperties.avroCompressionLevel', 'type': 'int'},
        'location': {'key': 'typeProperties.location', 'type': 'DatasetLocation'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        avro_compression_codec: Optional[Union[str, "AvroCompressionCodec"]] = None,
        avro_compression_level: Optional[int] = None,
        location: Optional["DatasetLocation"] = None,
        **kwargs
    ):
        super(AvroDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'Avro'
        self.avro_compression_codec = avro_compression_codec
        self.avro_compression_level = avro_compression_level
        self.location = location


class AzureBatchLinkedService(LinkedService):
    """Azure Batch linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param access_key: The Azure Batch account access key.
    :type access_key: ~azure.synapse.models.SecretBase
    :param account_name: Required. The Azure Batch account name. Type: string (or Expression with
     resultType string).
    :type account_name: object
    :param batch_uri: Required. The Azure Batch URI. Type: string (or Expression with resultType
     string).
    :type batch_uri: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param linked_service_name: Required. The Azure Storage linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param pool_name: Required. The Azure Batch pool name. Type: string (or Expression with
     resultType string).
    :type pool_name: object
    """

    _validation = {
        'type': {'required': True},
        'account_name': {'required': True},
        'batch_uri': {'required': True},
        'linked_service_name': {'required': True},
        'pool_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'access_key': {'key': 'typeProperties.accessKey', 'type': 'SecretBase'},
        'account_name': {'key': 'typeProperties.accountName', 'type': 'object'},
        'batch_uri': {'key': 'typeProperties.batchUri', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'linked_service_name': {'key': 'typeProperties.linkedServiceName', 'type': 'LinkedServiceReference'},
        'pool_name': {'key': 'typeProperties.poolName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        account_name: object,
        batch_uri: object,
        linked_service_name: "LinkedServiceReference",
        pool_name: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        access_key: Optional["SecretBase"] = None,
        encrypted_credential: Optional[object] = None,
        **kwargs
    ):
        super(AzureBatchLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureBatch'
        self.access_key = access_key
        self.account_name = account_name
        self.batch_uri = batch_uri
        self.encrypted_credential = encrypted_credential
        self.linked_service_name = linked_service_name
        self.pool_name = pool_name


class AzureBlobFSLinkedService(LinkedService):
    """Azure Data Lake Storage Gen2 linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param account_key: Account key for the Azure Data Lake Storage Gen2 service. Type: string (or
     Expression with resultType string).
    :type account_key: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param service_principal_id: The ID of the application used to authenticate against the Azure
     Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
    :type service_principal_id: object
    :param service_principal_key: The Key of the application used to authenticate against the Azure
     Data Lake Storage Gen2 account.
    :type service_principal_key: ~azure.synapse.models.SecretBase
    :param tenant: The name or ID of the tenant to which the service principal belongs. Type:
     string (or Expression with resultType string).
    :type tenant: object
    :param url: Required. Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or
     Expression with resultType string).
    :type url: object
    """

    _validation = {
        'type': {'required': True},
        'url': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'account_key': {'key': 'typeProperties.accountKey', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_principal_key': {'key': 'typeProperties.servicePrincipalKey', 'type': 'SecretBase'},
        'tenant': {'key': 'typeProperties.tenant', 'type': 'object'},
        'url': {'key': 'typeProperties.url', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        url: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        account_key: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        service_principal_id: Optional[object] = None,
        service_principal_key: Optional["SecretBase"] = None,
        tenant: Optional[object] = None,
        **kwargs
    ):
        super(AzureBlobFSLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureBlobFS'
        self.account_key = account_key
        self.encrypted_credential = encrypted_credential
        self.service_principal_id = service_principal_id
        self.service_principal_key = service_principal_key
        self.tenant = tenant
        self.url = url


class AzureBlobStorageLinkedService(LinkedService):
    """The azure blob storage linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param account_key: The Azure key vault secret reference of accountKey in connection string.
    :type account_key: ~azure.synapse.models.AzureKeyVaultSecretReference
    :param connection_string: The connection string. It is mutually exclusive with sasUri,
     serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: str
    :param sas_token: The Azure key vault secret reference of sasToken in sas uri.
    :type sas_token: ~azure.synapse.models.AzureKeyVaultSecretReference
    :param sas_uri: SAS URI of the Azure Blob Storage resource. It is mutually exclusive with
     connectionString, serviceEndpoint property. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type sas_uri: object
    :param service_endpoint: Blob service endpoint of the Azure Blob Storage resource. It is
     mutually exclusive with connectionString, sasUri property.
    :type service_endpoint: str
    :param service_principal_id: The ID of the service principal used to authenticate against Azure
     SQL Data Warehouse. Type: string (or Expression with resultType string).
    :type service_principal_id: object
    :param service_principal_key: The key of the service principal used to authenticate against
     Azure SQL Data Warehouse.
    :type service_principal_key: ~azure.synapse.models.SecretBase
    :param tenant: The name or ID of the tenant to which the service principal belongs. Type:
     string (or Expression with resultType string).
    :type tenant: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'account_key': {'key': 'typeProperties.accountKey', 'type': 'AzureKeyVaultSecretReference'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'str'},
        'sas_token': {'key': 'typeProperties.sasToken', 'type': 'AzureKeyVaultSecretReference'},
        'sas_uri': {'key': 'typeProperties.sasUri', 'type': 'object'},
        'service_endpoint': {'key': 'typeProperties.serviceEndpoint', 'type': 'str'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_principal_key': {'key': 'typeProperties.servicePrincipalKey', 'type': 'SecretBase'},
        'tenant': {'key': 'typeProperties.tenant', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        account_key: Optional["AzureKeyVaultSecretReference"] = None,
        connection_string: Optional[object] = None,
        encrypted_credential: Optional[str] = None,
        sas_token: Optional["AzureKeyVaultSecretReference"] = None,
        sas_uri: Optional[object] = None,
        service_endpoint: Optional[str] = None,
        service_principal_id: Optional[object] = None,
        service_principal_key: Optional["SecretBase"] = None,
        tenant: Optional[object] = None,
        **kwargs
    ):
        super(AzureBlobStorageLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureBlobStorage'
        self.account_key = account_key
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.sas_token = sas_token
        self.sas_uri = sas_uri
        self.service_endpoint = service_endpoint
        self.service_principal_id = service_principal_id
        self.service_principal_key = service_principal_key
        self.tenant = tenant


class AzureDatabricksLinkedService(LinkedService):
    """Azure Databricks linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param access_token: Required. Access token for databricks REST API. Refer to
     https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression
     with resultType string).
    :type access_token: ~azure.synapse.models.SecretBase
    :param domain: Required. :code:`<REGION>`.azuredatabricks.net, domain name of your Databricks
     deployment. Type: string (or Expression with resultType string).
    :type domain: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param existing_cluster_id: The id of an existing interactive cluster that will be used for all
     runs of this activity. Type: string (or Expression with resultType string).
    :type existing_cluster_id: object
    :param instance_pool_id: The id of an existing instance pool that will be used for all runs of
     this activity. Type: string (or Expression with resultType string).
    :type instance_pool_id: object
    :param new_cluster_custom_tags: Additional tags for cluster resources. This property is ignored
     in instance pool configurations.
    :type new_cluster_custom_tags: dict[str, object]
    :param new_cluster_driver_node_type: The driver node type for the new job cluster. This
     property is ignored in instance pool configurations. Type: string (or Expression with
     resultType string).
    :type new_cluster_driver_node_type: object
    :param new_cluster_enable_elastic_disk: Enable the elastic disk on the new cluster. This
     property is now ignored, and takes the default elastic disk behavior in Databricks (elastic
     disks are always enabled). Type: boolean (or Expression with resultType boolean).
    :type new_cluster_enable_elastic_disk: object
    :param new_cluster_init_scripts: User-defined initialization scripts for the new cluster. Type:
     array of strings (or Expression with resultType array of strings).
    :type new_cluster_init_scripts: object
    :param new_cluster_node_type: The node type of the new job cluster. This property is required
     if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is
     specified, this property is ignored. Type: string (or Expression with resultType string).
    :type new_cluster_node_type: object
    :param new_cluster_num_of_worker: If not using an existing interactive cluster, this specifies
     the number of worker nodes to use for the new job cluster or instance pool. For new job
     clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-
     scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can
     only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is
     specified. Type: string (or Expression with resultType string).
    :type new_cluster_num_of_worker: object
    :param new_cluster_spark_conf: A set of optional, user-specified Spark configuration key-value
     pairs.
    :type new_cluster_spark_conf: dict[str, object]
    :param new_cluster_spark_env_vars: A set of optional, user-specified Spark environment
     variables key-value pairs.
    :type new_cluster_spark_env_vars: dict[str, object]
    :param new_cluster_version: If not using an existing interactive cluster, this specifies the
     Spark version of a new job cluster or instance pool nodes created for each run of this
     activity. Required if instancePoolId is specified. Type: string (or Expression with resultType
     string).
    :type new_cluster_version: object
    """

    _validation = {
        'type': {'required': True},
        'access_token': {'required': True},
        'domain': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'access_token': {'key': 'typeProperties.accessToken', 'type': 'SecretBase'},
        'domain': {'key': 'typeProperties.domain', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'existing_cluster_id': {'key': 'typeProperties.existingClusterId', 'type': 'object'},
        'instance_pool_id': {'key': 'typeProperties.instancePoolId', 'type': 'object'},
        'new_cluster_custom_tags': {'key': 'typeProperties.newClusterCustomTags', 'type': '{object}'},
        'new_cluster_driver_node_type': {'key': 'typeProperties.newClusterDriverNodeType', 'type': 'object'},
        'new_cluster_enable_elastic_disk': {'key': 'typeProperties.newClusterEnableElasticDisk', 'type': 'object'},
        'new_cluster_init_scripts': {'key': 'typeProperties.newClusterInitScripts', 'type': 'object'},
        'new_cluster_node_type': {'key': 'typeProperties.newClusterNodeType', 'type': 'object'},
        'new_cluster_num_of_worker': {'key': 'typeProperties.newClusterNumOfWorker', 'type': 'object'},
        'new_cluster_spark_conf': {'key': 'typeProperties.newClusterSparkConf', 'type': '{object}'},
        'new_cluster_spark_env_vars': {'key': 'typeProperties.newClusterSparkEnvVars', 'type': '{object}'},
        'new_cluster_version': {'key': 'typeProperties.newClusterVersion', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        access_token: "SecretBase",
        domain: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        existing_cluster_id: Optional[object] = None,
        instance_pool_id: Optional[object] = None,
        new_cluster_custom_tags: Optional[Dict[str, object]] = None,
        new_cluster_driver_node_type: Optional[object] = None,
        new_cluster_enable_elastic_disk: Optional[object] = None,
        new_cluster_init_scripts: Optional[object] = None,
        new_cluster_node_type: Optional[object] = None,
        new_cluster_num_of_worker: Optional[object] = None,
        new_cluster_spark_conf: Optional[Dict[str, object]] = None,
        new_cluster_spark_env_vars: Optional[Dict[str, object]] = None,
        new_cluster_version: Optional[object] = None,
        **kwargs
    ):
        super(AzureDatabricksLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureDatabricks'
        self.access_token = access_token
        self.domain = domain
        self.encrypted_credential = encrypted_credential
        self.existing_cluster_id = existing_cluster_id
        self.instance_pool_id = instance_pool_id
        self.new_cluster_custom_tags = new_cluster_custom_tags
        self.new_cluster_driver_node_type = new_cluster_driver_node_type
        self.new_cluster_enable_elastic_disk = new_cluster_enable_elastic_disk
        self.new_cluster_init_scripts = new_cluster_init_scripts
        self.new_cluster_node_type = new_cluster_node_type
        self.new_cluster_num_of_worker = new_cluster_num_of_worker
        self.new_cluster_spark_conf = new_cluster_spark_conf
        self.new_cluster_spark_env_vars = new_cluster_spark_env_vars
        self.new_cluster_version = new_cluster_version


class ExecutionActivity(Activity):
    """Base class for all execution activities.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureDataExplorerCommandActivity, AzureFunctionActivity, AzureMLBatchExecutionActivity, AzureMLExecutePipelineActivity, AzureMLUpdateResourceActivity, CopyActivity, CustomActivity, DataLakeAnalyticsUSQLActivity, DatabricksNotebookActivity, DatabricksSparkJarActivity, DatabricksSparkPythonActivity, DeleteActivity, ExecuteDataFlowActivity, ExecuteSSISPackageActivity, GetMetadataActivity, HDInsightHiveActivity, HDInsightMapReduceActivity, HDInsightPigActivity, HDInsightSparkActivity, HDInsightStreamingActivity, LookupActivity, SqlServerStoredProcedureActivity, WebActivity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
    }

    _subtype_map = {
        'type': {'AzureDataExplorerCommand': 'AzureDataExplorerCommandActivity', 'AzureFunctionActivity': 'AzureFunctionActivity', 'AzureMLBatchExecution': 'AzureMLBatchExecutionActivity', 'AzureMLExecutePipeline': 'AzureMLExecutePipelineActivity', 'AzureMLUpdateResource': 'AzureMLUpdateResourceActivity', 'Copy': 'CopyActivity', 'Custom': 'CustomActivity', 'DataLakeAnalyticsU-SQL': 'DataLakeAnalyticsUSQLActivity', 'DatabricksNotebook': 'DatabricksNotebookActivity', 'DatabricksSparkJar': 'DatabricksSparkJarActivity', 'DatabricksSparkPython': 'DatabricksSparkPythonActivity', 'Delete': 'DeleteActivity', 'ExecuteDataFlow': 'ExecuteDataFlowActivity', 'ExecuteSSISPackage': 'ExecuteSSISPackageActivity', 'GetMetadata': 'GetMetadataActivity', 'HDInsightHive': 'HDInsightHiveActivity', 'HDInsightMapReduce': 'HDInsightMapReduceActivity', 'HDInsightPig': 'HDInsightPigActivity', 'HDInsightSpark': 'HDInsightSparkActivity', 'HDInsightStreaming': 'HDInsightStreamingActivity', 'Lookup': 'LookupActivity', 'SqlServerStoredProcedure': 'SqlServerStoredProcedureActivity', 'WebActivity': 'WebActivity'}
    }

    def __init__(
        self,
        *,
        name: str,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        **kwargs
    ):
        super(ExecutionActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, **kwargs)
        self.type = 'Execution'
        self.linked_service_name = linked_service_name
        self.policy = policy


class AzureDataExplorerCommandActivity(ExecutionActivity):
    """Azure Data Explorer command activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param command: Required. A control command, according to the Azure Data Explorer command
     syntax. Type: string (or Expression with resultType string).
    :type command: object
    :param command_timeout: Control command timeout. Type: string (or Expression with resultType
     string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..).
    :type command_timeout: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'command': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'command': {'key': 'typeProperties.command', 'type': 'object'},
        'command_timeout': {'key': 'typeProperties.commandTimeout', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        command: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        command_timeout: Optional[object] = None,
        **kwargs
    ):
        super(AzureDataExplorerCommandActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'AzureDataExplorerCommand'
        self.command = command
        self.command_timeout = command_timeout


class AzureDataExplorerLinkedService(LinkedService):
    """Azure Data Explorer (Kusto) linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param database: Required. Database name for connection. Type: string (or Expression with
     resultType string).
    :type database: object
    :param endpoint: Required. The endpoint of Azure Data Explorer (the engine's endpoint). URL
     will be in the format https://:code:`<clusterName>`.:code:`<regionName>`.kusto.windows.net.
     Type: string (or Expression with resultType string).
    :type endpoint: object
    :param service_principal_id: Required. The ID of the service principal used to authenticate
     against Azure Data Explorer. Type: string (or Expression with resultType string).
    :type service_principal_id: object
    :param service_principal_key: Required. The key of the service principal used to authenticate
     against Kusto.
    :type service_principal_key: ~azure.synapse.models.SecretBase
    :param tenant: Required. The name or ID of the tenant to which the service principal belongs.
     Type: string (or Expression with resultType string).
    :type tenant: object
    """

    _validation = {
        'type': {'required': True},
        'database': {'required': True},
        'endpoint': {'required': True},
        'service_principal_id': {'required': True},
        'service_principal_key': {'required': True},
        'tenant': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'database': {'key': 'typeProperties.database', 'type': 'object'},
        'endpoint': {'key': 'typeProperties.endpoint', 'type': 'object'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_principal_key': {'key': 'typeProperties.servicePrincipalKey', 'type': 'SecretBase'},
        'tenant': {'key': 'typeProperties.tenant', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        database: object,
        endpoint: object,
        service_principal_id: object,
        service_principal_key: "SecretBase",
        tenant: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        **kwargs
    ):
        super(AzureDataExplorerLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureDataExplorer'
        self.database = database
        self.endpoint = endpoint
        self.service_principal_id = service_principal_id
        self.service_principal_key = service_principal_key
        self.tenant = tenant


class AzureDataExplorerTableDataset(Dataset):
    """The Azure Data Explorer (Kusto) dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table: The table name of the Azure Data Explorer database. Type: string (or Expression
     with resultType string).
    :type table: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table: Optional[object] = None,
        **kwargs
    ):
        super(AzureDataExplorerTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'AzureDataExplorerTable'
        self.table = table


class AzureDataLakeAnalyticsLinkedService(LinkedService):
    """Azure Data Lake Analytics linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param account_name: Required. The Azure Data Lake Analytics account name. Type: string (or
     Expression with resultType string).
    :type account_name: object
    :param data_lake_analytics_uri: Azure Data Lake Analytics URI Type: string (or Expression with
     resultType string).
    :type data_lake_analytics_uri: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param resource_group_name: Data Lake Analytics account resource group name (if different from
     Data Factory account). Type: string (or Expression with resultType string).
    :type resource_group_name: object
    :param service_principal_id: The ID of the application used to authenticate against the Azure
     Data Lake Analytics account. Type: string (or Expression with resultType string).
    :type service_principal_id: object
    :param service_principal_key: The Key of the application used to authenticate against the Azure
     Data Lake Analytics account.
    :type service_principal_key: ~azure.synapse.models.SecretBase
    :param subscription_id: Data Lake Analytics account subscription ID (if different from Data
     Factory account). Type: string (or Expression with resultType string).
    :type subscription_id: object
    :param tenant: Required. The name or ID of the tenant to which the service principal belongs.
     Type: string (or Expression with resultType string).
    :type tenant: object
    """

    _validation = {
        'type': {'required': True},
        'account_name': {'required': True},
        'tenant': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'account_name': {'key': 'typeProperties.accountName', 'type': 'object'},
        'data_lake_analytics_uri': {'key': 'typeProperties.dataLakeAnalyticsUri', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'resource_group_name': {'key': 'typeProperties.resourceGroupName', 'type': 'object'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_principal_key': {'key': 'typeProperties.servicePrincipalKey', 'type': 'SecretBase'},
        'subscription_id': {'key': 'typeProperties.subscriptionId', 'type': 'object'},
        'tenant': {'key': 'typeProperties.tenant', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        account_name: object,
        tenant: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        data_lake_analytics_uri: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        resource_group_name: Optional[object] = None,
        service_principal_id: Optional[object] = None,
        service_principal_key: Optional["SecretBase"] = None,
        subscription_id: Optional[object] = None,
        **kwargs
    ):
        super(AzureDataLakeAnalyticsLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureDataLakeAnalytics'
        self.account_name = account_name
        self.data_lake_analytics_uri = data_lake_analytics_uri
        self.encrypted_credential = encrypted_credential
        self.resource_group_name = resource_group_name
        self.service_principal_id = service_principal_id
        self.service_principal_key = service_principal_key
        self.subscription_id = subscription_id
        self.tenant = tenant


class AzureDataLakeStoreLinkedService(LinkedService):
    """Azure Data Lake Store linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param account_name: Data Lake Store account name. Type: string (or Expression with resultType
     string).
    :type account_name: object
    :param data_lake_store_uri: Required. Data Lake Store service URI. Type: string (or Expression
     with resultType string).
    :type data_lake_store_uri: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param resource_group_name: Data Lake Store account resource group name (if different from Data
     Factory account). Type: string (or Expression with resultType string).
    :type resource_group_name: object
    :param service_principal_id: The ID of the application used to authenticate against the Azure
     Data Lake Store account. Type: string (or Expression with resultType string).
    :type service_principal_id: object
    :param service_principal_key: The Key of the application used to authenticate against the Azure
     Data Lake Store account.
    :type service_principal_key: ~azure.synapse.models.SecretBase
    :param subscription_id: Data Lake Store account subscription ID (if different from Data Factory
     account). Type: string (or Expression with resultType string).
    :type subscription_id: object
    :param tenant: The name or ID of the tenant to which the service principal belongs. Type:
     string (or Expression with resultType string).
    :type tenant: object
    """

    _validation = {
        'type': {'required': True},
        'data_lake_store_uri': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'account_name': {'key': 'typeProperties.accountName', 'type': 'object'},
        'data_lake_store_uri': {'key': 'typeProperties.dataLakeStoreUri', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'resource_group_name': {'key': 'typeProperties.resourceGroupName', 'type': 'object'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_principal_key': {'key': 'typeProperties.servicePrincipalKey', 'type': 'SecretBase'},
        'subscription_id': {'key': 'typeProperties.subscriptionId', 'type': 'object'},
        'tenant': {'key': 'typeProperties.tenant', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        data_lake_store_uri: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        account_name: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        resource_group_name: Optional[object] = None,
        service_principal_id: Optional[object] = None,
        service_principal_key: Optional["SecretBase"] = None,
        subscription_id: Optional[object] = None,
        tenant: Optional[object] = None,
        **kwargs
    ):
        super(AzureDataLakeStoreLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureDataLakeStore'
        self.account_name = account_name
        self.data_lake_store_uri = data_lake_store_uri
        self.encrypted_credential = encrypted_credential
        self.resource_group_name = resource_group_name
        self.service_principal_id = service_principal_id
        self.service_principal_key = service_principal_key
        self.subscription_id = subscription_id
        self.tenant = tenant


class AzureFileStorageLinkedService(LinkedService):
    """Azure File Storage linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. Host name of the server. Type: string (or Expression with resultType
     string).
    :type host: object
    :param password: Password to logon the server.
    :type password: ~azure.synapse.models.SecretBase
    :param user_id: User ID to logon the server. Type: string (or Expression with resultType
     string).
    :type user_id: object
    """

    _validation = {
        'type': {'required': True},
        'host': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'user_id': {'key': 'typeProperties.userId', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        host: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        user_id: Optional[object] = None,
        **kwargs
    ):
        super(AzureFileStorageLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureFileStorage'
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.password = password
        self.user_id = user_id


class AzureFunctionActivity(ExecutionActivity):
    """Azure Function activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param method: Required. Rest API method for target endpoint. Possible values include: "GET",
     "POST", "PUT", "DELETE", "OPTIONS", "HEAD", "TRACE".
    :type method: str or ~azure.synapse.models.AzureFunctionActivityMethod
    :param body: Represents the payload that will be sent to the endpoint. Required for POST/PUT
     method, not allowed for GET method Type: string (or Expression with resultType string).
    :type body: object
    :param function_name: Required. Name of the Function that the Azure Function Activity will
     call. Type: string (or Expression with resultType string).
    :type function_name: object
    :param headers: Represents the headers that will be sent to the request. For example, to set
     the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type":
     "application/json" }. Type: string (or Expression with resultType string).
    :type headers: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'method': {'required': True},
        'function_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'method': {'key': 'typeProperties.method', 'type': 'str'},
        'body': {'key': 'typeProperties.body', 'type': 'object'},
        'function_name': {'key': 'typeProperties.functionName', 'type': 'object'},
        'headers': {'key': 'typeProperties.headers', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        method: Union[str, "AzureFunctionActivityMethod"],
        function_name: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        body: Optional[object] = None,
        headers: Optional[object] = None,
        **kwargs
    ):
        super(AzureFunctionActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'AzureFunctionActivity'
        self.method = method
        self.body = body
        self.function_name = function_name
        self.headers = headers


class AzureFunctionLinkedService(LinkedService):
    """Azure Function linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param function_app_url: Required. The endpoint of the Azure Function App. URL will be in the
     format https://:code:`<accountName>`.azurewebsites.net.
    :type function_app_url: object
    :param function_key: Function or Host key for Azure Function App.
    :type function_key: ~azure.synapse.models.SecretBase
    """

    _validation = {
        'type': {'required': True},
        'function_app_url': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'function_app_url': {'key': 'typeProperties.functionAppUrl', 'type': 'object'},
        'function_key': {'key': 'typeProperties.functionKey', 'type': 'SecretBase'},
    }

    def __init__(
        self,
        *,
        function_app_url: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        function_key: Optional["SecretBase"] = None,
        **kwargs
    ):
        super(AzureFunctionLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureFunction'
        self.encrypted_credential = encrypted_credential
        self.function_app_url = function_app_url
        self.function_key = function_key


class AzureKeyVaultLinkedService(LinkedService):
    """Azure Key Vault linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param base_url: Required. The base URL of the Azure Key Vault. e.g.
     https://myakv.vault.azure.net Type: string (or Expression with resultType string).
    :type base_url: object
    """

    _validation = {
        'type': {'required': True},
        'base_url': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'base_url': {'key': 'typeProperties.baseUrl', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        base_url: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        **kwargs
    ):
        super(AzureKeyVaultLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureKeyVault'
        self.base_url = base_url


class SecretBase(msrest.serialization.Model):
    """The base definition of a secret type.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureKeyVaultSecretReference, SecureString.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the secret.Constant filled by server.
    :type type: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'AzureKeyVaultSecret': 'AzureKeyVaultSecretReference', 'SecureString': 'SecureString'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SecretBase, self).__init__(**kwargs)
        self.type = None


class AzureKeyVaultSecretReference(SecretBase):
    """Azure Key Vault secret reference.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the secret.Constant filled by server.
    :type type: str
    :param secret_name: Required. The name of the secret in Azure Key Vault. Type: string (or
     Expression with resultType string).
    :type secret_name: object
    :param secret_version: The version of the secret in Azure Key Vault. The default value is the
     latest version of the secret. Type: string (or Expression with resultType string).
    :type secret_version: object
    :param store: Required. The Azure Key Vault linked service reference.
    :type store: ~azure.synapse.models.LinkedServiceReference
    """

    _validation = {
        'type': {'required': True},
        'secret_name': {'required': True},
        'store': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'secret_name': {'key': 'secretName', 'type': 'object'},
        'secret_version': {'key': 'secretVersion', 'type': 'object'},
        'store': {'key': 'store', 'type': 'LinkedServiceReference'},
    }

    def __init__(
        self,
        *,
        secret_name: object,
        store: "LinkedServiceReference",
        secret_version: Optional[object] = None,
        **kwargs
    ):
        super(AzureKeyVaultSecretReference, self).__init__(**kwargs)
        self.type = 'AzureKeyVaultSecret'
        self.secret_name = secret_name
        self.secret_version = secret_version
        self.store = store


class AzureMariaDBLinkedService(LinkedService):
    """Azure Database for MariaDB linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: An ODBC connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param pwd: The Azure key vault secret reference of password in connection string.
    :type pwd: ~azure.synapse.models.AzureKeyVaultSecretReference
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'pwd': {'key': 'typeProperties.pwd', 'type': 'AzureKeyVaultSecretReference'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        connection_string: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        pwd: Optional["AzureKeyVaultSecretReference"] = None,
        **kwargs
    ):
        super(AzureMariaDBLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureMariaDB'
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.pwd = pwd


class AzureMariaDBTableDataset(Dataset):
    """Azure Database for MariaDB dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(AzureMariaDBTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'AzureMariaDBTable'
        self.table_name = table_name


class AzureMLBatchExecutionActivity(ExecutionActivity):
    """Azure ML Batch Execution activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param global_parameters: Key,Value pairs to be passed to the Azure ML Batch Execution Service
     endpoint. Keys must match the names of web service parameters defined in the published Azure ML
     web service. Values will be passed in the GlobalParameters property of the Azure ML batch
     execution request.
    :type global_parameters: dict[str, object]
    :param web_service_inputs: Key,Value pairs, mapping the names of Azure ML endpoint's Web
     Service Inputs to AzureMLWebServiceFile objects specifying the input Blob locations.. This
     information will be passed in the WebServiceInputs property of the Azure ML batch execution
     request.
    :type web_service_inputs: dict[str, ~azure.synapse.models.AzureMLWebServiceFile]
    :param web_service_outputs: Key,Value pairs, mapping the names of Azure ML endpoint's Web
     Service Outputs to AzureMLWebServiceFile objects specifying the output Blob locations. This
     information will be passed in the WebServiceOutputs property of the Azure ML batch execution
     request.
    :type web_service_outputs: dict[str, ~azure.synapse.models.AzureMLWebServiceFile]
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'global_parameters': {'key': 'typeProperties.globalParameters', 'type': '{object}'},
        'web_service_inputs': {'key': 'typeProperties.webServiceInputs', 'type': '{AzureMLWebServiceFile}'},
        'web_service_outputs': {'key': 'typeProperties.webServiceOutputs', 'type': '{AzureMLWebServiceFile}'},
    }

    def __init__(
        self,
        *,
        name: str,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        global_parameters: Optional[Dict[str, object]] = None,
        web_service_inputs: Optional[Dict[str, "AzureMLWebServiceFile"]] = None,
        web_service_outputs: Optional[Dict[str, "AzureMLWebServiceFile"]] = None,
        **kwargs
    ):
        super(AzureMLBatchExecutionActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'AzureMLBatchExecution'
        self.global_parameters = global_parameters
        self.web_service_inputs = web_service_inputs
        self.web_service_outputs = web_service_outputs


class AzureMLExecutePipelineActivity(ExecutionActivity):
    """Azure ML Execute Pipeline activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param continue_on_step_failure: Whether to continue execution of other steps in the
     PipelineRun if a step fails. This information will be passed in the continueOnStepFailure
     property of the published pipeline execution request. Type: boolean (or Expression with
     resultType boolean).
    :type continue_on_step_failure: object
    :param experiment_name: Run history experiment name of the pipeline run. This information will
     be passed in the ExperimentName property of the published pipeline execution request. Type:
     string (or Expression with resultType string).
    :type experiment_name: object
    :param ml_parent_run_id: The parent Azure ML Service pipeline run id. This information will be
     passed in the ParentRunId property of the published pipeline execution request. Type: string
     (or Expression with resultType string).
    :type ml_parent_run_id: object
    :param ml_pipeline_id: Required. ID of the published Azure ML pipeline. Type: string (or
     Expression with resultType string).
    :type ml_pipeline_id: object
    :param ml_pipeline_parameters: Key,Value pairs to be passed to the published Azure ML pipeline
     endpoint. Keys must match the names of pipeline parameters defined in the published pipeline.
     Values will be passed in the ParameterAssignments property of the published pipeline execution
     request. Type: object with key value pairs (or Expression with resultType object).
    :type ml_pipeline_parameters: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'ml_pipeline_id': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'continue_on_step_failure': {'key': 'typeProperties.continueOnStepFailure', 'type': 'object'},
        'experiment_name': {'key': 'typeProperties.experimentName', 'type': 'object'},
        'ml_parent_run_id': {'key': 'typeProperties.mlParentRunId', 'type': 'object'},
        'ml_pipeline_id': {'key': 'typeProperties.mlPipelineId', 'type': 'object'},
        'ml_pipeline_parameters': {'key': 'typeProperties.mlPipelineParameters', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        ml_pipeline_id: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        continue_on_step_failure: Optional[object] = None,
        experiment_name: Optional[object] = None,
        ml_parent_run_id: Optional[object] = None,
        ml_pipeline_parameters: Optional[object] = None,
        **kwargs
    ):
        super(AzureMLExecutePipelineActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'AzureMLExecutePipeline'
        self.continue_on_step_failure = continue_on_step_failure
        self.experiment_name = experiment_name
        self.ml_parent_run_id = ml_parent_run_id
        self.ml_pipeline_id = ml_pipeline_id
        self.ml_pipeline_parameters = ml_pipeline_parameters


class AzureMLLinkedService(LinkedService):
    """Azure ML Studio Web Service linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param api_key: Required. The API key for accessing the Azure ML model endpoint.
    :type api_key: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param ml_endpoint: Required. The Batch Execution REST URL for an Azure ML Studio Web Service
     endpoint. Type: string (or Expression with resultType string).
    :type ml_endpoint: object
    :param service_principal_id: The ID of the service principal used to authenticate against the
     ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression
     with resultType string).
    :type service_principal_id: object
    :param service_principal_key: The key of the service principal used to authenticate against the
     ARM-based updateResourceEndpoint of an Azure ML Studio web service.
    :type service_principal_key: ~azure.synapse.models.SecretBase
    :param tenant: The name or ID of the tenant to which the service principal belongs. Type:
     string (or Expression with resultType string).
    :type tenant: object
    :param update_resource_endpoint: The Update Resource REST URL for an Azure ML Studio Web
     Service endpoint. Type: string (or Expression with resultType string).
    :type update_resource_endpoint: object
    """

    _validation = {
        'type': {'required': True},
        'api_key': {'required': True},
        'ml_endpoint': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'api_key': {'key': 'typeProperties.apiKey', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'ml_endpoint': {'key': 'typeProperties.mlEndpoint', 'type': 'object'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_principal_key': {'key': 'typeProperties.servicePrincipalKey', 'type': 'SecretBase'},
        'tenant': {'key': 'typeProperties.tenant', 'type': 'object'},
        'update_resource_endpoint': {'key': 'typeProperties.updateResourceEndpoint', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        api_key: "SecretBase",
        ml_endpoint: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        service_principal_id: Optional[object] = None,
        service_principal_key: Optional["SecretBase"] = None,
        tenant: Optional[object] = None,
        update_resource_endpoint: Optional[object] = None,
        **kwargs
    ):
        super(AzureMLLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureML'
        self.api_key = api_key
        self.encrypted_credential = encrypted_credential
        self.ml_endpoint = ml_endpoint
        self.service_principal_id = service_principal_id
        self.service_principal_key = service_principal_key
        self.tenant = tenant
        self.update_resource_endpoint = update_resource_endpoint


class AzureMLServiceLinkedService(LinkedService):
    """Azure ML Service linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param ml_workspace_name: Required. Azure ML Service workspace name. Type: string (or
     Expression with resultType string).
    :type ml_workspace_name: object
    :param resource_group_name: Required. Azure ML Service workspace resource group name. Type:
     string (or Expression with resultType string).
    :type resource_group_name: object
    :param service_principal_id: The ID of the service principal used to authenticate against the
     endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType
     string).
    :type service_principal_id: object
    :param service_principal_key: The key of the service principal used to authenticate against the
     endpoint of a published Azure ML Service pipeline.
    :type service_principal_key: ~azure.synapse.models.SecretBase
    :param subscription_id: Required. Azure ML Service workspace subscription ID. Type: string (or
     Expression with resultType string).
    :type subscription_id: object
    :param tenant: The name or ID of the tenant to which the service principal belongs. Type:
     string (or Expression with resultType string).
    :type tenant: object
    """

    _validation = {
        'type': {'required': True},
        'ml_workspace_name': {'required': True},
        'resource_group_name': {'required': True},
        'subscription_id': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'ml_workspace_name': {'key': 'typeProperties.mlWorkspaceName', 'type': 'object'},
        'resource_group_name': {'key': 'typeProperties.resourceGroupName', 'type': 'object'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_principal_key': {'key': 'typeProperties.servicePrincipalKey', 'type': 'SecretBase'},
        'subscription_id': {'key': 'typeProperties.subscriptionId', 'type': 'object'},
        'tenant': {'key': 'typeProperties.tenant', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        ml_workspace_name: object,
        resource_group_name: object,
        subscription_id: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        service_principal_id: Optional[object] = None,
        service_principal_key: Optional["SecretBase"] = None,
        tenant: Optional[object] = None,
        **kwargs
    ):
        super(AzureMLServiceLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureMLService'
        self.encrypted_credential = encrypted_credential
        self.ml_workspace_name = ml_workspace_name
        self.resource_group_name = resource_group_name
        self.service_principal_id = service_principal_id
        self.service_principal_key = service_principal_key
        self.subscription_id = subscription_id
        self.tenant = tenant


class AzureMLUpdateResourceActivity(ExecutionActivity):
    """Azure ML Update Resource management activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param trained_model_file_path: Required. The relative file path in trainedModelLinkedService
     to represent the .ilearner file that will be uploaded by the update operation.  Type: string
     (or Expression with resultType string).
    :type trained_model_file_path: object
    :param trained_model_linked_service_name: Required. Name of Azure Storage linked service
     holding the .ilearner file that will be uploaded by the update operation.
    :type trained_model_linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param trained_model_name: Required. Name of the Trained Model module in the Web Service
     experiment to be updated. Type: string (or Expression with resultType string).
    :type trained_model_name: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'trained_model_file_path': {'required': True},
        'trained_model_linked_service_name': {'required': True},
        'trained_model_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'trained_model_file_path': {'key': 'typeProperties.trainedModelFilePath', 'type': 'object'},
        'trained_model_linked_service_name': {'key': 'typeProperties.trainedModelLinkedServiceName', 'type': 'LinkedServiceReference'},
        'trained_model_name': {'key': 'typeProperties.trainedModelName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        trained_model_file_path: object,
        trained_model_linked_service_name: "LinkedServiceReference",
        trained_model_name: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        **kwargs
    ):
        super(AzureMLUpdateResourceActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'AzureMLUpdateResource'
        self.trained_model_file_path = trained_model_file_path
        self.trained_model_linked_service_name = trained_model_linked_service_name
        self.trained_model_name = trained_model_name


class AzureMLWebServiceFile(msrest.serialization.Model):
    """Azure ML WebService Input/Output file.

    All required parameters must be populated in order to send to Azure.

    :param file_path: Required. The relative file path, including container name, in the Azure Blob
     Storage specified by the LinkedService. Type: string (or Expression with resultType string).
    :type file_path: object
    :param linked_service_name: Required. Reference to an Azure Storage LinkedService, where Azure
     ML WebService Input/Output file located.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    """

    _validation = {
        'file_path': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'file_path': {'key': 'filePath', 'type': 'object'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
    }

    def __init__(
        self,
        *,
        file_path: object,
        linked_service_name: "LinkedServiceReference",
        **kwargs
    ):
        super(AzureMLWebServiceFile, self).__init__(**kwargs)
        self.file_path = file_path
        self.linked_service_name = linked_service_name


class AzureMySqlLinkedService(LinkedService):
    """Azure MySQL database linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: Required. The connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: The Azure key vault secret reference of password in connection string.
    :type password: ~azure.synapse.models.AzureKeyVaultSecretReference
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'AzureKeyVaultSecretReference'},
    }

    def __init__(
        self,
        *,
        connection_string: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["AzureKeyVaultSecretReference"] = None,
        **kwargs
    ):
        super(AzureMySqlLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureMySql'
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.password = password


class AzureMySqlTableDataset(Dataset):
    """The Azure MySQL database dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table: The name of Azure MySQL database table. Type: string (or Expression with
     resultType string).
    :type table: object
    :param table_name: The Azure MySQL database table name. Type: string (or Expression with
     resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(AzureMySqlTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'AzureMySqlTable'
        self.table = table
        self.table_name = table_name


class AzurePostgreSqlLinkedService(LinkedService):
    """Azure PostgreSQL linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: An ODBC connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: The Azure key vault secret reference of password in connection string.
    :type password: ~azure.synapse.models.AzureKeyVaultSecretReference
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'AzureKeyVaultSecretReference'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        connection_string: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["AzureKeyVaultSecretReference"] = None,
        **kwargs
    ):
        super(AzurePostgreSqlLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzurePostgreSql'
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.password = password


class AzurePostgreSqlTableDataset(Dataset):
    """Azure PostgreSQL dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of the Azure PostgreSQL database. Type:
     string (or Expression with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of the Azure PostgreSQL database. Type: string (or Expression with
     resultType string).
    :type table: object
    :param table_name: The table name of the Azure PostgreSQL database which includes both schema
     and table. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(AzurePostgreSqlTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'AzurePostgreSqlTable'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class AzureSearchIndexDataset(Dataset):
    """The Azure Search Index.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param index_name: Required. The name of the Azure Search Index. Type: string (or Expression
     with resultType string).
    :type index_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
        'index_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'index_name': {'key': 'typeProperties.indexName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        index_name: object,
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        **kwargs
    ):
        super(AzureSearchIndexDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'AzureSearchIndex'
        self.index_name = index_name


class AzureSearchLinkedService(LinkedService):
    """Linked service for Windows Azure Search Service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param key: Admin Key for Azure Search service.
    :type key: ~azure.synapse.models.SecretBase
    :param url: Required. URL for Azure Search service. Type: string (or Expression with resultType
     string).
    :type url: object
    """

    _validation = {
        'type': {'required': True},
        'url': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'key': {'key': 'typeProperties.key', 'type': 'SecretBase'},
        'url': {'key': 'typeProperties.url', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        url: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        key: Optional["SecretBase"] = None,
        **kwargs
    ):
        super(AzureSearchLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureSearch'
        self.encrypted_credential = encrypted_credential
        self.key = key
        self.url = url


class AzureSqlDatabaseLinkedService(LinkedService):
    """Microsoft Azure SQL Database linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: Required. The connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: The Azure key vault secret reference of password in connection string.
    :type password: ~azure.synapse.models.AzureKeyVaultSecretReference
    :param service_principal_id: The ID of the service principal used to authenticate against Azure
     SQL Database. Type: string (or Expression with resultType string).
    :type service_principal_id: object
    :param service_principal_key: The key of the service principal used to authenticate against
     Azure SQL Database.
    :type service_principal_key: ~azure.synapse.models.SecretBase
    :param tenant: The name or ID of the tenant to which the service principal belongs. Type:
     string (or Expression with resultType string).
    :type tenant: object
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'AzureKeyVaultSecretReference'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_principal_key': {'key': 'typeProperties.servicePrincipalKey', 'type': 'SecretBase'},
        'tenant': {'key': 'typeProperties.tenant', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        connection_string: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["AzureKeyVaultSecretReference"] = None,
        service_principal_id: Optional[object] = None,
        service_principal_key: Optional["SecretBase"] = None,
        tenant: Optional[object] = None,
        **kwargs
    ):
        super(AzureSqlDatabaseLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureSqlDatabase'
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.service_principal_id = service_principal_id
        self.service_principal_key = service_principal_key
        self.tenant = tenant


class AzureSqlDWLinkedService(LinkedService):
    """Azure SQL Data Warehouse linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: Required. The connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: The Azure key vault secret reference of password in connection string.
    :type password: ~azure.synapse.models.AzureKeyVaultSecretReference
    :param service_principal_id: The ID of the service principal used to authenticate against Azure
     SQL Data Warehouse. Type: string (or Expression with resultType string).
    :type service_principal_id: object
    :param service_principal_key: The key of the service principal used to authenticate against
     Azure SQL Data Warehouse.
    :type service_principal_key: ~azure.synapse.models.SecretBase
    :param tenant: The name or ID of the tenant to which the service principal belongs. Type:
     string (or Expression with resultType string).
    :type tenant: object
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'AzureKeyVaultSecretReference'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_principal_key': {'key': 'typeProperties.servicePrincipalKey', 'type': 'SecretBase'},
        'tenant': {'key': 'typeProperties.tenant', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        connection_string: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["AzureKeyVaultSecretReference"] = None,
        service_principal_id: Optional[object] = None,
        service_principal_key: Optional["SecretBase"] = None,
        tenant: Optional[object] = None,
        **kwargs
    ):
        super(AzureSqlDWLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureSqlDW'
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.service_principal_id = service_principal_id
        self.service_principal_key = service_principal_key
        self.tenant = tenant


class AzureSqlDWTableDataset(Dataset):
    """The Azure SQL Data Warehouse dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of the Azure SQL Data Warehouse. Type:
     string (or Expression with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of the Azure SQL Data Warehouse. Type: string (or Expression with
     resultType string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(AzureSqlDWTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'AzureSqlDWTable'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class AzureSqlMILinkedService(LinkedService):
    """Azure SQL Managed Instance linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: Required. The connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: The Azure key vault secret reference of password in connection string.
    :type password: ~azure.synapse.models.AzureKeyVaultSecretReference
    :param service_principal_id: The ID of the service principal used to authenticate against Azure
     SQL Managed Instance. Type: string (or Expression with resultType string).
    :type service_principal_id: object
    :param service_principal_key: The key of the service principal used to authenticate against
     Azure SQL Managed Instance.
    :type service_principal_key: ~azure.synapse.models.SecretBase
    :param tenant: The name or ID of the tenant to which the service principal belongs. Type:
     string (or Expression with resultType string).
    :type tenant: object
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'AzureKeyVaultSecretReference'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_principal_key': {'key': 'typeProperties.servicePrincipalKey', 'type': 'SecretBase'},
        'tenant': {'key': 'typeProperties.tenant', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        connection_string: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["AzureKeyVaultSecretReference"] = None,
        service_principal_id: Optional[object] = None,
        service_principal_key: Optional["SecretBase"] = None,
        tenant: Optional[object] = None,
        **kwargs
    ):
        super(AzureSqlMILinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureSqlMI'
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.service_principal_id = service_principal_id
        self.service_principal_key = service_principal_key
        self.tenant = tenant


class AzureSqlMITableDataset(Dataset):
    """The Azure SQL Managed Instance dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of the Azure SQL Managed Instance. Type:
     string (or Expression with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of the Azure SQL Managed Instance dataset. Type: string (or
     Expression with resultType string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(AzureSqlMITableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'AzureSqlMITable'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class AzureSqlTableDataset(Dataset):
    """The Azure SQL Server database dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of the Azure SQL database. Type: string
     (or Expression with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of the Azure SQL database. Type: string (or Expression with
     resultType string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(AzureSqlTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'AzureSqlTable'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class AzureStorageLinkedService(LinkedService):
    """The storage account linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param account_key: The Azure key vault secret reference of accountKey in connection string.
    :type account_key: ~azure.synapse.models.AzureKeyVaultSecretReference
    :param connection_string: The connection string. It is mutually exclusive with sasUri property.
     Type: string, SecureString or AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: str
    :param sas_token: The Azure key vault secret reference of sasToken in sas uri.
    :type sas_token: ~azure.synapse.models.AzureKeyVaultSecretReference
    :param sas_uri: SAS URI of the Azure Storage resource. It is mutually exclusive with
     connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
    :type sas_uri: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'account_key': {'key': 'typeProperties.accountKey', 'type': 'AzureKeyVaultSecretReference'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'str'},
        'sas_token': {'key': 'typeProperties.sasToken', 'type': 'AzureKeyVaultSecretReference'},
        'sas_uri': {'key': 'typeProperties.sasUri', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        account_key: Optional["AzureKeyVaultSecretReference"] = None,
        connection_string: Optional[object] = None,
        encrypted_credential: Optional[str] = None,
        sas_token: Optional["AzureKeyVaultSecretReference"] = None,
        sas_uri: Optional[object] = None,
        **kwargs
    ):
        super(AzureStorageLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureStorage'
        self.account_key = account_key
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.sas_token = sas_token
        self.sas_uri = sas_uri


class AzureTableDataset(Dataset):
    """The Azure Table storage dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: Required. The table name of the Azure Table storage. Type: string (or
     Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
        'table_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        table_name: object,
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        **kwargs
    ):
        super(AzureTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'AzureTable'
        self.table_name = table_name


class AzureTableStorageLinkedService(LinkedService):
    """The azure table storage linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param account_key: The Azure key vault secret reference of accountKey in connection string.
    :type account_key: ~azure.synapse.models.AzureKeyVaultSecretReference
    :param connection_string: The connection string. It is mutually exclusive with sasUri property.
     Type: string, SecureString or AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: str
    :param sas_token: The Azure key vault secret reference of sasToken in sas uri.
    :type sas_token: ~azure.synapse.models.AzureKeyVaultSecretReference
    :param sas_uri: SAS URI of the Azure Storage resource. It is mutually exclusive with
     connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
    :type sas_uri: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'account_key': {'key': 'typeProperties.accountKey', 'type': 'AzureKeyVaultSecretReference'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'str'},
        'sas_token': {'key': 'typeProperties.sasToken', 'type': 'AzureKeyVaultSecretReference'},
        'sas_uri': {'key': 'typeProperties.sasUri', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        account_key: Optional["AzureKeyVaultSecretReference"] = None,
        connection_string: Optional[object] = None,
        encrypted_credential: Optional[str] = None,
        sas_token: Optional["AzureKeyVaultSecretReference"] = None,
        sas_uri: Optional[object] = None,
        **kwargs
    ):
        super(AzureTableStorageLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'AzureTableStorage'
        self.account_key = account_key
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.sas_token = sas_token
        self.sas_uri = sas_uri


class BigDataPoolReference(msrest.serialization.Model):
    """Big data pool reference.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Big data pool reference type. Default value: "BigDataPoolReference".
    :vartype type: str
    :param reference_name: Required. Reference big data pool name.
    :type reference_name: str
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'reference_name': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'reference_name': {'key': 'referenceName', 'type': 'str'},
    }

    type = "BigDataPoolReference"

    def __init__(
        self,
        *,
        reference_name: str,
        **kwargs
    ):
        super(BigDataPoolReference, self).__init__(**kwargs)
        self.reference_name = reference_name


class BinaryDataset(Dataset):
    """Binary dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param compression: The data compression method used for the binary dataset.
    :type compression: ~azure.synapse.models.DatasetCompression
    :param location: The location of the Binary storage.
    :type location: ~azure.synapse.models.DatasetLocation
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'compression': {'key': 'typeProperties.compression', 'type': 'DatasetCompression'},
        'location': {'key': 'typeProperties.location', 'type': 'DatasetLocation'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        compression: Optional["DatasetCompression"] = None,
        location: Optional["DatasetLocation"] = None,
        **kwargs
    ):
        super(BinaryDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'Binary'
        self.compression = compression
        self.location = location


class CassandraLinkedService(LinkedService):
    """Linked service for Cassandra data source.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param authentication_type: AuthenticationType to be used for connection. Type: string (or
     Expression with resultType string).
    :type authentication_type: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. Host name for connection. Type: string (or Expression with resultType
     string).
    :type host: object
    :param password: Password for authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param port: The port for the connection. Type: integer (or Expression with resultType
     integer).
    :type port: object
    :param username: Username for authentication. Type: string (or Expression with resultType
     string).
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'host': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'port': {'key': 'typeProperties.port', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        host: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        authentication_type: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        port: Optional[object] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(CassandraLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Cassandra'
        self.authentication_type = authentication_type
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.password = password
        self.port = port
        self.username = username


class CassandraTableDataset(Dataset):
    """The Cassandra database dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param keyspace: The keyspace of the Cassandra database. Type: string (or Expression with
     resultType string).
    :type keyspace: object
    :param table_name: The table name of the Cassandra database. Type: string (or Expression with
     resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'keyspace': {'key': 'typeProperties.keyspace', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        keyspace: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(CassandraTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'CassandraTable'
        self.keyspace = keyspace
        self.table_name = table_name


class CloudError(msrest.serialization.Model):
    """The object that defines the structure of an Azure Synapse error response.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. Error code.
    :type code: str
    :param message: Required. Error message.
    :type message: str
    :param target: Property name/path in request associated with error.
    :type target: str
    :param details: Array with additional error details.
    :type details: list[~azure.synapse.models.CloudError]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'error.code', 'type': 'str'},
        'message': {'key': 'error.message', 'type': 'str'},
        'target': {'key': 'error.target', 'type': 'str'},
        'details': {'key': 'error.details', 'type': '[CloudError]'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["CloudError"]] = None,
        **kwargs
    ):
        super(CloudError, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class CommonDataServiceForAppsEntityDataset(Dataset):
    """The Common Data Service for Apps entity dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param entity_name: The logical name of the entity. Type: string (or Expression with resultType
     string).
    :type entity_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'entity_name': {'key': 'typeProperties.entityName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        entity_name: Optional[object] = None,
        **kwargs
    ):
        super(CommonDataServiceForAppsEntityDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'CommonDataServiceForAppsEntity'
        self.entity_name = entity_name


class CommonDataServiceForAppsLinkedService(LinkedService):
    """Common Data Service for Apps linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param authentication_type: Required. The authentication type to connect to Common Data Service
     for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario.
     'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or
     Expression with resultType string). Possible values include: "Office365", "Ifd",
     "AADServicePrincipal".
    :type authentication_type: str or ~azure.synapse.models.DynamicsAuthenticationType
    :param deployment_type: Required. The deployment type of the Common Data Service for Apps
     instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common
     Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType
     string). Possible values include: "Online", "OnPremisesWithIfd".
    :type deployment_type: str or ~azure.synapse.models.DynamicsDeploymentType
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host_name: The host name of the on-premises Common Data Service for Apps server. The
     property is required for on-prem and not allowed for online. Type: string (or Expression with
     resultType string).
    :type host_name: object
    :param organization_name: The organization name of the Common Data Service for Apps instance.
     The property is required for on-prem and required for online when there are more than one
     Common Data Service for Apps instances associated with the user. Type: string (or Expression
     with resultType string).
    :type organization_name: object
    :param password: Password to access the Common Data Service for Apps instance.
    :type password: ~azure.synapse.models.SecretBase
    :param port: The port of on-premises Common Data Service for Apps server. The property is
     required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression
     with resultType integer), minimum: 0.
    :type port: object
    :param service_principal_credential: The credential of the service principal object in Azure
     Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey',
     servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If
     servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only
     be AzureKeyVaultSecretReference.
    :type service_principal_credential: ~azure.synapse.models.SecretBase
    :param service_principal_credential_type: The service principal credential type to use in
     Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert'
     for certificate. Type: string (or Expression with resultType string). Possible values include:
     "ServicePrincipalKey", "ServicePrincipalCert".
    :type service_principal_credential_type: str or
     ~azure.synapse.models.DynamicsServicePrincipalCredentialType
    :param service_principal_id: The client ID of the application in Azure Active Directory used
     for Server-To-Server authentication. Type: string (or Expression with resultType string).
    :type service_principal_id: object
    :param service_uri: The URL to the Microsoft Common Data Service for Apps server. The property
     is required for on-line and not allowed for on-prem. Type: string (or Expression with
     resultType string).
    :type service_uri: object
    :param username: User name to access the Common Data Service for Apps instance. Type: string
     (or Expression with resultType string).
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'authentication_type': {'required': True},
        'deployment_type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'deployment_type': {'key': 'typeProperties.deploymentType', 'type': 'str'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host_name': {'key': 'typeProperties.hostName', 'type': 'object'},
        'organization_name': {'key': 'typeProperties.organizationName', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'port': {'key': 'typeProperties.port', 'type': 'object'},
        'service_principal_credential': {'key': 'typeProperties.servicePrincipalCredential', 'type': 'SecretBase'},
        'service_principal_credential_type': {'key': 'typeProperties.servicePrincipalCredentialType', 'type': 'str'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_uri': {'key': 'typeProperties.serviceUri', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        authentication_type: Union[str, "DynamicsAuthenticationType"],
        deployment_type: Union[str, "DynamicsDeploymentType"],
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        host_name: Optional[object] = None,
        organization_name: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        port: Optional[object] = None,
        service_principal_credential: Optional["SecretBase"] = None,
        service_principal_credential_type: Optional[Union[str, "DynamicsServicePrincipalCredentialType"]] = None,
        service_principal_id: Optional[object] = None,
        service_uri: Optional[object] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(CommonDataServiceForAppsLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'CommonDataServiceForApps'
        self.authentication_type = authentication_type
        self.deployment_type = deployment_type
        self.encrypted_credential = encrypted_credential
        self.host_name = host_name
        self.organization_name = organization_name
        self.password = password
        self.port = port
        self.service_principal_credential = service_principal_credential
        self.service_principal_credential_type = service_principal_credential_type
        self.service_principal_id = service_principal_id
        self.service_uri = service_uri
        self.username = username


class ConcurLinkedService(LinkedService):
    """Concur Service linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param client_id: Required. Application client_id supplied by Concur App Management.
    :type client_id: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: The password corresponding to the user name that you provided in the username
     field.
    :type password: ~azure.synapse.models.SecretBase
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true.
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true.
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true.
    :type use_peer_verification: object
    :param username: Required. The user name that you use to access Concur Service.
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'client_id': {'required': True},
        'username': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'client_id': {'key': 'typeProperties.clientId', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        client_id: object,
        username: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        **kwargs
    ):
        super(ConcurLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Concur'
        self.client_id = client_id
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification
        self.username = username


class ConcurObjectDataset(Dataset):
    """Concur Service dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(ConcurObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'ConcurObject'
        self.table_name = table_name


class Config(msrest.serialization.Model):
    """Config.

    :param is_hive_enabled:
    :type is_hive_enabled: bool
    """

    _attribute_map = {
        'is_hive_enabled': {'key': 'isHiveEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        is_hive_enabled: Optional[bool] = None,
        **kwargs
    ):
        super(Config, self).__init__(**kwargs)
        self.is_hive_enabled = is_hive_enabled


class CopyActivity(ExecutionActivity):
    """Copy activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param inputs: List of inputs for the activity.
    :type inputs: list[~azure.synapse.models.DatasetReference]
    :param outputs: List of outputs for the activity.
    :type outputs: list[~azure.synapse.models.DatasetReference]
    :param data_integration_units: Maximum number of data integration units that can be used to
     perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0.
    :type data_integration_units: object
    :param enable_skip_incompatible_row: Whether to skip incompatible row. Default value is false.
     Type: boolean (or Expression with resultType boolean).
    :type enable_skip_incompatible_row: object
    :param enable_staging: Specifies whether to copy data via an interim staging. Default value is
     false. Type: boolean (or Expression with resultType boolean).
    :type enable_staging: object
    :param parallel_copies: Maximum number of concurrent sessions opened on the source or sink to
     avoid overloading the data store. Type: integer (or Expression with resultType integer),
     minimum: 0.
    :type parallel_copies: object
    :param preserve: Preserve rules.
    :type preserve: list[object]
    :param preserve_rules: Preserve Rules.
    :type preserve_rules: list[object]
    :param redirect_incompatible_row_settings: Redirect incompatible row settings when
     EnableSkipIncompatibleRow is true.
    :type redirect_incompatible_row_settings: ~azure.synapse.models.RedirectIncompatibleRowSettings
    :param sink: Required. Copy activity sink.
    :type sink: ~azure.synapse.models.CopySink
    :param source: Required. Copy activity source.
    :type source: ~azure.synapse.models.CopySource
    :param staging_settings: Specifies interim staging settings when EnableStaging is true.
    :type staging_settings: ~azure.synapse.models.StagingSettings
    :param translator: Copy activity translator. If not specified, tabular translator is used.
    :type translator: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'sink': {'required': True},
        'source': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'inputs': {'key': 'inputs', 'type': '[DatasetReference]'},
        'outputs': {'key': 'outputs', 'type': '[DatasetReference]'},
        'data_integration_units': {'key': 'typeProperties.dataIntegrationUnits', 'type': 'object'},
        'enable_skip_incompatible_row': {'key': 'typeProperties.enableSkipIncompatibleRow', 'type': 'object'},
        'enable_staging': {'key': 'typeProperties.enableStaging', 'type': 'object'},
        'parallel_copies': {'key': 'typeProperties.parallelCopies', 'type': 'object'},
        'preserve': {'key': 'typeProperties.preserve', 'type': '[object]'},
        'preserve_rules': {'key': 'typeProperties.preserveRules', 'type': '[object]'},
        'redirect_incompatible_row_settings': {'key': 'typeProperties.redirectIncompatibleRowSettings', 'type': 'RedirectIncompatibleRowSettings'},
        'sink': {'key': 'typeProperties.sink', 'type': 'CopySink'},
        'source': {'key': 'typeProperties.source', 'type': 'CopySource'},
        'staging_settings': {'key': 'typeProperties.stagingSettings', 'type': 'StagingSettings'},
        'translator': {'key': 'typeProperties.translator', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        sink: "CopySink",
        source: "CopySource",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        inputs: Optional[List["DatasetReference"]] = None,
        outputs: Optional[List["DatasetReference"]] = None,
        data_integration_units: Optional[object] = None,
        enable_skip_incompatible_row: Optional[object] = None,
        enable_staging: Optional[object] = None,
        parallel_copies: Optional[object] = None,
        preserve: Optional[List[object]] = None,
        preserve_rules: Optional[List[object]] = None,
        redirect_incompatible_row_settings: Optional["RedirectIncompatibleRowSettings"] = None,
        staging_settings: Optional["StagingSettings"] = None,
        translator: Optional[object] = None,
        **kwargs
    ):
        super(CopyActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'Copy'
        self.inputs = inputs
        self.outputs = outputs
        self.data_integration_units = data_integration_units
        self.enable_skip_incompatible_row = enable_skip_incompatible_row
        self.enable_staging = enable_staging
        self.parallel_copies = parallel_copies
        self.preserve = preserve
        self.preserve_rules = preserve_rules
        self.redirect_incompatible_row_settings = redirect_incompatible_row_settings
        self.sink = sink
        self.source = source
        self.staging_settings = staging_settings
        self.translator = translator


class CopySink(msrest.serialization.Model):
    """A copy activity sink.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: .

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Copy sink type.Constant filled by server.
    :type type: str
    :param max_concurrent_connections: The maximum concurrent connection count for the sink data
     store. Type: integer (or Expression with resultType integer).
    :type max_concurrent_connections: object
    :param sink_retry_count: Sink retry count. Type: integer (or Expression with resultType
     integer).
    :type sink_retry_count: object
    :param sink_retry_wait: Sink retry wait. Type: string (or Expression with resultType string),
     pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
    :type sink_retry_wait: object
    :param write_batch_size: Write batch size. Type: integer (or Expression with resultType
     integer), minimum: 0.
    :type write_batch_size: object
    :param write_batch_timeout: Write batch timeout. Type: string (or Expression with resultType
     string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
    :type write_batch_timeout: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'max_concurrent_connections': {'key': 'maxConcurrentConnections', 'type': 'object'},
        'sink_retry_count': {'key': 'sinkRetryCount', 'type': 'object'},
        'sink_retry_wait': {'key': 'sinkRetryWait', 'type': 'object'},
        'write_batch_size': {'key': 'writeBatchSize', 'type': 'object'},
        'write_batch_timeout': {'key': 'writeBatchTimeout', 'type': 'object'},
    }

    _subtype_map = {
        'type': {}
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        max_concurrent_connections: Optional[object] = None,
        sink_retry_count: Optional[object] = None,
        sink_retry_wait: Optional[object] = None,
        write_batch_size: Optional[object] = None,
        write_batch_timeout: Optional[object] = None,
        **kwargs
    ):
        super(CopySink, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.type = 'CopySink'
        self.max_concurrent_connections = max_concurrent_connections
        self.sink_retry_count = sink_retry_count
        self.sink_retry_wait = sink_retry_wait
        self.write_batch_size = write_batch_size
        self.write_batch_timeout = write_batch_timeout


class CopySource(msrest.serialization.Model):
    """A copy activity source.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: .

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Copy source type.Constant filled by server.
    :type type: str
    :param max_concurrent_connections: The maximum concurrent connection count for the source data
     store. Type: integer (or Expression with resultType integer).
    :type max_concurrent_connections: object
    :param source_retry_count: Source retry count. Type: integer (or Expression with resultType
     integer).
    :type source_retry_count: object
    :param source_retry_wait: Source retry wait. Type: string (or Expression with resultType
     string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
    :type source_retry_wait: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'max_concurrent_connections': {'key': 'maxConcurrentConnections', 'type': 'object'},
        'source_retry_count': {'key': 'sourceRetryCount', 'type': 'object'},
        'source_retry_wait': {'key': 'sourceRetryWait', 'type': 'object'},
    }

    _subtype_map = {
        'type': {}
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        max_concurrent_connections: Optional[object] = None,
        source_retry_count: Optional[object] = None,
        source_retry_wait: Optional[object] = None,
        **kwargs
    ):
        super(CopySource, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.type = 'CopySource'
        self.max_concurrent_connections = max_concurrent_connections
        self.source_retry_count = source_retry_count
        self.source_retry_wait = source_retry_wait


class CosmosDbLinkedService(LinkedService):
    """Microsoft Azure Cosmos Database (CosmosDB) linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param account_endpoint: The endpoint of the Azure CosmosDB account. Type: string (or
     Expression with resultType string).
    :type account_endpoint: object
    :param account_key: The account key of the Azure CosmosDB account. Type: SecureString or
     AzureKeyVaultSecretReference.
    :type account_key: ~azure.synapse.models.SecretBase
    :param connection_string: The connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param database: The name of the database. Type: string (or Expression with resultType string).
    :type database: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'account_endpoint': {'key': 'typeProperties.accountEndpoint', 'type': 'object'},
        'account_key': {'key': 'typeProperties.accountKey', 'type': 'SecretBase'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'database': {'key': 'typeProperties.database', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        account_endpoint: Optional[object] = None,
        account_key: Optional["SecretBase"] = None,
        connection_string: Optional[object] = None,
        database: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        **kwargs
    ):
        super(CosmosDbLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'CosmosDb'
        self.account_endpoint = account_endpoint
        self.account_key = account_key
        self.connection_string = connection_string
        self.database = database
        self.encrypted_credential = encrypted_credential


class CosmosDbMongoDbApiCollectionDataset(Dataset):
    """The CosmosDB (MongoDB API) database dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param collection: Required. The collection name of the CosmosDB (MongoDB API) database. Type:
     string (or Expression with resultType string).
    :type collection: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
        'collection': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'collection': {'key': 'typeProperties.collection', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        collection: object,
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        **kwargs
    ):
        super(CosmosDbMongoDbApiCollectionDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'CosmosDbMongoDbApiCollection'
        self.collection = collection


class CosmosDbMongoDbApiLinkedService(LinkedService):
    """Linked service for CosmosDB (MongoDB API) data source.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: Required. The CosmosDB (MongoDB API) connection string. Type: string,
     SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param database: Required. The name of the CosmosDB (MongoDB API) database that you want to
     access. Type: string (or Expression with resultType string).
    :type database: object
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
        'database': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'database': {'key': 'typeProperties.database', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        connection_string: object,
        database: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        **kwargs
    ):
        super(CosmosDbMongoDbApiLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'CosmosDbMongoDbApi'
        self.connection_string = connection_string
        self.database = database


class CosmosDbSqlApiCollectionDataset(Dataset):
    """Microsoft Azure CosmosDB (SQL API) Collection dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param collection_name: Required. CosmosDB (SQL API) collection name. Type: string (or
     Expression with resultType string).
    :type collection_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
        'collection_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'collection_name': {'key': 'typeProperties.collectionName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        collection_name: object,
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        **kwargs
    ):
        super(CosmosDbSqlApiCollectionDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'CosmosDbSqlApiCollection'
        self.collection_name = collection_name


class CouchbaseLinkedService(LinkedService):
    """Couchbase server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: An ODBC connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param cred_string: The Azure key vault secret reference of credString in connection string.
    :type cred_string: ~azure.synapse.models.AzureKeyVaultSecretReference
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'cred_string': {'key': 'typeProperties.credString', 'type': 'AzureKeyVaultSecretReference'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        connection_string: Optional[object] = None,
        cred_string: Optional["AzureKeyVaultSecretReference"] = None,
        encrypted_credential: Optional[object] = None,
        **kwargs
    ):
        super(CouchbaseLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Couchbase'
        self.connection_string = connection_string
        self.cred_string = cred_string
        self.encrypted_credential = encrypted_credential


class CouchbaseTableDataset(Dataset):
    """Couchbase server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(CouchbaseTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'CouchbaseTable'
        self.table_name = table_name


class CreateDataFlowDebugSessionRequest(msrest.serialization.Model):
    """Request body structure for creating data flow debug session.

    :param cluster_timeout: Timeout setting for Databricks cluster.
    :type cluster_timeout: int
    :param data_bricks_linked_service: Data bricks linked service.
    :type data_bricks_linked_service: ~azure.synapse.models.LinkedServiceResource
    :param data_flow_name: The name of the data flow.
    :type data_flow_name: str
    :param existing_cluster_id: The ID of existing Databricks cluster.
    :type existing_cluster_id: str
    :param new_cluster_name: The name of new Databricks cluster.
    :type new_cluster_name: str
    :param new_cluster_node_type: The type of new Databricks cluster.
    :type new_cluster_node_type: str
    """

    _attribute_map = {
        'cluster_timeout': {'key': 'clusterTimeout', 'type': 'int'},
        'data_bricks_linked_service': {'key': 'dataBricksLinkedService', 'type': 'LinkedServiceResource'},
        'data_flow_name': {'key': 'dataFlowName', 'type': 'str'},
        'existing_cluster_id': {'key': 'existingClusterId', 'type': 'str'},
        'new_cluster_name': {'key': 'newClusterName', 'type': 'str'},
        'new_cluster_node_type': {'key': 'newClusterNodeType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        cluster_timeout: Optional[int] = None,
        data_bricks_linked_service: Optional["LinkedServiceResource"] = None,
        data_flow_name: Optional[str] = None,
        existing_cluster_id: Optional[str] = None,
        new_cluster_name: Optional[str] = None,
        new_cluster_node_type: Optional[str] = None,
        **kwargs
    ):
        super(CreateDataFlowDebugSessionRequest, self).__init__(**kwargs)
        self.cluster_timeout = cluster_timeout
        self.data_bricks_linked_service = data_bricks_linked_service
        self.data_flow_name = data_flow_name
        self.existing_cluster_id = existing_cluster_id
        self.new_cluster_name = new_cluster_name
        self.new_cluster_node_type = new_cluster_node_type


class CreateDataFlowDebugSessionResponse(msrest.serialization.Model):
    """Response body structure for creating data flow debug session.

    :param session_id: The ID of data flow debug session.
    :type session_id: str
    """

    _attribute_map = {
        'session_id': {'key': 'sessionId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        session_id: Optional[str] = None,
        **kwargs
    ):
        super(CreateDataFlowDebugSessionResponse, self).__init__(**kwargs)
        self.session_id = session_id


class CreateRunResponse(msrest.serialization.Model):
    """Response body with a run identifier.

    All required parameters must be populated in order to send to Azure.

    :param run_id: Required. Identifier of a run.
    :type run_id: str
    """

    _validation = {
        'run_id': {'required': True},
    }

    _attribute_map = {
        'run_id': {'key': 'runId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        run_id: str,
        **kwargs
    ):
        super(CreateRunResponse, self).__init__(**kwargs)
        self.run_id = run_id


class CustomActivity(ExecutionActivity):
    """Custom activity type.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param command: Required. Command for custom activity Type: string (or Expression with
     resultType string).
    :type command: object
    :param extended_properties: User defined property bag. There is no restriction on the keys or
     values that can be used. The user specified custom activity has the full responsibility to
     consume and interpret the content defined.
    :type extended_properties: dict[str, object]
    :param folder_path: Folder path for resource files Type: string (or Expression with resultType
     string).
    :type folder_path: object
    :param reference_objects: Reference objects.
    :type reference_objects: ~azure.synapse.models.CustomActivityReferenceObject
    :param resource_linked_service: Resource linked service reference.
    :type resource_linked_service: ~azure.synapse.models.LinkedServiceReference
    :param retention_time_in_days: The retention time for the files submitted for custom activity.
     Type: double (or Expression with resultType double).
    :type retention_time_in_days: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'command': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'command': {'key': 'typeProperties.command', 'type': 'object'},
        'extended_properties': {'key': 'typeProperties.extendedProperties', 'type': '{object}'},
        'folder_path': {'key': 'typeProperties.folderPath', 'type': 'object'},
        'reference_objects': {'key': 'typeProperties.referenceObjects', 'type': 'CustomActivityReferenceObject'},
        'resource_linked_service': {'key': 'typeProperties.resourceLinkedService', 'type': 'LinkedServiceReference'},
        'retention_time_in_days': {'key': 'typeProperties.retentionTimeInDays', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        command: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        extended_properties: Optional[Dict[str, object]] = None,
        folder_path: Optional[object] = None,
        reference_objects: Optional["CustomActivityReferenceObject"] = None,
        resource_linked_service: Optional["LinkedServiceReference"] = None,
        retention_time_in_days: Optional[object] = None,
        **kwargs
    ):
        super(CustomActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'Custom'
        self.command = command
        self.extended_properties = extended_properties
        self.folder_path = folder_path
        self.reference_objects = reference_objects
        self.resource_linked_service = resource_linked_service
        self.retention_time_in_days = retention_time_in_days


class CustomActivityReferenceObject(msrest.serialization.Model):
    """Reference objects for custom activity.

    :param datasets: Dataset references.
    :type datasets: list[~azure.synapse.models.DatasetReference]
    :param linked_services: Linked service references.
    :type linked_services: list[~azure.synapse.models.LinkedServiceReference]
    """

    _attribute_map = {
        'datasets': {'key': 'datasets', 'type': '[DatasetReference]'},
        'linked_services': {'key': 'linkedServices', 'type': '[LinkedServiceReference]'},
    }

    def __init__(
        self,
        *,
        datasets: Optional[List["DatasetReference"]] = None,
        linked_services: Optional[List["LinkedServiceReference"]] = None,
        **kwargs
    ):
        super(CustomActivityReferenceObject, self).__init__(**kwargs)
        self.datasets = datasets
        self.linked_services = linked_services


class CustomDataSourceLinkedService(LinkedService):
    """Custom linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param type_properties: Required. Custom linked service properties.
    :type type_properties: object
    """

    _validation = {
        'type': {'required': True},
        'type_properties': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'type_properties': {'key': 'typeProperties', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        type_properties: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        **kwargs
    ):
        super(CustomDataSourceLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'CustomDataSource'
        self.type_properties = type_properties


class Data(msrest.serialization.Model):
    """Data.

    :param config:
    :type config: ~azure.synapse.models.Config
    :param handler_path:
    :type handler_path: str
    :param inputs:
    :type inputs: list[str]
    :param outputs:
    :type outputs: list[str]
    :param tables:
    :type tables: ~azure.synapse.models.Tables
    """

    _attribute_map = {
        'config': {'key': 'config', 'type': 'Config'},
        'handler_path': {'key': 'handlerPath', 'type': 'str'},
        'inputs': {'key': 'inputs', 'type': '[str]'},
        'outputs': {'key': 'outputs', 'type': '[str]'},
        'tables': {'key': 'tables', 'type': 'Tables'},
    }

    def __init__(
        self,
        *,
        config: Optional["Config"] = None,
        handler_path: Optional[str] = None,
        inputs: Optional[List[str]] = None,
        outputs: Optional[List[str]] = None,
        tables: Optional["Tables"] = None,
        **kwargs
    ):
        super(Data, self).__init__(**kwargs)
        self.config = config
        self.handler_path = handler_path
        self.inputs = inputs
        self.outputs = outputs
        self.tables = tables


class DatabricksNotebookActivity(ExecutionActivity):
    """DatabricksNotebook activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param base_parameters: Base parameters to be used for each run of this job.If the notebook
     takes a parameter that is not specified, the default value from the notebook will be used.
    :type base_parameters: dict[str, object]
    :param libraries: A list of libraries to be installed on the cluster that will execute the job.
    :type libraries: list[dict[str, object]]
    :param notebook_path: Required. The absolute path of the notebook to be run in the Databricks
     Workspace. This path must begin with a slash. Type: string (or Expression with resultType
     string).
    :type notebook_path: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'notebook_path': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'base_parameters': {'key': 'typeProperties.baseParameters', 'type': '{object}'},
        'libraries': {'key': 'typeProperties.libraries', 'type': '[{object}]'},
        'notebook_path': {'key': 'typeProperties.notebookPath', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        notebook_path: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        base_parameters: Optional[Dict[str, object]] = None,
        libraries: Optional[List[Dict[str, object]]] = None,
        **kwargs
    ):
        super(DatabricksNotebookActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'DatabricksNotebook'
        self.base_parameters = base_parameters
        self.libraries = libraries
        self.notebook_path = notebook_path


class DatabricksSparkJarActivity(ExecutionActivity):
    """DatabricksSparkJar activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param libraries: A list of libraries to be installed on the cluster that will execute the job.
    :type libraries: list[dict[str, object]]
    :param main_class_name: Required. The full name of the class containing the main method to be
     executed. This class must be contained in a JAR provided as a library. Type: string (or
     Expression with resultType string).
    :type main_class_name: object
    :param parameters: Parameters that will be passed to the main method.
    :type parameters: list[object]
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'main_class_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'libraries': {'key': 'typeProperties.libraries', 'type': '[{object}]'},
        'main_class_name': {'key': 'typeProperties.mainClassName', 'type': 'object'},
        'parameters': {'key': 'typeProperties.parameters', 'type': '[object]'},
    }

    def __init__(
        self,
        *,
        name: str,
        main_class_name: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        libraries: Optional[List[Dict[str, object]]] = None,
        parameters: Optional[List[object]] = None,
        **kwargs
    ):
        super(DatabricksSparkJarActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'DatabricksSparkJar'
        self.libraries = libraries
        self.main_class_name = main_class_name
        self.parameters = parameters


class DatabricksSparkPythonActivity(ExecutionActivity):
    """DatabricksSparkPython activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param libraries: A list of libraries to be installed on the cluster that will execute the job.
    :type libraries: list[dict[str, object]]
    :param parameters: Command line parameters that will be passed to the Python file.
    :type parameters: list[object]
    :param python_file: Required. The URI of the Python file to be executed. DBFS paths are
     supported. Type: string (or Expression with resultType string).
    :type python_file: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'python_file': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'libraries': {'key': 'typeProperties.libraries', 'type': '[{object}]'},
        'parameters': {'key': 'typeProperties.parameters', 'type': '[object]'},
        'python_file': {'key': 'typeProperties.pythonFile', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        python_file: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        libraries: Optional[List[Dict[str, object]]] = None,
        parameters: Optional[List[object]] = None,
        **kwargs
    ):
        super(DatabricksSparkPythonActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'DatabricksSparkPython'
        self.libraries = libraries
        self.parameters = parameters
        self.python_file = python_file


class DataFlow(msrest.serialization.Model):
    """Azure Synapse nested object which contains a flow with data movements and transformations.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: MappingDataFlow.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of data flow.Constant filled by server.
    :type type: str
    :param description: The description of the data flow.
    :type description: str
    :param annotations: List of tags that can be used for describing the data flow.
    :type annotations: list[object]
    :param folder: The folder that this data flow is in. If not specified, Data flow will appear at
     the root level.
    :type folder: ~azure.synapse.models.DataFlowFolder
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DataFlowFolder'},
    }

    _subtype_map = {
        'type': {'MappingDataFlow': 'MappingDataFlow'}
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DataFlowFolder"] = None,
        **kwargs
    ):
        super(DataFlow, self).__init__(**kwargs)
        self.type = None
        self.description = description
        self.annotations = annotations
        self.folder = folder


class DataFlowDebugCommandRequest(msrest.serialization.Model):
    """Request body structure for data flow expression preview.

    :param command_name: The command name.
    :type command_name: str
    :param command_payload: The command payload object.
    :type command_payload: object
    :param data_flow_name: The data flow which contains the debug session.
    :type data_flow_name: str
    :param session_id: The ID of data flow debug session.
    :type session_id: str
    """

    _attribute_map = {
        'command_name': {'key': 'commandName', 'type': 'str'},
        'command_payload': {'key': 'commandPayload', 'type': 'object'},
        'data_flow_name': {'key': 'dataFlowName', 'type': 'str'},
        'session_id': {'key': 'sessionId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        command_name: Optional[str] = None,
        command_payload: Optional[object] = None,
        data_flow_name: Optional[str] = None,
        session_id: Optional[str] = None,
        **kwargs
    ):
        super(DataFlowDebugCommandRequest, self).__init__(**kwargs)
        self.command_name = command_name
        self.command_payload = command_payload
        self.data_flow_name = data_flow_name
        self.session_id = session_id


class DataFlowDebugCommandResponse(msrest.serialization.Model):
    """Response body structure of data flow result for data preview, statistics or expression preview.

    :param data: The result data of data preview, statistics or expression preview.
    :type data: str
    :param status: The run status of data preview, statistics or expression preview.
    :type status: str
    """

    _attribute_map = {
        'data': {'key': 'data', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        data: Optional[str] = None,
        status: Optional[str] = None,
        **kwargs
    ):
        super(DataFlowDebugCommandResponse, self).__init__(**kwargs)
        self.data = data
        self.status = status


class DataFlowDebugPackage(msrest.serialization.Model):
    """Request body structure for starting data flow debug session.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param data_flow: Data flow instance.
    :type data_flow: ~azure.synapse.models.DataFlowDebugResource
    :param datasets: List of datasets.
    :type datasets: list[~azure.synapse.models.DatasetDebugResource]
    :param debug_settings: Data flow debug settings.
    :type debug_settings: ~azure.synapse.models.DataFlowDebugPackageDebugSettings
    :param linked_services: List of linked services.
    :type linked_services: list[~azure.synapse.models.LinkedServiceDebugResource]
    :param session_id: The ID of data flow debug session.
    :type session_id: str
    :param staging: Staging info for debug session.
    :type staging: ~azure.synapse.models.DataFlowStagingInfo
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'data_flow': {'key': 'dataFlow', 'type': 'DataFlowDebugResource'},
        'datasets': {'key': 'datasets', 'type': '[DatasetDebugResource]'},
        'debug_settings': {'key': 'debugSettings', 'type': 'DataFlowDebugPackageDebugSettings'},
        'linked_services': {'key': 'linkedServices', 'type': '[LinkedServiceDebugResource]'},
        'session_id': {'key': 'sessionId', 'type': 'str'},
        'staging': {'key': 'staging', 'type': 'DataFlowStagingInfo'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        data_flow: Optional["DataFlowDebugResource"] = None,
        datasets: Optional[List["DatasetDebugResource"]] = None,
        debug_settings: Optional["DataFlowDebugPackageDebugSettings"] = None,
        linked_services: Optional[List["LinkedServiceDebugResource"]] = None,
        session_id: Optional[str] = None,
        staging: Optional["DataFlowStagingInfo"] = None,
        **kwargs
    ):
        super(DataFlowDebugPackage, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.data_flow = data_flow
        self.datasets = datasets
        self.debug_settings = debug_settings
        self.linked_services = linked_services
        self.session_id = session_id
        self.staging = staging


class DataFlowDebugPackageDebugSettings(msrest.serialization.Model):
    """Data flow debug settings.

    :param dataset_parameters: Parameters for dataset.
    :type dataset_parameters: object
    :param parameters: Data flow parameters.
    :type parameters: dict[str, object]
    :param source_settings: Source setting for data flow debug.
    :type source_settings: list[~azure.synapse.models.DataFlowSourceSetting]
    """

    _attribute_map = {
        'dataset_parameters': {'key': 'datasetParameters', 'type': 'object'},
        'parameters': {'key': 'parameters', 'type': '{object}'},
        'source_settings': {'key': 'sourceSettings', 'type': '[DataFlowSourceSetting]'},
    }

    def __init__(
        self,
        *,
        dataset_parameters: Optional[object] = None,
        parameters: Optional[Dict[str, object]] = None,
        source_settings: Optional[List["DataFlowSourceSetting"]] = None,
        **kwargs
    ):
        super(DataFlowDebugPackageDebugSettings, self).__init__(**kwargs)
        self.dataset_parameters = dataset_parameters
        self.parameters = parameters
        self.source_settings = source_settings


class DataFlowDebugPreviewDataRequest(msrest.serialization.Model):
    """Request body structure for data flow preview data.

    :param data_flow_name: The data flow which contains the debug session.
    :type data_flow_name: str
    :param row_limits: The row limit for preview request.
    :type row_limits: int
    :param session_id: The ID of data flow debug session.
    :type session_id: str
    :param stream_name: The output stream name.
    :type stream_name: str
    """

    _attribute_map = {
        'data_flow_name': {'key': 'dataFlowName', 'type': 'str'},
        'row_limits': {'key': 'rowLimits', 'type': 'int'},
        'session_id': {'key': 'sessionId', 'type': 'str'},
        'stream_name': {'key': 'streamName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        data_flow_name: Optional[str] = None,
        row_limits: Optional[int] = None,
        session_id: Optional[str] = None,
        stream_name: Optional[str] = None,
        **kwargs
    ):
        super(DataFlowDebugPreviewDataRequest, self).__init__(**kwargs)
        self.data_flow_name = data_flow_name
        self.row_limits = row_limits
        self.session_id = session_id
        self.stream_name = stream_name


class DataFlowDebugQueryResponse(msrest.serialization.Model):
    """Response body structure of data flow query for data preview, statistics or expression preview.

    :param run_id: The run ID of data flow debug session.
    :type run_id: str
    """

    _attribute_map = {
        'run_id': {'key': 'runId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        run_id: Optional[str] = None,
        **kwargs
    ):
        super(DataFlowDebugQueryResponse, self).__init__(**kwargs)
        self.run_id = run_id


class SubResourceDebugResource(msrest.serialization.Model):
    """Azure Synapse nested debug resource.

    :param name: The resource name.
    :type name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        **kwargs
    ):
        super(SubResourceDebugResource, self).__init__(**kwargs)
        self.name = name


class DataFlowDebugResource(SubResourceDebugResource):
    """Data flow debug resource.

    All required parameters must be populated in order to send to Azure.

    :param name: The resource name.
    :type name: str
    :param properties: Required. Data flow properties.
    :type properties: ~azure.synapse.models.DataFlow
    """

    _validation = {
        'properties': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'DataFlow'},
    }

    def __init__(
        self,
        *,
        properties: "DataFlow",
        name: Optional[str] = None,
        **kwargs
    ):
        super(DataFlowDebugResource, self).__init__(name=name, **kwargs)
        self.properties = properties


class DataFlowDebugResultResponse(msrest.serialization.Model):
    """Response body structure of data flow result for data preview, statistics or expression preview.

    :param data: The result data of data preview, statistics or expression preview.
    :type data: str
    :param status: The run status of data preview, statistics or expression preview.
    :type status: str
    """

    _attribute_map = {
        'data': {'key': 'data', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        data: Optional[str] = None,
        status: Optional[str] = None,
        **kwargs
    ):
        super(DataFlowDebugResultResponse, self).__init__(**kwargs)
        self.data = data
        self.status = status


class DataFlowDebugSessionInfo(msrest.serialization.Model):
    """Data flow debug session info.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param compute_type: Compute type of the cluster.
    :type compute_type: str
    :param core_count: Core count of the cluster.
    :type core_count: int
    :param data_flow_name: The name of the data flow.
    :type data_flow_name: str
    :param integration_runtime_name: Attached integration runtime name of data flow debug session.
    :type integration_runtime_name: str
    :param last_activity_time: Last activity time of data flow debug session.
    :type last_activity_time: str
    :param node_count: Node count of the cluster. (deprecated property).
    :type node_count: int
    :param session_id: The ID of data flow debug session.
    :type session_id: str
    :param start_time: Start time of data flow debug session.
    :type start_time: str
    :param time_to_live_in_minutes: Compute type of the cluster.
    :type time_to_live_in_minutes: int
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'core_count': {'key': 'coreCount', 'type': 'int'},
        'data_flow_name': {'key': 'dataFlowName', 'type': 'str'},
        'integration_runtime_name': {'key': 'integrationRuntimeName', 'type': 'str'},
        'last_activity_time': {'key': 'lastActivityTime', 'type': 'str'},
        'node_count': {'key': 'nodeCount', 'type': 'int'},
        'session_id': {'key': 'sessionId', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'str'},
        'time_to_live_in_minutes': {'key': 'timeToLiveInMinutes', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        compute_type: Optional[str] = None,
        core_count: Optional[int] = None,
        data_flow_name: Optional[str] = None,
        integration_runtime_name: Optional[str] = None,
        last_activity_time: Optional[str] = None,
        node_count: Optional[int] = None,
        session_id: Optional[str] = None,
        start_time: Optional[str] = None,
        time_to_live_in_minutes: Optional[int] = None,
        **kwargs
    ):
        super(DataFlowDebugSessionInfo, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.compute_type = compute_type
        self.core_count = core_count
        self.data_flow_name = data_flow_name
        self.integration_runtime_name = integration_runtime_name
        self.last_activity_time = last_activity_time
        self.node_count = node_count
        self.session_id = session_id
        self.start_time = start_time
        self.time_to_live_in_minutes = time_to_live_in_minutes


class DataFlowDebugStatisticsRequest(msrest.serialization.Model):
    """Request body structure for data flow statistics.

    :param columns: List of column names.
    :type columns: list[str]
    :param data_flow_name: The data flow which contains the debug session.
    :type data_flow_name: str
    :param session_id: The ID of data flow debug session.
    :type session_id: str
    :param stream_name: The output stream name.
    :type stream_name: str
    """

    _attribute_map = {
        'columns': {'key': 'columns', 'type': '[str]'},
        'data_flow_name': {'key': 'dataFlowName', 'type': 'str'},
        'session_id': {'key': 'sessionId', 'type': 'str'},
        'stream_name': {'key': 'streamName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        columns: Optional[List[str]] = None,
        data_flow_name: Optional[str] = None,
        session_id: Optional[str] = None,
        stream_name: Optional[str] = None,
        **kwargs
    ):
        super(DataFlowDebugStatisticsRequest, self).__init__(**kwargs)
        self.columns = columns
        self.data_flow_name = data_flow_name
        self.session_id = session_id
        self.stream_name = stream_name


class DataFlowFolder(msrest.serialization.Model):
    """The folder that this data flow is in. If not specified, Data flow will appear at the root level.

    :param name: The name of the folder that this data flow is in.
    :type name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        **kwargs
    ):
        super(DataFlowFolder, self).__init__(**kwargs)
        self.name = name


class DataFlowListResponse(msrest.serialization.Model):
    """A list of data flow resources.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The link to the next page of results, if any remaining results exist.
    :type next_link: str
    :param value: Required. List of data flows.
    :type value: list[~azure.synapse.models.DataFlowResource]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[DataFlowResource]'},
    }

    def __init__(
        self,
        *,
        value: List["DataFlowResource"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(DataFlowListResponse, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class DataFlowReference(msrest.serialization.Model):
    """Data flow reference type.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :ivar type: Required. Data flow reference type. Default value: "DataFlowReference".
    :vartype type: str
    :param dataset_parameters: Reference data flow parameters from dataset.
    :type dataset_parameters: object
    :param reference_name: Required. Reference data flow name.
    :type reference_name: str
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'reference_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'dataset_parameters': {'key': 'datasetParameters', 'type': 'object'},
        'reference_name': {'key': 'referenceName', 'type': 'str'},
    }

    type = "DataFlowReference"

    def __init__(
        self,
        *,
        reference_name: str,
        additional_properties: Optional[Dict[str, object]] = None,
        dataset_parameters: Optional[object] = None,
        **kwargs
    ):
        super(DataFlowReference, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.dataset_parameters = dataset_parameters
        self.reference_name = reference_name


class SubResource(msrest.serialization.Model):
    """Azure Synapse nested resource, which belongs to a workspace.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar etag: Etag identifies change in the resource.
    :vartype etag: str
    :ivar id: The resource identifier.
    :vartype id: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'id': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SubResource, self).__init__(**kwargs)
        self.name = None
        self.type = None
        self.etag = None
        self.id = None


class DataFlowResource(SubResource):
    """Data flow resource type.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar etag: Etag identifies change in the resource.
    :vartype etag: str
    :ivar id: The resource identifier.
    :vartype id: str
    :param properties: Required. Data flow properties.
    :type properties: ~azure.synapse.models.DataFlow
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'id': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'DataFlow'},
    }

    def __init__(
        self,
        *,
        properties: "DataFlow",
        **kwargs
    ):
        super(DataFlowResource, self).__init__(**kwargs)
        self.properties = properties


class Transformation(msrest.serialization.Model):
    """A data flow transformation.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Transformation name.
    :type name: str
    :param description: Transformation description.
    :type description: str
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        **kwargs
    ):
        super(Transformation, self).__init__(**kwargs)
        self.name = name
        self.description = description


class DataFlowSink(Transformation):
    """Transformation for data flow sink.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Transformation name.
    :type name: str
    :param description: Transformation description.
    :type description: str
    :param dataset: Dataset reference.
    :type dataset: ~azure.synapse.models.DatasetReference
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'dataset': {'key': 'dataset', 'type': 'DatasetReference'},
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        dataset: Optional["DatasetReference"] = None,
        **kwargs
    ):
        super(DataFlowSink, self).__init__(name=name, description=description, **kwargs)
        self.dataset = dataset


class DataFlowSource(Transformation):
    """Transformation for data flow source.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Transformation name.
    :type name: str
    :param description: Transformation description.
    :type description: str
    :param dataset: Dataset reference.
    :type dataset: ~azure.synapse.models.DatasetReference
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'dataset': {'key': 'dataset', 'type': 'DatasetReference'},
    }

    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        dataset: Optional["DatasetReference"] = None,
        **kwargs
    ):
        super(DataFlowSource, self).__init__(name=name, description=description, **kwargs)
        self.dataset = dataset


class DataFlowSourceSetting(msrest.serialization.Model):
    """Definition of data flow source setting for debug.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param row_limit: Defines the row limit of data flow source in debug.
    :type row_limit: int
    :param source_name: The data flow source name.
    :type source_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'row_limit': {'key': 'rowLimit', 'type': 'int'},
        'source_name': {'key': 'sourceName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        row_limit: Optional[int] = None,
        source_name: Optional[str] = None,
        **kwargs
    ):
        super(DataFlowSourceSetting, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.row_limit = row_limit
        self.source_name = source_name


class DataFlowStagingInfo(msrest.serialization.Model):
    """Staging info for execute data flow activity.

    :param folder_path: Folder path for staging blob.
    :type folder_path: str
    :param linked_service: Staging linked service reference.
    :type linked_service: ~azure.synapse.models.LinkedServiceReference
    """

    _attribute_map = {
        'folder_path': {'key': 'folderPath', 'type': 'str'},
        'linked_service': {'key': 'linkedService', 'type': 'LinkedServiceReference'},
    }

    def __init__(
        self,
        *,
        folder_path: Optional[str] = None,
        linked_service: Optional["LinkedServiceReference"] = None,
        **kwargs
    ):
        super(DataFlowStagingInfo, self).__init__(**kwargs)
        self.folder_path = folder_path
        self.linked_service = linked_service


class DataLakeAnalyticsUSQLActivity(ExecutionActivity):
    """Data Lake Analytics U-SQL activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param compilation_mode: Compilation mode of U-SQL. Must be one of these values : Semantic,
     Full and SingleBox. Type: string (or Expression with resultType string).
    :type compilation_mode: object
    :param degree_of_parallelism: The maximum number of nodes simultaneously used to run the job.
     Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
    :type degree_of_parallelism: object
    :param parameters: Parameters for U-SQL job request.
    :type parameters: dict[str, object]
    :param priority: Determines which jobs out of all that are queued should be selected to run
     first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or
     Expression with resultType integer), minimum: 1.
    :type priority: object
    :param runtime_version: Runtime version of the U-SQL engine to use. Type: string (or Expression
     with resultType string).
    :type runtime_version: object
    :param script_linked_service: Required. Script linked service reference.
    :type script_linked_service: ~azure.synapse.models.LinkedServiceReference
    :param script_path: Required. Case-sensitive path to folder that contains the U-SQL script.
     Type: string (or Expression with resultType string).
    :type script_path: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'script_linked_service': {'required': True},
        'script_path': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'compilation_mode': {'key': 'typeProperties.compilationMode', 'type': 'object'},
        'degree_of_parallelism': {'key': 'typeProperties.degreeOfParallelism', 'type': 'object'},
        'parameters': {'key': 'typeProperties.parameters', 'type': '{object}'},
        'priority': {'key': 'typeProperties.priority', 'type': 'object'},
        'runtime_version': {'key': 'typeProperties.runtimeVersion', 'type': 'object'},
        'script_linked_service': {'key': 'typeProperties.scriptLinkedService', 'type': 'LinkedServiceReference'},
        'script_path': {'key': 'typeProperties.scriptPath', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        script_linked_service: "LinkedServiceReference",
        script_path: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        compilation_mode: Optional[object] = None,
        degree_of_parallelism: Optional[object] = None,
        parameters: Optional[Dict[str, object]] = None,
        priority: Optional[object] = None,
        runtime_version: Optional[object] = None,
        **kwargs
    ):
        super(DataLakeAnalyticsUSQLActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'DataLakeAnalyticsU-SQL'
        self.compilation_mode = compilation_mode
        self.degree_of_parallelism = degree_of_parallelism
        self.parameters = parameters
        self.priority = priority
        self.runtime_version = runtime_version
        self.script_linked_service = script_linked_service
        self.script_path = script_path


class DatasetCompression(msrest.serialization.Model):
    """The compression method used on a dataset.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: DatasetDeflateCompression, DatasetGZipCompression, DatasetZipDeflateCompression.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset compression.Constant filled by server.
    :type type: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Deflate': 'DatasetDeflateCompression', 'GZip': 'DatasetGZipCompression', 'ZipDeflate': 'DatasetZipDeflateCompression'}
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(DatasetCompression, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.type = 'DatasetCompression'


class DatasetDebugResource(SubResourceDebugResource):
    """Dataset debug resource.

    All required parameters must be populated in order to send to Azure.

    :param name: The resource name.
    :type name: str
    :param properties: Required. Dataset properties.
    :type properties: ~azure.synapse.models.Dataset
    """

    _validation = {
        'properties': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'Dataset'},
    }

    def __init__(
        self,
        *,
        properties: "Dataset",
        name: Optional[str] = None,
        **kwargs
    ):
        super(DatasetDebugResource, self).__init__(name=name, **kwargs)
        self.properties = properties


class DatasetDeflateCompression(DatasetCompression):
    """The Deflate compression method used on a dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset compression.Constant filled by server.
    :type type: str
    :param level: The Deflate compression level. Possible values include: "Optimal", "Fastest".
    :type level: str or ~azure.synapse.models.DatasetCompressionLevel
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'level': {'key': 'level', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        level: Optional[Union[str, "DatasetCompressionLevel"]] = None,
        **kwargs
    ):
        super(DatasetDeflateCompression, self).__init__(additional_properties=additional_properties, **kwargs)
        self.type = 'Deflate'
        self.level = level


class DatasetFolder(msrest.serialization.Model):
    """The folder that this Dataset is in. If not specified, Dataset will appear at the root level.

    :param name: The name of the folder that this Dataset is in.
    :type name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        **kwargs
    ):
        super(DatasetFolder, self).__init__(**kwargs)
        self.name = name


class DatasetGZipCompression(DatasetCompression):
    """The GZip compression method used on a dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset compression.Constant filled by server.
    :type type: str
    :param level: The GZip compression level. Possible values include: "Optimal", "Fastest".
    :type level: str or ~azure.synapse.models.DatasetCompressionLevel
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'level': {'key': 'level', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        level: Optional[Union[str, "DatasetCompressionLevel"]] = None,
        **kwargs
    ):
        super(DatasetGZipCompression, self).__init__(additional_properties=additional_properties, **kwargs)
        self.type = 'GZip'
        self.level = level


class DatasetListResponse(msrest.serialization.Model):
    """A list of dataset resources.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The link to the next page of results, if any remaining results exist.
    :type next_link: str
    :param value: Required. List of datasets.
    :type value: list[~azure.synapse.models.DatasetResource]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[DatasetResource]'},
    }

    def __init__(
        self,
        *,
        value: List["DatasetResource"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(DatasetListResponse, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class DatasetLocation(msrest.serialization.Model):
    """Dataset location.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: .

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset storage location.Constant filled by server.
    :type type: str
    :param file_name: Specify the file name of dataset. Type: string (or Expression with resultType
     string).
    :type file_name: object
    :param folder_path: Specify the folder path of dataset. Type: string (or Expression with
     resultType string).
    :type folder_path: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'file_name': {'key': 'fileName', 'type': 'object'},
        'folder_path': {'key': 'folderPath', 'type': 'object'},
    }

    _subtype_map = {
        'type': {}
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        file_name: Optional[object] = None,
        folder_path: Optional[object] = None,
        **kwargs
    ):
        super(DatasetLocation, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.type = 'DatasetLocation'
        self.file_name = file_name
        self.folder_path = folder_path


class DatasetReference(msrest.serialization.Model):
    """Dataset reference type.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Dataset reference type. Possible values include: "DatasetReference",
     "LinkedServiceReference".
    :type type: str or ~azure.synapse.models.Type
    :param parameters: Arguments for dataset.
    :type parameters: dict[str, object]
    :param reference_name: Required. Reference dataset name.
    :type reference_name: str
    """

    _validation = {
        'type': {'required': True},
        'reference_name': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '{object}'},
        'reference_name': {'key': 'referenceName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "Type"],
        reference_name: str,
        parameters: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(DatasetReference, self).__init__(**kwargs)
        self.type = type
        self.parameters = parameters
        self.reference_name = reference_name


class DatasetResource(SubResource):
    """Dataset resource type.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar etag: Etag identifies change in the resource.
    :vartype etag: str
    :ivar id: The resource identifier.
    :vartype id: str
    :param properties: Required. Dataset properties.
    :type properties: ~azure.synapse.models.Dataset
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'id': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'Dataset'},
    }

    def __init__(
        self,
        *,
        properties: "Dataset",
        **kwargs
    ):
        super(DatasetResource, self).__init__(**kwargs)
        self.properties = properties


class DatasetZipDeflateCompression(DatasetCompression):
    """The ZipDeflate compression method used on a dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset compression.Constant filled by server.
    :type type: str
    :param level: The ZipDeflate compression level. Possible values include: "Optimal", "Fastest".
    :type level: str or ~azure.synapse.models.DatasetCompressionLevel
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'level': {'key': 'level', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        level: Optional[Union[str, "DatasetCompressionLevel"]] = None,
        **kwargs
    ):
        super(DatasetZipDeflateCompression, self).__init__(additional_properties=additional_properties, **kwargs)
        self.type = 'ZipDeflate'
        self.level = level


class Db2LinkedService(LinkedService):
    """Linked service for DB2 data source.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :ivar authentication_type: AuthenticationType to be used for connection. Default value:
     "Basic".
    :vartype authentication_type: str
    :param certificate_common_name: Certificate Common Name when TLS is enabled. Type: string (or
     Expression with resultType string).
    :type certificate_common_name: object
    :param database: Required. Database name for connection. Type: string (or Expression with
     resultType string).
    :type database: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param package_collection: Under where packages are created when querying database. Type:
     string (or Expression with resultType string).
    :type package_collection: object
    :param password: Password for authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param server: Required. Server name for connection. Type: string (or Expression with
     resultType string).
    :type server: object
    :param username: Username for authentication. Type: string (or Expression with resultType
     string).
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'authentication_type': {'constant': True},
        'database': {'required': True},
        'server': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'certificate_common_name': {'key': 'typeProperties.certificateCommonName', 'type': 'object'},
        'database': {'key': 'typeProperties.database', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'package_collection': {'key': 'typeProperties.packageCollection', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'server': {'key': 'typeProperties.server', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    authentication_type = "Basic"

    def __init__(
        self,
        *,
        database: object,
        server: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        certificate_common_name: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        package_collection: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(Db2LinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Db2'
        self.certificate_common_name = certificate_common_name
        self.database = database
        self.encrypted_credential = encrypted_credential
        self.package_collection = package_collection
        self.password = password
        self.server = server
        self.username = username


class Db2TableDataset(Dataset):
    """The Db2 table dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The Db2 schema name. Type: string (or Expression with
     resultType string).
    :type schema_type_properties_schema: object
    :param table: The Db2 table name. Type: string (or Expression with resultType string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(Db2TableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'Db2Table'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class DeleteActivity(ExecutionActivity):
    """Delete activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param dataset: Required. Delete activity dataset reference.
    :type dataset: ~azure.synapse.models.DatasetReference
    :param enable_logging: Whether to record detailed logs of delete-activity execution. Default
     value is false. Type: boolean (or Expression with resultType boolean).
    :type enable_logging: object
    :param log_storage_settings: Log storage settings customer need to provide when enableLogging
     is true.
    :type log_storage_settings: ~azure.synapse.models.LogStorageSettings
    :param max_concurrent_connections: The max concurrent connections to connect data source at the
     same time.
    :type max_concurrent_connections: int
    :param recursive: If true, files or sub-folders under current folder path will be deleted
     recursively. Default is false. Type: boolean (or Expression with resultType boolean).
    :type recursive: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'dataset': {'required': True},
        'max_concurrent_connections': {'minimum': 1},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'dataset': {'key': 'typeProperties.dataset', 'type': 'DatasetReference'},
        'enable_logging': {'key': 'typeProperties.enableLogging', 'type': 'object'},
        'log_storage_settings': {'key': 'typeProperties.logStorageSettings', 'type': 'LogStorageSettings'},
        'max_concurrent_connections': {'key': 'typeProperties.maxConcurrentConnections', 'type': 'int'},
        'recursive': {'key': 'typeProperties.recursive', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        dataset: "DatasetReference",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        enable_logging: Optional[object] = None,
        log_storage_settings: Optional["LogStorageSettings"] = None,
        max_concurrent_connections: Optional[int] = None,
        recursive: Optional[object] = None,
        **kwargs
    ):
        super(DeleteActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'Delete'
        self.dataset = dataset
        self.enable_logging = enable_logging
        self.log_storage_settings = log_storage_settings
        self.max_concurrent_connections = max_concurrent_connections
        self.recursive = recursive


class DeleteDataFlowDebugSessionRequest(msrest.serialization.Model):
    """Request body structure for deleting data flow debug session.

    :param data_flow_name: The data flow which contains the debug session.
    :type data_flow_name: str
    :param session_id: The ID of data flow debug session.
    :type session_id: str
    """

    _attribute_map = {
        'data_flow_name': {'key': 'dataFlowName', 'type': 'str'},
        'session_id': {'key': 'sessionId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        data_flow_name: Optional[str] = None,
        session_id: Optional[str] = None,
        **kwargs
    ):
        super(DeleteDataFlowDebugSessionRequest, self).__init__(**kwargs)
        self.data_flow_name = data_flow_name
        self.session_id = session_id


class DelimitedTextDataset(Dataset):
    """Delimited text dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param column_delimiter: The column delimiter. Type: string (or Expression with resultType
     string).
    :type column_delimiter: object
    :param compression_codec:  Possible values include: "bzip2", "gzip", "deflate", "zipDeflate",
     "snappy", "lz4".
    :type compression_codec: str or ~azure.synapse.models.DelimitedTextCompressionCodec
    :param compression_level: The data compression method used for DelimitedText. Possible values
     include: "Optimal", "Fastest".
    :type compression_level: str or ~azure.synapse.models.DatasetCompressionLevel
    :param encoding_name: The code page name of the preferred encoding. If miss, the default value
     is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in
     the following link to set supported values:
     https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with
     resultType string).
    :type encoding_name: object
    :param escape_char: The escape character. Type: string (or Expression with resultType string).
    :type escape_char: object
    :param first_row_as_header: When used as input, treat the first row of data as headers. When
     used as output,write the headers into the output as the first row of data. The default value is
     false. Type: boolean (or Expression with resultType boolean).
    :type first_row_as_header: object
    :param location: The location of the delimited text storage.
    :type location: ~azure.synapse.models.DatasetLocation
    :param null_value: The null value string. Type: string (or Expression with resultType string).
    :type null_value: object
    :param quote_char: The quote character. Type: string (or Expression with resultType string).
    :type quote_char: object
    :param row_delimiter: The row delimiter. Type: string (or Expression with resultType string).
    :type row_delimiter: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'column_delimiter': {'key': 'typeProperties.columnDelimiter', 'type': 'object'},
        'compression_codec': {'key': 'typeProperties.compressionCodec', 'type': 'str'},
        'compression_level': {'key': 'typeProperties.compressionLevel', 'type': 'str'},
        'encoding_name': {'key': 'typeProperties.encodingName', 'type': 'object'},
        'escape_char': {'key': 'typeProperties.escapeChar', 'type': 'object'},
        'first_row_as_header': {'key': 'typeProperties.firstRowAsHeader', 'type': 'object'},
        'location': {'key': 'typeProperties.location', 'type': 'DatasetLocation'},
        'null_value': {'key': 'typeProperties.nullValue', 'type': 'object'},
        'quote_char': {'key': 'typeProperties.quoteChar', 'type': 'object'},
        'row_delimiter': {'key': 'typeProperties.rowDelimiter', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        column_delimiter: Optional[object] = None,
        compression_codec: Optional[Union[str, "DelimitedTextCompressionCodec"]] = None,
        compression_level: Optional[Union[str, "DatasetCompressionLevel"]] = None,
        encoding_name: Optional[object] = None,
        escape_char: Optional[object] = None,
        first_row_as_header: Optional[object] = None,
        location: Optional["DatasetLocation"] = None,
        null_value: Optional[object] = None,
        quote_char: Optional[object] = None,
        row_delimiter: Optional[object] = None,
        **kwargs
    ):
        super(DelimitedTextDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'DelimitedText'
        self.column_delimiter = column_delimiter
        self.compression_codec = compression_codec
        self.compression_level = compression_level
        self.encoding_name = encoding_name
        self.escape_char = escape_char
        self.first_row_as_header = first_row_as_header
        self.location = location
        self.null_value = null_value
        self.quote_char = quote_char
        self.row_delimiter = row_delimiter


class DocumentDbCollectionDataset(Dataset):
    """Microsoft Azure Document Database Collection dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param collection_name: Required. Document Database collection name. Type: string (or
     Expression with resultType string).
    :type collection_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
        'collection_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'collection_name': {'key': 'typeProperties.collectionName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        collection_name: object,
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        **kwargs
    ):
        super(DocumentDbCollectionDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'DocumentDbCollection'
        self.collection_name = collection_name


class DrillLinkedService(LinkedService):
    """Drill server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: An ODBC connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param pwd: The Azure key vault secret reference of password in connection string.
    :type pwd: ~azure.synapse.models.AzureKeyVaultSecretReference
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'pwd': {'key': 'typeProperties.pwd', 'type': 'AzureKeyVaultSecretReference'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        connection_string: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        pwd: Optional["AzureKeyVaultSecretReference"] = None,
        **kwargs
    ):
        super(DrillLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Drill'
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.pwd = pwd


class DrillTableDataset(Dataset):
    """Drill server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of the Drill. Type: string (or Expression
     with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of the Drill. Type: string (or Expression with resultType string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(DrillTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'DrillTable'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class DynamicsAXLinkedService(LinkedService):
    """Dynamics AX linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param aad_resource_id: Required. Specify the resource you are requesting authorization. Type:
     string (or Expression with resultType string).
    :type aad_resource_id: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param service_principal_id: Required. Specify the application's client ID. Type: string (or
     Expression with resultType string).
    :type service_principal_id: object
    :param service_principal_key: Required. Specify the application's key. Mark this field as a
     SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key
     Vault. Type: string (or Expression with resultType string).
    :type service_principal_key: ~azure.synapse.models.SecretBase
    :param tenant: Required. Specify the tenant information (domain name or tenant ID) under which
     your application resides. Retrieve it by hovering the mouse in the top-right corner of the
     Azure portal. Type: string (or Expression with resultType string).
    :type tenant: object
    :param url: Required. The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData
     endpoint.
    :type url: object
    """

    _validation = {
        'type': {'required': True},
        'aad_resource_id': {'required': True},
        'service_principal_id': {'required': True},
        'service_principal_key': {'required': True},
        'tenant': {'required': True},
        'url': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'aad_resource_id': {'key': 'typeProperties.aadResourceId', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_principal_key': {'key': 'typeProperties.servicePrincipalKey', 'type': 'SecretBase'},
        'tenant': {'key': 'typeProperties.tenant', 'type': 'object'},
        'url': {'key': 'typeProperties.url', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        aad_resource_id: object,
        service_principal_id: object,
        service_principal_key: "SecretBase",
        tenant: object,
        url: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        **kwargs
    ):
        super(DynamicsAXLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'DynamicsAX'
        self.aad_resource_id = aad_resource_id
        self.encrypted_credential = encrypted_credential
        self.service_principal_id = service_principal_id
        self.service_principal_key = service_principal_key
        self.tenant = tenant
        self.url = url


class DynamicsAXResourceDataset(Dataset):
    """The path of the Dynamics AX OData entity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param path: Required. The path of the Dynamics AX OData entity. Type: string (or Expression
     with resultType string).
    :type path: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
        'path': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'path': {'key': 'typeProperties.path', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        path: object,
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        **kwargs
    ):
        super(DynamicsAXResourceDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'DynamicsAXResource'
        self.path = path


class DynamicsCrmEntityDataset(Dataset):
    """The Dynamics CRM entity dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param entity_name: The logical name of the entity. Type: string (or Expression with resultType
     string).
    :type entity_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'entity_name': {'key': 'typeProperties.entityName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        entity_name: Optional[object] = None,
        **kwargs
    ):
        super(DynamicsCrmEntityDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'DynamicsCrmEntity'
        self.entity_name = entity_name


class DynamicsCrmLinkedService(LinkedService):
    """Dynamics CRM linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param authentication_type: Required. The authentication type to connect to Dynamics CRM
     server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario,
     'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or
     Expression with resultType string). Possible values include: "Office365", "Ifd",
     "AADServicePrincipal".
    :type authentication_type: str or ~azure.synapse.models.DynamicsAuthenticationType
    :param deployment_type: Required. The deployment type of the Dynamics CRM instance. 'Online'
     for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type:
     string (or Expression with resultType string). Possible values include: "Online",
     "OnPremisesWithIfd".
    :type deployment_type: str or ~azure.synapse.models.DynamicsDeploymentType
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host_name: The host name of the on-premises Dynamics CRM server. The property is
     required for on-prem and not allowed for online. Type: string (or Expression with resultType
     string).
    :type host_name: object
    :param organization_name: The organization name of the Dynamics CRM instance. The property is
     required for on-prem and required for online when there are more than one Dynamics CRM
     instances associated with the user. Type: string (or Expression with resultType string).
    :type organization_name: object
    :param password: Password to access the Dynamics CRM instance.
    :type password: ~azure.synapse.models.SecretBase
    :param port: The port of on-premises Dynamics CRM server. The property is required for on-prem
     and not allowed for online. Default is 443. Type: integer (or Expression with resultType
     integer), minimum: 0.
    :type port: object
    :param service_principal_credential: The credential of the service principal object in Azure
     Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey',
     servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If
     servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only
     be AzureKeyVaultSecretReference.
    :type service_principal_credential: ~azure.synapse.models.SecretBase
    :param service_principal_credential_type: The service principal credential type to use in
     Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert'
     for certificate. Type: string (or Expression with resultType string). Possible values include:
     "ServicePrincipalKey", "ServicePrincipalCert".
    :type service_principal_credential_type: str or
     ~azure.synapse.models.DynamicsServicePrincipalCredentialType
    :param service_principal_id: The client ID of the application in Azure Active Directory used
     for Server-To-Server authentication. Type: string (or Expression with resultType string).
    :type service_principal_id: object
    :param service_uri: The URL to the Microsoft Dynamics CRM server. The property is required for
     on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
    :type service_uri: object
    :param username: User name to access the Dynamics CRM instance. Type: string (or Expression
     with resultType string).
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'authentication_type': {'required': True},
        'deployment_type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'deployment_type': {'key': 'typeProperties.deploymentType', 'type': 'str'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host_name': {'key': 'typeProperties.hostName', 'type': 'object'},
        'organization_name': {'key': 'typeProperties.organizationName', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'port': {'key': 'typeProperties.port', 'type': 'object'},
        'service_principal_credential': {'key': 'typeProperties.servicePrincipalCredential', 'type': 'SecretBase'},
        'service_principal_credential_type': {'key': 'typeProperties.servicePrincipalCredentialType', 'type': 'str'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_uri': {'key': 'typeProperties.serviceUri', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        authentication_type: Union[str, "DynamicsAuthenticationType"],
        deployment_type: Union[str, "DynamicsDeploymentType"],
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        host_name: Optional[object] = None,
        organization_name: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        port: Optional[object] = None,
        service_principal_credential: Optional["SecretBase"] = None,
        service_principal_credential_type: Optional[Union[str, "DynamicsServicePrincipalCredentialType"]] = None,
        service_principal_id: Optional[object] = None,
        service_uri: Optional[object] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(DynamicsCrmLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'DynamicsCrm'
        self.authentication_type = authentication_type
        self.deployment_type = deployment_type
        self.encrypted_credential = encrypted_credential
        self.host_name = host_name
        self.organization_name = organization_name
        self.password = password
        self.port = port
        self.service_principal_credential = service_principal_credential
        self.service_principal_credential_type = service_principal_credential_type
        self.service_principal_id = service_principal_id
        self.service_uri = service_uri
        self.username = username


class DynamicsEntityDataset(Dataset):
    """The Dynamics entity dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param entity_name: The logical name of the entity. Type: string (or Expression with resultType
     string).
    :type entity_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'entity_name': {'key': 'typeProperties.entityName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        entity_name: Optional[object] = None,
        **kwargs
    ):
        super(DynamicsEntityDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'DynamicsEntity'
        self.entity_name = entity_name


class DynamicsLinkedService(LinkedService):
    """Dynamics linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param authentication_type: Required. The authentication type to connect to Dynamics server.
     'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal'
     for Server-To-Server authentication in online scenario. Type: string (or Expression with
     resultType string). Possible values include: "Office365", "Ifd", "AADServicePrincipal".
    :type authentication_type: str or ~azure.synapse.models.DynamicsAuthenticationType
    :param deployment_type: Required. The deployment type of the Dynamics instance. 'Online' for
     Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or
     Expression with resultType string). Possible values include: "Online", "OnPremisesWithIfd".
    :type deployment_type: str or ~azure.synapse.models.DynamicsDeploymentType
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host_name: The host name of the on-premises Dynamics server. The property is required
     for on-prem and not allowed for online. Type: string (or Expression with resultType string).
    :type host_name: str
    :param organization_name: The organization name of the Dynamics instance. The property is
     required for on-prem and required for online when there are more than one Dynamics instances
     associated with the user. Type: string (or Expression with resultType string).
    :type organization_name: str
    :param password: Password to access the Dynamics instance.
    :type password: ~azure.synapse.models.SecretBase
    :param port: The port of on-premises Dynamics server. The property is required for on-prem and
     not allowed for online. Default is 443. Type: integer (or Expression with resultType integer),
     minimum: 0.
    :type port: str
    :param service_principal_credential: The credential of the service principal object in Azure
     Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey',
     servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If
     servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only
     be AzureKeyVaultSecretReference.
    :type service_principal_credential: ~azure.synapse.models.SecretBase
    :param service_principal_credential_type: The service principal credential type to use in
     Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert'
     for certificate. Type: string (or Expression with resultType string). Possible values include:
     "ServicePrincipalKey", "ServicePrincipalCert".
    :type service_principal_credential_type: str or
     ~azure.synapse.models.DynamicsServicePrincipalCredentialType
    :param service_principal_id: The client ID of the application in Azure Active Directory used
     for Server-To-Server authentication. Type: string (or Expression with resultType string).
    :type service_principal_id: object
    :param service_uri: The URL to the Microsoft Dynamics server. The property is required for on-
     line and not allowed for on-prem. Type: string (or Expression with resultType string).
    :type service_uri: str
    :param username: User name to access the Dynamics instance. Type: string (or Expression with
     resultType string).
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'authentication_type': {'required': True},
        'deployment_type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'deployment_type': {'key': 'typeProperties.deploymentType', 'type': 'str'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host_name': {'key': 'typeProperties.hostName', 'type': 'str'},
        'organization_name': {'key': 'typeProperties.organizationName', 'type': 'str'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'port': {'key': 'typeProperties.port', 'type': 'str'},
        'service_principal_credential': {'key': 'typeProperties.servicePrincipalCredential', 'type': 'SecretBase'},
        'service_principal_credential_type': {'key': 'typeProperties.servicePrincipalCredentialType', 'type': 'str'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_uri': {'key': 'typeProperties.serviceUri', 'type': 'str'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        authentication_type: Union[str, "DynamicsAuthenticationType"],
        deployment_type: Union[str, "DynamicsDeploymentType"],
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        host_name: Optional[str] = None,
        organization_name: Optional[str] = None,
        password: Optional["SecretBase"] = None,
        port: Optional[str] = None,
        service_principal_credential: Optional["SecretBase"] = None,
        service_principal_credential_type: Optional[Union[str, "DynamicsServicePrincipalCredentialType"]] = None,
        service_principal_id: Optional[object] = None,
        service_uri: Optional[str] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(DynamicsLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Dynamics'
        self.authentication_type = authentication_type
        self.deployment_type = deployment_type
        self.encrypted_credential = encrypted_credential
        self.host_name = host_name
        self.organization_name = organization_name
        self.password = password
        self.port = port
        self.service_principal_credential = service_principal_credential
        self.service_principal_credential_type = service_principal_credential_type
        self.service_principal_id = service_principal_id
        self.service_uri = service_uri
        self.username = username


class Edge(msrest.serialization.Model):
    """Edge.

    :param child_id:
    :type child_id: int
    :param id:
    :type id: int
    """

    _attribute_map = {
        'child_id': {'key': 'childId', 'type': 'int'},
        'id': {'key': 'id', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        child_id: Optional[int] = None,
        id: Optional[int] = None,
        **kwargs
    ):
        super(Edge, self).__init__(**kwargs)
        self.child_id = child_id
        self.id = id


class EloquaLinkedService(LinkedService):
    """Eloqua server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param endpoint: Required. The endpoint of the Eloqua server. (i.e. eloqua.example.com).
    :type endpoint: object
    :param password: The password corresponding to the user name.
    :type password: ~azure.synapse.models.SecretBase
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true.
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true.
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true.
    :type use_peer_verification: object
    :param username: Required. The site name and user name of your Eloqua account in the form:
     sitename/username. (i.e. Eloqua/Alice).
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'endpoint': {'required': True},
        'username': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'endpoint': {'key': 'typeProperties.endpoint', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        endpoint: object,
        username: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        **kwargs
    ):
        super(EloquaLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Eloqua'
        self.encrypted_credential = encrypted_credential
        self.endpoint = endpoint
        self.password = password
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification
        self.username = username


class EloquaObjectDataset(Dataset):
    """Eloqua server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(EloquaObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'EloquaObject'
        self.table_name = table_name


class ErrorContract(msrest.serialization.Model):
    """Contains details when the response code indicates an error.

    :param error: The error details.
    :type error: ~azure.synapse.models.ErrorResponse
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorResponse'},
    }

    def __init__(
        self,
        *,
        error: Optional["ErrorResponse"] = None,
        **kwargs
    ):
        super(ErrorContract, self).__init__(**kwargs)
        self.error = error


class ErrorDetail(msrest.serialization.Model):
    """ErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        **kwargs
    ):
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target


class ErrorInformation(msrest.serialization.Model):
    """ErrorInformation.

    :param error_code:
    :type error_code: str
    :param message:
    :type message: str
    :param source:  Possible values include: "System", "User", "Unknown", "Dependency".
    :type source: str or ~azure.synapse.models.ErrorSource
    """

    _attribute_map = {
        'error_code': {'key': 'errorCode', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        error_code: Optional[str] = None,
        message: Optional[str] = None,
        source: Optional[Union[str, "ErrorSource"]] = None,
        **kwargs
    ):
        super(ErrorInformation, self).__init__(**kwargs)
        self.error_code = error_code
        self.message = message
        self.source = source


class ErrorResponse(msrest.serialization.Model):
    """ErrorResponse.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~azure.synapse.models.ErrorDetail]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["ErrorDetail"]] = None,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class EvaluateDataFlowExpressionRequest(msrest.serialization.Model):
    """Request body structure for data flow expression preview.

    :param data_flow_name: The data flow which contains the debug session.
    :type data_flow_name: str
    :param expression: The expression for preview.
    :type expression: str
    :param row_limits: The row limit for preview request.
    :type row_limits: int
    :param session_id: The ID of data flow debug session.
    :type session_id: str
    :param stream_name: The output stream name.
    :type stream_name: str
    """

    _attribute_map = {
        'data_flow_name': {'key': 'dataFlowName', 'type': 'str'},
        'expression': {'key': 'expression', 'type': 'str'},
        'row_limits': {'key': 'rowLimits', 'type': 'int'},
        'session_id': {'key': 'sessionId', 'type': 'str'},
        'stream_name': {'key': 'streamName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        data_flow_name: Optional[str] = None,
        expression: Optional[str] = None,
        row_limits: Optional[int] = None,
        session_id: Optional[str] = None,
        stream_name: Optional[str] = None,
        **kwargs
    ):
        super(EvaluateDataFlowExpressionRequest, self).__init__(**kwargs)
        self.data_flow_name = data_flow_name
        self.expression = expression
        self.row_limits = row_limits
        self.session_id = session_id
        self.stream_name = stream_name


class ExecuteDataFlowActivity(ExecutionActivity):
    """Execute data flow activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param compute: Compute properties for data flow activity.
    :type compute: ~azure.synapse.models.ExecuteDataFlowActivityTypePropertiesCompute
    :param data_flow: Required. Data flow reference.
    :type data_flow: ~azure.synapse.models.DataFlowReference
    :param integration_runtime: The integration runtime reference.
    :type integration_runtime: ~azure.synapse.models.IntegrationRuntimeReference
    :param staging: Staging info for execute data flow activity.
    :type staging: ~azure.synapse.models.DataFlowStagingInfo
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'data_flow': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'compute': {'key': 'typeProperties.compute', 'type': 'ExecuteDataFlowActivityTypePropertiesCompute'},
        'data_flow': {'key': 'typeProperties.dataFlow', 'type': 'DataFlowReference'},
        'integration_runtime': {'key': 'typeProperties.integrationRuntime', 'type': 'IntegrationRuntimeReference'},
        'staging': {'key': 'typeProperties.staging', 'type': 'DataFlowStagingInfo'},
    }

    def __init__(
        self,
        *,
        name: str,
        data_flow: "DataFlowReference",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        compute: Optional["ExecuteDataFlowActivityTypePropertiesCompute"] = None,
        integration_runtime: Optional["IntegrationRuntimeReference"] = None,
        staging: Optional["DataFlowStagingInfo"] = None,
        **kwargs
    ):
        super(ExecuteDataFlowActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'ExecuteDataFlow'
        self.compute = compute
        self.data_flow = data_flow
        self.integration_runtime = integration_runtime
        self.staging = staging


class ExecuteDataFlowActivityTypePropertiesCompute(msrest.serialization.Model):
    """Compute properties for data flow activity.

    :param compute_type: Compute type of the cluster which will execute data flow job. Possible
     values include: "General", "MemoryOptimized", "ComputeOptimized".
    :type compute_type: str or ~azure.synapse.models.DataFlowComputeType
    :param core_count: Core count of the cluster which will execute data flow job. Supported values
     are: 8, 16, 32, 48, 80, 144 and 272.
    :type core_count: int
    """

    _attribute_map = {
        'compute_type': {'key': 'computeType', 'type': 'str'},
        'core_count': {'key': 'coreCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        compute_type: Optional[Union[str, "DataFlowComputeType"]] = None,
        core_count: Optional[int] = None,
        **kwargs
    ):
        super(ExecuteDataFlowActivityTypePropertiesCompute, self).__init__(**kwargs)
        self.compute_type = compute_type
        self.core_count = core_count


class ExecutePipelineActivity(Activity):
    """Execute pipeline activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param parameters: Pipeline parameters.
    :type parameters: dict[str, object]
    :param pipeline: Required. Pipeline reference.
    :type pipeline: ~azure.synapse.models.PipelineReference
    :param wait_on_completion: Defines whether activity execution will wait for the dependent
     pipeline execution to finish. Default is false.
    :type wait_on_completion: bool
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'pipeline': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'parameters': {'key': 'typeProperties.parameters', 'type': '{object}'},
        'pipeline': {'key': 'typeProperties.pipeline', 'type': 'PipelineReference'},
        'wait_on_completion': {'key': 'typeProperties.waitOnCompletion', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        name: str,
        pipeline: "PipelineReference",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        parameters: Optional[Dict[str, object]] = None,
        wait_on_completion: Optional[bool] = None,
        **kwargs
    ):
        super(ExecutePipelineActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, **kwargs)
        self.type = 'ExecutePipeline'
        self.parameters = parameters
        self.pipeline = pipeline
        self.wait_on_completion = wait_on_completion


class ExecuteSSISPackageActivity(ExecutionActivity):
    """Execute SSIS package activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param connect_via: Required. The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param environment_path: The environment path to execute the SSIS package. Type: string (or
     Expression with resultType string).
    :type environment_path: object
    :param execution_credential: The package execution credential.
    :type execution_credential: ~azure.synapse.models.SSISExecutionCredential
    :param log_location: SSIS package execution log location.
    :type log_location: ~azure.synapse.models.SSISLogLocation
    :param logging_level: The logging level of SSIS package execution. Type: string (or Expression
     with resultType string).
    :type logging_level: object
    :param package_connection_managers: The package level connection managers to execute the SSIS
     package.
    :type package_connection_managers: dict[str, object]
    :param package_location: Required. SSIS package location.
    :type package_location: ~azure.synapse.models.SSISPackageLocation
    :param package_parameters: The package level parameters to execute the SSIS package.
    :type package_parameters: dict[str, ~azure.synapse.models.SSISExecutionParameter]
    :param project_connection_managers: The project level connection managers to execute the SSIS
     package.
    :type project_connection_managers: dict[str, object]
    :param project_parameters: The project level parameters to execute the SSIS package.
    :type project_parameters: dict[str, ~azure.synapse.models.SSISExecutionParameter]
    :param property_overrides: The property overrides to execute the SSIS package.
    :type property_overrides: dict[str, ~azure.synapse.models.SSISPropertyOverride]
    :param runtime: Specifies the runtime to execute SSIS package. The value should be "x86" or
     "x64". Type: string (or Expression with resultType string).
    :type runtime: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'connect_via': {'required': True},
        'package_location': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'connect_via': {'key': 'typeProperties.connectVia', 'type': 'IntegrationRuntimeReference'},
        'environment_path': {'key': 'typeProperties.environmentPath', 'type': 'object'},
        'execution_credential': {'key': 'typeProperties.executionCredential', 'type': 'SSISExecutionCredential'},
        'log_location': {'key': 'typeProperties.logLocation', 'type': 'SSISLogLocation'},
        'logging_level': {'key': 'typeProperties.loggingLevel', 'type': 'object'},
        'package_connection_managers': {'key': 'typeProperties.packageConnectionManagers', 'type': '{object}'},
        'package_location': {'key': 'typeProperties.packageLocation', 'type': 'SSISPackageLocation'},
        'package_parameters': {'key': 'typeProperties.packageParameters', 'type': '{SSISExecutionParameter}'},
        'project_connection_managers': {'key': 'typeProperties.projectConnectionManagers', 'type': '{object}'},
        'project_parameters': {'key': 'typeProperties.projectParameters', 'type': '{SSISExecutionParameter}'},
        'property_overrides': {'key': 'typeProperties.propertyOverrides', 'type': '{SSISPropertyOverride}'},
        'runtime': {'key': 'typeProperties.runtime', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        connect_via: "IntegrationRuntimeReference",
        package_location: "SSISPackageLocation",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        environment_path: Optional[object] = None,
        execution_credential: Optional["SSISExecutionCredential"] = None,
        log_location: Optional["SSISLogLocation"] = None,
        logging_level: Optional[object] = None,
        package_connection_managers: Optional[Dict[str, object]] = None,
        package_parameters: Optional[Dict[str, "SSISExecutionParameter"]] = None,
        project_connection_managers: Optional[Dict[str, object]] = None,
        project_parameters: Optional[Dict[str, "SSISExecutionParameter"]] = None,
        property_overrides: Optional[Dict[str, "SSISPropertyOverride"]] = None,
        runtime: Optional[object] = None,
        **kwargs
    ):
        super(ExecuteSSISPackageActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'ExecuteSSISPackage'
        self.connect_via = connect_via
        self.environment_path = environment_path
        self.execution_credential = execution_credential
        self.log_location = log_location
        self.logging_level = logging_level
        self.package_connection_managers = package_connection_managers
        self.package_location = package_location
        self.package_parameters = package_parameters
        self.project_connection_managers = project_connection_managers
        self.project_parameters = project_parameters
        self.property_overrides = property_overrides
        self.runtime = runtime


class Executors(msrest.serialization.Model):
    """Executors.

    :param end_time:
    :type end_time: int
    :param events:
    :type events: list[int]
    :param executor_cores:
    :type executor_cores: str
    :param executor_instances:
    :type executor_instances: int
    :param executor_memory:
    :type executor_memory: str
    :param is_dynamic_allocation_on:
    :type is_dynamic_allocation_on: bool
    :param start_time:
    :type start_time: int
    """

    _attribute_map = {
        'end_time': {'key': 'endTime', 'type': 'int'},
        'events': {'key': 'events', 'type': '[int]'},
        'executor_cores': {'key': 'executorCores', 'type': 'str'},
        'executor_instances': {'key': 'executorInstances', 'type': 'int'},
        'executor_memory': {'key': 'executorMemory', 'type': 'str'},
        'is_dynamic_allocation_on': {'key': 'isDynamicAllocationOn', 'type': 'bool'},
        'start_time': {'key': 'startTime', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        end_time: Optional[int] = None,
        events: Optional[List[int]] = None,
        executor_cores: Optional[str] = None,
        executor_instances: Optional[int] = None,
        executor_memory: Optional[str] = None,
        is_dynamic_allocation_on: Optional[bool] = None,
        start_time: Optional[int] = None,
        **kwargs
    ):
        super(Executors, self).__init__(**kwargs)
        self.end_time = end_time
        self.events = events
        self.executor_cores = executor_cores
        self.executor_instances = executor_instances
        self.executor_memory = executor_memory
        self.is_dynamic_allocation_on = is_dynamic_allocation_on
        self.start_time = start_time


class ExposureControlRequest(msrest.serialization.Model):
    """The exposure control request.

    :param feature_name: The feature name.
    :type feature_name: str
    :param feature_type: The feature type.
    :type feature_type: str
    """

    _attribute_map = {
        'feature_name': {'key': 'featureName', 'type': 'str'},
        'feature_type': {'key': 'featureType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        feature_name: Optional[str] = None,
        feature_type: Optional[str] = None,
        **kwargs
    ):
        super(ExposureControlRequest, self).__init__(**kwargs)
        self.feature_name = feature_name
        self.feature_type = feature_type


class ExposureControlResponse(msrest.serialization.Model):
    """The exposure control response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar feature_name: The feature name.
    :vartype feature_name: str
    :ivar value: The feature value.
    :vartype value: str
    """

    _validation = {
        'feature_name': {'readonly': True},
        'value': {'readonly': True},
    }

    _attribute_map = {
        'feature_name': {'key': 'featureName', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ExposureControlResponse, self).__init__(**kwargs)
        self.feature_name = None
        self.value = None


class Expression(msrest.serialization.Model):
    """Azure Synapse expression definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Expression type. Default value: "Expression".
    :vartype type: str
    :param value: Required. Expression value.
    :type value: str
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    type = "Expression"

    def __init__(
        self,
        *,
        value: str,
        **kwargs
    ):
        super(Expression, self).__init__(**kwargs)
        self.value = value


class ExtendedLivyBatchRequest(msrest.serialization.Model):
    """ExtendedLivyBatchRequest.

    :param name:
    :type name: str
    :param archives:
    :type archives: list[str]
    :param args:
    :type args: list[str]
    :param artifact_id:
    :type artifact_id: str
    :param class_name:
    :type class_name: str
    :param conf: Dictionary of :code:`<string>`.
    :type conf: dict[str, str]
    :param driver_cores:
    :type driver_cores: int
    :param driver_memory:
    :type driver_memory: str
    :param executor_cores:
    :type executor_cores: int
    :param executor_memory:
    :type executor_memory: str
    :param file:
    :type file: str
    :param files:
    :type files: list[str]
    :param jars:
    :type jars: list[str]
    :param num_executors:
    :type num_executors: int
    :param tags: A set of tags. Dictionary of :code:`<string>`.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'archives': {'key': 'archives', 'type': '[str]'},
        'args': {'key': 'args', 'type': '[str]'},
        'artifact_id': {'key': 'artifactId', 'type': 'str'},
        'class_name': {'key': 'className', 'type': 'str'},
        'conf': {'key': 'conf', 'type': '{str}'},
        'driver_cores': {'key': 'driverCores', 'type': 'int'},
        'driver_memory': {'key': 'driverMemory', 'type': 'str'},
        'executor_cores': {'key': 'executorCores', 'type': 'int'},
        'executor_memory': {'key': 'executorMemory', 'type': 'str'},
        'file': {'key': 'file', 'type': 'str'},
        'files': {'key': 'files', 'type': '[str]'},
        'jars': {'key': 'jars', 'type': '[str]'},
        'num_executors': {'key': 'numExecutors', 'type': 'int'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        archives: Optional[List[str]] = None,
        args: Optional[List[str]] = None,
        artifact_id: Optional[str] = None,
        class_name: Optional[str] = None,
        conf: Optional[Dict[str, str]] = None,
        driver_cores: Optional[int] = None,
        driver_memory: Optional[str] = None,
        executor_cores: Optional[int] = None,
        executor_memory: Optional[str] = None,
        file: Optional[str] = None,
        files: Optional[List[str]] = None,
        jars: Optional[List[str]] = None,
        num_executors: Optional[int] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(ExtendedLivyBatchRequest, self).__init__(**kwargs)
        self.name = name
        self.archives = archives
        self.args = args
        self.artifact_id = artifact_id
        self.class_name = class_name
        self.conf = conf
        self.driver_cores = driver_cores
        self.driver_memory = driver_memory
        self.executor_cores = executor_cores
        self.executor_memory = executor_memory
        self.file = file
        self.files = files
        self.jars = jars
        self.num_executors = num_executors
        self.tags = tags


class ExtendedLivyBatchResponse(msrest.serialization.Model):
    """ExtendedLivyBatchResponse.

    :param name:
    :type name: str
    :param app_id:
    :type app_id: str
    :param app_info: Dictionary of :code:`<string>`.
    :type app_info: dict[str, str]
    :param artifact_id:
    :type artifact_id: str
    :param error_info:
    :type error_info: list[~azure.synapse.models.ErrorInformation]
    :param id:
    :type id: int
    :param job_type:  Possible values include: "SparkBatch", "SparkSession".
    :type job_type: str or ~azure.synapse.models.JobType
    :param livy_info:
    :type livy_info: ~azure.synapse.models.LivyBatchStateInformation
    :param log:
    :type log: list[str]
    :param plugin_info:
    :type plugin_info: ~azure.synapse.models.SparkServicePluginInformation
    :param result:  Possible values include: "Uncertain", "Succeeded", "Failed", "Cancelled".
    :type result: str or ~azure.synapse.models.JobResult
    :param scheduler_info:
    :type scheduler_info: ~azure.synapse.models.SchedulerInformation
    :param spark_pool_name:
    :type spark_pool_name: str
    :param state:
    :type state: str
    :param submitter_id:
    :type submitter_id: str
    :param submitter_name:
    :type submitter_name: str
    :param tags: A set of tags. Dictionary of :code:`<string>`.
    :type tags: dict[str, str]
    :param workspace_name:
    :type workspace_name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'app_info': {'key': 'appInfo', 'type': '{str}'},
        'artifact_id': {'key': 'artifactId', 'type': 'str'},
        'error_info': {'key': 'errorInfo', 'type': '[ErrorInformation]'},
        'id': {'key': 'id', 'type': 'int'},
        'job_type': {'key': 'jobType', 'type': 'str'},
        'livy_info': {'key': 'livyInfo', 'type': 'LivyBatchStateInformation'},
        'log': {'key': 'log', 'type': '[str]'},
        'plugin_info': {'key': 'pluginInfo', 'type': 'SparkServicePluginInformation'},
        'result': {'key': 'result', 'type': 'str'},
        'scheduler_info': {'key': 'schedulerInfo', 'type': 'SchedulerInformation'},
        'spark_pool_name': {'key': 'sparkPoolName', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'submitter_id': {'key': 'submitterId', 'type': 'str'},
        'submitter_name': {'key': 'submitterName', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'workspace_name': {'key': 'workspaceName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        app_id: Optional[str] = None,
        app_info: Optional[Dict[str, str]] = None,
        artifact_id: Optional[str] = None,
        error_info: Optional[List["ErrorInformation"]] = None,
        id: Optional[int] = None,
        job_type: Optional[Union[str, "JobType"]] = None,
        livy_info: Optional["LivyBatchStateInformation"] = None,
        log: Optional[List[str]] = None,
        plugin_info: Optional["SparkServicePluginInformation"] = None,
        result: Optional[Union[str, "JobResult"]] = None,
        scheduler_info: Optional["SchedulerInformation"] = None,
        spark_pool_name: Optional[str] = None,
        state: Optional[str] = None,
        submitter_id: Optional[str] = None,
        submitter_name: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        workspace_name: Optional[str] = None,
        **kwargs
    ):
        super(ExtendedLivyBatchResponse, self).__init__(**kwargs)
        self.name = name
        self.app_id = app_id
        self.app_info = app_info
        self.artifact_id = artifact_id
        self.error_info = error_info
        self.id = id
        self.job_type = job_type
        self.livy_info = livy_info
        self.log = log
        self.plugin_info = plugin_info
        self.result = result
        self.scheduler_info = scheduler_info
        self.spark_pool_name = spark_pool_name
        self.state = state
        self.submitter_id = submitter_id
        self.submitter_name = submitter_name
        self.tags = tags
        self.workspace_name = workspace_name


class ExtendedLivyListBatchResponse(msrest.serialization.Model):
    """ExtendedLivyListBatchResponse.

    :param from_property:
    :type from_property: int
    :param sessions:
    :type sessions: list[~azure.synapse.models.ExtendedLivyBatchResponse]
    :param total:
    :type total: int
    """

    _attribute_map = {
        'from_property': {'key': 'from', 'type': 'int'},
        'sessions': {'key': 'sessions', 'type': '[ExtendedLivyBatchResponse]'},
        'total': {'key': 'total', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        from_property: Optional[int] = None,
        sessions: Optional[List["ExtendedLivyBatchResponse"]] = None,
        total: Optional[int] = None,
        **kwargs
    ):
        super(ExtendedLivyListBatchResponse, self).__init__(**kwargs)
        self.from_property = from_property
        self.sessions = sessions
        self.total = total


class ExtendedLivyListSessionResponse(msrest.serialization.Model):
    """ExtendedLivyListSessionResponse.

    :param from_property:
    :type from_property: int
    :param sessions:
    :type sessions: list[~azure.synapse.models.ExtendedLivySessionResponse]
    :param total:
    :type total: int
    """

    _attribute_map = {
        'from_property': {'key': 'from', 'type': 'int'},
        'sessions': {'key': 'sessions', 'type': '[ExtendedLivySessionResponse]'},
        'total': {'key': 'total', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        from_property: Optional[int] = None,
        sessions: Optional[List["ExtendedLivySessionResponse"]] = None,
        total: Optional[int] = None,
        **kwargs
    ):
        super(ExtendedLivyListSessionResponse, self).__init__(**kwargs)
        self.from_property = from_property
        self.sessions = sessions
        self.total = total


class ExtendedLivySessionRequest(msrest.serialization.Model):
    """ExtendedLivySessionRequest.

    :param name:
    :type name: str
    :param archives:
    :type archives: list[str]
    :param args:
    :type args: list[str]
    :param artifact_id:
    :type artifact_id: str
    :param class_name:
    :type class_name: str
    :param conf: Dictionary of :code:`<string>`.
    :type conf: dict[str, str]
    :param driver_cores:
    :type driver_cores: int
    :param driver_memory:
    :type driver_memory: str
    :param executor_cores:
    :type executor_cores: int
    :param executor_memory:
    :type executor_memory: str
    :param file:
    :type file: str
    :param files:
    :type files: list[str]
    :param jars:
    :type jars: list[str]
    :param num_executors:
    :type num_executors: int
    :param tags: A set of tags. Dictionary of :code:`<string>`.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'archives': {'key': 'archives', 'type': '[str]'},
        'args': {'key': 'args', 'type': '[str]'},
        'artifact_id': {'key': 'artifactId', 'type': 'str'},
        'class_name': {'key': 'className', 'type': 'str'},
        'conf': {'key': 'conf', 'type': '{str}'},
        'driver_cores': {'key': 'driverCores', 'type': 'int'},
        'driver_memory': {'key': 'driverMemory', 'type': 'str'},
        'executor_cores': {'key': 'executorCores', 'type': 'int'},
        'executor_memory': {'key': 'executorMemory', 'type': 'str'},
        'file': {'key': 'file', 'type': 'str'},
        'files': {'key': 'files', 'type': '[str]'},
        'jars': {'key': 'jars', 'type': '[str]'},
        'num_executors': {'key': 'numExecutors', 'type': 'int'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        archives: Optional[List[str]] = None,
        args: Optional[List[str]] = None,
        artifact_id: Optional[str] = None,
        class_name: Optional[str] = None,
        conf: Optional[Dict[str, str]] = None,
        driver_cores: Optional[int] = None,
        driver_memory: Optional[str] = None,
        executor_cores: Optional[int] = None,
        executor_memory: Optional[str] = None,
        file: Optional[str] = None,
        files: Optional[List[str]] = None,
        jars: Optional[List[str]] = None,
        num_executors: Optional[int] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(ExtendedLivySessionRequest, self).__init__(**kwargs)
        self.name = name
        self.archives = archives
        self.args = args
        self.artifact_id = artifact_id
        self.class_name = class_name
        self.conf = conf
        self.driver_cores = driver_cores
        self.driver_memory = driver_memory
        self.executor_cores = executor_cores
        self.executor_memory = executor_memory
        self.file = file
        self.files = files
        self.jars = jars
        self.num_executors = num_executors
        self.tags = tags


class ExtendedLivySessionResponse(msrest.serialization.Model):
    """ExtendedLivySessionResponse.

    :param name:
    :type name: str
    :param app_id:
    :type app_id: str
    :param app_info: Dictionary of :code:`<string>`.
    :type app_info: dict[str, str]
    :param artifact_id:
    :type artifact_id: str
    :param error_info:
    :type error_info: list[~azure.synapse.models.ErrorInformation]
    :param id:
    :type id: int
    :param job_type:  Possible values include: "SparkBatch", "SparkSession".
    :type job_type: str or ~azure.synapse.models.JobType
    :param livy_info:
    :type livy_info: ~azure.synapse.models.LivySessionStateInformation
    :param log:
    :type log: list[str]
    :param plugin_info:
    :type plugin_info: ~azure.synapse.models.SparkServicePluginInformation
    :param result:  Possible values include: "Uncertain", "Succeeded", "Failed", "Cancelled".
    :type result: str or ~azure.synapse.models.JobResult
    :param scheduler_info:
    :type scheduler_info: ~azure.synapse.models.SchedulerInformation
    :param spark_pool_name:
    :type spark_pool_name: str
    :param state:
    :type state: str
    :param submitter_id:
    :type submitter_id: str
    :param submitter_name:
    :type submitter_name: str
    :param tags: A set of tags. Dictionary of :code:`<string>`.
    :type tags: dict[str, str]
    :param workspace_name:
    :type workspace_name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'app_info': {'key': 'appInfo', 'type': '{str}'},
        'artifact_id': {'key': 'artifactId', 'type': 'str'},
        'error_info': {'key': 'errorInfo', 'type': '[ErrorInformation]'},
        'id': {'key': 'id', 'type': 'int'},
        'job_type': {'key': 'jobType', 'type': 'str'},
        'livy_info': {'key': 'livyInfo', 'type': 'LivySessionStateInformation'},
        'log': {'key': 'log', 'type': '[str]'},
        'plugin_info': {'key': 'pluginInfo', 'type': 'SparkServicePluginInformation'},
        'result': {'key': 'result', 'type': 'str'},
        'scheduler_info': {'key': 'schedulerInfo', 'type': 'SchedulerInformation'},
        'spark_pool_name': {'key': 'sparkPoolName', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'submitter_id': {'key': 'submitterId', 'type': 'str'},
        'submitter_name': {'key': 'submitterName', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'workspace_name': {'key': 'workspaceName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        app_id: Optional[str] = None,
        app_info: Optional[Dict[str, str]] = None,
        artifact_id: Optional[str] = None,
        error_info: Optional[List["ErrorInformation"]] = None,
        id: Optional[int] = None,
        job_type: Optional[Union[str, "JobType"]] = None,
        livy_info: Optional["LivySessionStateInformation"] = None,
        log: Optional[List[str]] = None,
        plugin_info: Optional["SparkServicePluginInformation"] = None,
        result: Optional[Union[str, "JobResult"]] = None,
        scheduler_info: Optional["SchedulerInformation"] = None,
        spark_pool_name: Optional[str] = None,
        state: Optional[str] = None,
        submitter_id: Optional[str] = None,
        submitter_name: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        workspace_name: Optional[str] = None,
        **kwargs
    ):
        super(ExtendedLivySessionResponse, self).__init__(**kwargs)
        self.name = name
        self.app_id = app_id
        self.app_info = app_info
        self.artifact_id = artifact_id
        self.error_info = error_info
        self.id = id
        self.job_type = job_type
        self.livy_info = livy_info
        self.log = log
        self.plugin_info = plugin_info
        self.result = result
        self.scheduler_info = scheduler_info
        self.spark_pool_name = spark_pool_name
        self.state = state
        self.submitter_id = submitter_id
        self.submitter_name = submitter_name
        self.tags = tags
        self.workspace_name = workspace_name


class FileServerLinkedService(LinkedService):
    """File system linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. Host name of the server. Type: string (or Expression with resultType
     string).
    :type host: object
    :param password: Password to logon the server.
    :type password: ~azure.synapse.models.SecretBase
    :param user_id: User ID to logon the server. Type: string (or Expression with resultType
     string).
    :type user_id: object
    """

    _validation = {
        'type': {'required': True},
        'host': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'user_id': {'key': 'typeProperties.userId', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        host: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        user_id: Optional[object] = None,
        **kwargs
    ):
        super(FileServerLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'FileServer'
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.password = password
        self.user_id = user_id


class FilterActivity(Activity):
    """Filter and return results from input array based on the conditions.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param condition: Required. Condition to be used for filtering the input.
    :type condition: ~azure.synapse.models.Expression
    :param items: Required. Input array on which filter should be applied.
    :type items: ~azure.synapse.models.Expression
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'condition': {'required': True},
        'items': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'condition': {'key': 'typeProperties.condition', 'type': 'Expression'},
        'items': {'key': 'typeProperties.items', 'type': 'Expression'},
    }

    def __init__(
        self,
        *,
        name: str,
        condition: "Expression",
        items: "Expression",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        **kwargs
    ):
        super(FilterActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, **kwargs)
        self.type = 'Filter'
        self.condition = condition
        self.items = items


class ForEachActivity(Activity):
    """This activity is used for iterating over a collection and execute given activities.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param activities: Required. List of activities to execute .
    :type activities: list[~azure.synapse.models.Activity]
    :param batch_count: Batch count to be used for controlling the number of parallel execution
     (when isSequential is set to false).
    :type batch_count: int
    :param is_sequential: Should the loop be executed in sequence or in parallel (max 50).
    :type is_sequential: bool
    :param items: Required. Collection to iterate.
    :type items: ~azure.synapse.models.Expression
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'activities': {'required': True},
        'batch_count': {'maximum': 50},
        'items': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'activities': {'key': 'typeProperties.activities', 'type': '[Activity]'},
        'batch_count': {'key': 'typeProperties.batchCount', 'type': 'int'},
        'is_sequential': {'key': 'typeProperties.isSequential', 'type': 'bool'},
        'items': {'key': 'typeProperties.items', 'type': 'Expression'},
    }

    def __init__(
        self,
        *,
        name: str,
        activities: List["Activity"],
        items: "Expression",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        batch_count: Optional[int] = None,
        is_sequential: Optional[bool] = None,
        **kwargs
    ):
        super(ForEachActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, **kwargs)
        self.type = 'ForEach'
        self.activities = activities
        self.batch_count = batch_count
        self.is_sequential = is_sequential
        self.items = items


class FtpServerLinkedService(LinkedService):
    """A FTP server Linked Service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param authentication_type: The authentication type to be used to connect to the FTP server.
     Possible values include: "Basic", "Anonymous".
    :type authentication_type: str or ~azure.synapse.models.FtpAuthenticationType
    :param enable_server_certificate_validation: If true, validate the FTP server SSL certificate
     when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with
     resultType boolean).
    :type enable_server_certificate_validation: object
    :param enable_ssl: If true, connect to the FTP server over SSL/TLS channel. Default value is
     true. Type: boolean (or Expression with resultType boolean).
    :type enable_ssl: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. Host name of the FTP server. Type: string (or Expression with resultType
     string).
    :type host: object
    :param password: Password to logon the FTP server.
    :type password: ~azure.synapse.models.SecretBase
    :param port: The TCP port number that the FTP server uses to listen for client connections.
     Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
    :type port: object
    :param user_name: Username to logon the FTP server. Type: string (or Expression with resultType
     string).
    :type user_name: object
    """

    _validation = {
        'type': {'required': True},
        'host': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'enable_server_certificate_validation': {'key': 'typeProperties.enableServerCertificateValidation', 'type': 'object'},
        'enable_ssl': {'key': 'typeProperties.enableSsl', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'port': {'key': 'typeProperties.port', 'type': 'object'},
        'user_name': {'key': 'typeProperties.userName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        host: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        authentication_type: Optional[Union[str, "FtpAuthenticationType"]] = None,
        enable_server_certificate_validation: Optional[object] = None,
        enable_ssl: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        port: Optional[object] = None,
        user_name: Optional[object] = None,
        **kwargs
    ):
        super(FtpServerLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'FtpServer'
        self.authentication_type = authentication_type
        self.enable_server_certificate_validation = enable_server_certificate_validation
        self.enable_ssl = enable_ssl
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.password = password
        self.port = port
        self.user_name = user_name


class GetMetadataActivity(ExecutionActivity):
    """Activity to get metadata of dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param dataset: Required. GetMetadata activity dataset reference.
    :type dataset: ~azure.synapse.models.DatasetReference
    :param field_list: Fields of metadata to get from dataset.
    :type field_list: list[object]
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'dataset': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'dataset': {'key': 'typeProperties.dataset', 'type': 'DatasetReference'},
        'field_list': {'key': 'typeProperties.fieldList', 'type': '[object]'},
    }

    def __init__(
        self,
        *,
        name: str,
        dataset: "DatasetReference",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        field_list: Optional[List[object]] = None,
        **kwargs
    ):
        super(GetMetadataActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'GetMetadata'
        self.dataset = dataset
        self.field_list = field_list


class GetSsisObjectMetadataRequest(msrest.serialization.Model):
    """The request payload of get SSIS object metadata.

    :param metadata_path: Metadata path.
    :type metadata_path: str
    """

    _attribute_map = {
        'metadata_path': {'key': 'metadataPath', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        metadata_path: Optional[str] = None,
        **kwargs
    ):
        super(GetSsisObjectMetadataRequest, self).__init__(**kwargs)
        self.metadata_path = metadata_path


class GoogleAdWordsLinkedService(LinkedService):
    """Google AdWords service linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param authentication_type: Required. The OAuth 2.0 authentication mechanism used for
     authentication. ServiceAuthentication can only be used on self-hosted IR. Possible values
     include: "ServiceAuthentication", "UserAuthentication".
    :type authentication_type: str or ~azure.synapse.models.GoogleAdWordsAuthenticationType
    :param client_customer_id: Required. The Client customer ID of the AdWords account that you
     want to fetch report data for.
    :type client_customer_id: object
    :param client_id: The client id of the google application used to acquire the refresh token.
     Type: string (or Expression with resultType string).
    :type client_id: object
    :param client_secret: The client secret of the google application used to acquire the refresh
     token.
    :type client_secret: ~azure.synapse.models.SecretBase
    :param developer_token: Required. The developer token associated with the manager account that
     you use to grant access to the AdWords API.
    :type developer_token: ~azure.synapse.models.SecretBase
    :param email: The service account email ID that is used for ServiceAuthentication and can only
     be used on self-hosted IR.
    :type email: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param key_file_path: The full path to the .p12 key file that is used to authenticate the
     service account email address and can only be used on self-hosted IR.
    :type key_file_path: object
    :param refresh_token: The refresh token obtained from Google for authorizing access to AdWords
     for UserAuthentication.
    :type refresh_token: ~azure.synapse.models.SecretBase
    :param trusted_cert_path: The full path of the .pem file containing trusted CA certificates for
     verifying the server when connecting over SSL. This property can only be set when using SSL on
     self-hosted IR. The default value is the cacerts.pem file installed with the IR.
    :type trusted_cert_path: object
    :param use_system_trust_store: Specifies whether to use a CA certificate from the system trust
     store or from a specified PEM file. The default value is false.
    :type use_system_trust_store: object
    """

    _validation = {
        'type': {'required': True},
        'authentication_type': {'required': True},
        'client_customer_id': {'required': True},
        'developer_token': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'client_customer_id': {'key': 'typeProperties.clientCustomerID', 'type': 'object'},
        'client_id': {'key': 'typeProperties.clientId', 'type': 'object'},
        'client_secret': {'key': 'typeProperties.clientSecret', 'type': 'SecretBase'},
        'developer_token': {'key': 'typeProperties.developerToken', 'type': 'SecretBase'},
        'email': {'key': 'typeProperties.email', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'key_file_path': {'key': 'typeProperties.keyFilePath', 'type': 'object'},
        'refresh_token': {'key': 'typeProperties.refreshToken', 'type': 'SecretBase'},
        'trusted_cert_path': {'key': 'typeProperties.trustedCertPath', 'type': 'object'},
        'use_system_trust_store': {'key': 'typeProperties.useSystemTrustStore', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        authentication_type: Union[str, "GoogleAdWordsAuthenticationType"],
        client_customer_id: object,
        developer_token: "SecretBase",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        client_id: Optional[object] = None,
        client_secret: Optional["SecretBase"] = None,
        email: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        key_file_path: Optional[object] = None,
        refresh_token: Optional["SecretBase"] = None,
        trusted_cert_path: Optional[object] = None,
        use_system_trust_store: Optional[object] = None,
        **kwargs
    ):
        super(GoogleAdWordsLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'GoogleAdWords'
        self.authentication_type = authentication_type
        self.client_customer_id = client_customer_id
        self.client_id = client_id
        self.client_secret = client_secret
        self.developer_token = developer_token
        self.email = email
        self.encrypted_credential = encrypted_credential
        self.key_file_path = key_file_path
        self.refresh_token = refresh_token
        self.trusted_cert_path = trusted_cert_path
        self.use_system_trust_store = use_system_trust_store


class GoogleAdWordsObjectDataset(Dataset):
    """Google AdWords service dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(GoogleAdWordsObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'GoogleAdWordsObject'
        self.table_name = table_name


class GoogleBigQueryLinkedService(LinkedService):
    """Google BigQuery service linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param additional_projects: A comma-separated list of public BigQuery projects to access.
    :type additional_projects: object
    :param authentication_type: Required. The OAuth 2.0 authentication mechanism used for
     authentication. ServiceAuthentication can only be used on self-hosted IR. Possible values
     include: "ServiceAuthentication", "UserAuthentication".
    :type authentication_type: str or ~azure.synapse.models.GoogleBigQueryAuthenticationType
    :param client_id: The client id of the google application used to acquire the refresh token.
     Type: string (or Expression with resultType string).
    :type client_id: object
    :param client_secret: The client secret of the google application used to acquire the refresh
     token.
    :type client_secret: ~azure.synapse.models.SecretBase
    :param email: The service account email ID that is used for ServiceAuthentication and can only
     be used on self-hosted IR.
    :type email: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param key_file_path: The full path to the .p12 key file that is used to authenticate the
     service account email address and can only be used on self-hosted IR.
    :type key_file_path: object
    :param project: Required. The default BigQuery project to query against.
    :type project: object
    :param refresh_token: The refresh token obtained from Google for authorizing access to BigQuery
     for UserAuthentication.
    :type refresh_token: ~azure.synapse.models.SecretBase
    :param request_google_drive_scope: Whether to request access to Google Drive. Allowing Google
     Drive access enables support for federated tables that combine BigQuery data with data from
     Google Drive. The default value is false.
    :type request_google_drive_scope: object
    :param trusted_cert_path: The full path of the .pem file containing trusted CA certificates for
     verifying the server when connecting over SSL. This property can only be set when using SSL on
     self-hosted IR. The default value is the cacerts.pem file installed with the IR.
    :type trusted_cert_path: object
    :param use_system_trust_store: Specifies whether to use a CA certificate from the system trust
     store or from a specified PEM file. The default value is false.
    :type use_system_trust_store: object
    """

    _validation = {
        'type': {'required': True},
        'authentication_type': {'required': True},
        'project': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'additional_projects': {'key': 'typeProperties.additionalProjects', 'type': 'object'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'client_id': {'key': 'typeProperties.clientId', 'type': 'object'},
        'client_secret': {'key': 'typeProperties.clientSecret', 'type': 'SecretBase'},
        'email': {'key': 'typeProperties.email', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'key_file_path': {'key': 'typeProperties.keyFilePath', 'type': 'object'},
        'project': {'key': 'typeProperties.project', 'type': 'object'},
        'refresh_token': {'key': 'typeProperties.refreshToken', 'type': 'SecretBase'},
        'request_google_drive_scope': {'key': 'typeProperties.requestGoogleDriveScope', 'type': 'object'},
        'trusted_cert_path': {'key': 'typeProperties.trustedCertPath', 'type': 'object'},
        'use_system_trust_store': {'key': 'typeProperties.useSystemTrustStore', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        authentication_type: Union[str, "GoogleBigQueryAuthenticationType"],
        project: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        additional_projects: Optional[object] = None,
        client_id: Optional[object] = None,
        client_secret: Optional["SecretBase"] = None,
        email: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        key_file_path: Optional[object] = None,
        refresh_token: Optional["SecretBase"] = None,
        request_google_drive_scope: Optional[object] = None,
        trusted_cert_path: Optional[object] = None,
        use_system_trust_store: Optional[object] = None,
        **kwargs
    ):
        super(GoogleBigQueryLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'GoogleBigQuery'
        self.additional_projects = additional_projects
        self.authentication_type = authentication_type
        self.client_id = client_id
        self.client_secret = client_secret
        self.email = email
        self.encrypted_credential = encrypted_credential
        self.key_file_path = key_file_path
        self.project = project
        self.refresh_token = refresh_token
        self.request_google_drive_scope = request_google_drive_scope
        self.trusted_cert_path = trusted_cert_path
        self.use_system_trust_store = use_system_trust_store


class GoogleBigQueryObjectDataset(Dataset):
    """Google BigQuery service dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param dataset: The database name of the Google BigQuery. Type: string (or Expression with
     resultType string).
    :type dataset: object
    :param table: The table name of the Google BigQuery. Type: string (or Expression with
     resultType string).
    :type table: object
    :param table_name: This property will be retired. Please consider using database + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'dataset': {'key': 'typeProperties.dataset', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        dataset: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(GoogleBigQueryObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'GoogleBigQueryObject'
        self.dataset = dataset
        self.table = table
        self.table_name = table_name


class GoogleCloudStorageLinkedService(LinkedService):
    """Linked service for Google Cloud Storage.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param access_key_id: The access key identifier of the Google Cloud Storage Identity and Access
     Management (IAM) user. Type: string (or Expression with resultType string).
    :type access_key_id: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param secret_access_key: The secret access key of the Google Cloud Storage Identity and Access
     Management (IAM) user.
    :type secret_access_key: ~azure.synapse.models.SecretBase
    :param service_url: This value specifies the endpoint to access with the Google Cloud Storage
     Connector. This is an optional property; change it only if you want to try a different service
     endpoint or want to switch between https and http. Type: string (or Expression with resultType
     string).
    :type service_url: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'access_key_id': {'key': 'typeProperties.accessKeyId', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'secret_access_key': {'key': 'typeProperties.secretAccessKey', 'type': 'SecretBase'},
        'service_url': {'key': 'typeProperties.serviceUrl', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        access_key_id: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        secret_access_key: Optional["SecretBase"] = None,
        service_url: Optional[object] = None,
        **kwargs
    ):
        super(GoogleCloudStorageLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'GoogleCloudStorage'
        self.access_key_id = access_key_id
        self.encrypted_credential = encrypted_credential
        self.secret_access_key = secret_access_key
        self.service_url = service_url


class GreenplumLinkedService(LinkedService):
    """Greenplum Database linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: An ODBC connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param pwd: The Azure key vault secret reference of password in connection string.
    :type pwd: ~azure.synapse.models.AzureKeyVaultSecretReference
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'pwd': {'key': 'typeProperties.pwd', 'type': 'AzureKeyVaultSecretReference'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        connection_string: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        pwd: Optional["AzureKeyVaultSecretReference"] = None,
        **kwargs
    ):
        super(GreenplumLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Greenplum'
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.pwd = pwd


class GreenplumTableDataset(Dataset):
    """Greenplum Database dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of Greenplum. Type: string (or Expression
     with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of Greenplum. Type: string (or Expression with resultType string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(GreenplumTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'GreenplumTable'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class HBaseLinkedService(LinkedService):
    """HBase server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param allow_host_name_cn_mismatch: Specifies whether to require a CA-issued SSL certificate
     name to match the host name of the server when connecting over SSL. The default value is false.
    :type allow_host_name_cn_mismatch: object
    :param allow_self_signed_server_cert: Specifies whether to allow self-signed certificates from
     the server. The default value is false.
    :type allow_self_signed_server_cert: object
    :param authentication_type: Required. The authentication mechanism to use to connect to the
     HBase server. Possible values include: "Anonymous", "Basic".
    :type authentication_type: str or ~azure.synapse.models.HBaseAuthenticationType
    :param enable_ssl: Specifies whether the connections to the server are encrypted using SSL. The
     default value is false.
    :type enable_ssl: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. The IP address or host name of the HBase server. (i.e. 192.168.222.160).
    :type host: object
    :param http_path: The partial URL corresponding to the HBase server. (i.e.
     /gateway/sandbox/hbase/version).
    :type http_path: object
    :param password: The password corresponding to the user name.
    :type password: ~azure.synapse.models.SecretBase
    :param port: The TCP port that the HBase instance uses to listen for client connections. The
     default value is 9090.
    :type port: object
    :param trusted_cert_path: The full path of the .pem file containing trusted CA certificates for
     verifying the server when connecting over SSL. This property can only be set when using SSL on
     self-hosted IR. The default value is the cacerts.pem file installed with the IR.
    :type trusted_cert_path: object
    :param username: The user name used to connect to the HBase instance.
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'authentication_type': {'required': True},
        'host': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'allow_host_name_cn_mismatch': {'key': 'typeProperties.allowHostNameCNMismatch', 'type': 'object'},
        'allow_self_signed_server_cert': {'key': 'typeProperties.allowSelfSignedServerCert', 'type': 'object'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'enable_ssl': {'key': 'typeProperties.enableSsl', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'http_path': {'key': 'typeProperties.httpPath', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'port': {'key': 'typeProperties.port', 'type': 'object'},
        'trusted_cert_path': {'key': 'typeProperties.trustedCertPath', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        authentication_type: Union[str, "HBaseAuthenticationType"],
        host: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        allow_host_name_cn_mismatch: Optional[object] = None,
        allow_self_signed_server_cert: Optional[object] = None,
        enable_ssl: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        http_path: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        port: Optional[object] = None,
        trusted_cert_path: Optional[object] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(HBaseLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'HBase'
        self.allow_host_name_cn_mismatch = allow_host_name_cn_mismatch
        self.allow_self_signed_server_cert = allow_self_signed_server_cert
        self.authentication_type = authentication_type
        self.enable_ssl = enable_ssl
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.http_path = http_path
        self.password = password
        self.port = port
        self.trusted_cert_path = trusted_cert_path
        self.username = username


class HBaseObjectDataset(Dataset):
    """HBase server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(HBaseObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'HBaseObject'
        self.table_name = table_name


class HdfsLinkedService(LinkedService):
    """Hadoop Distributed File System (HDFS) linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param authentication_type: Type of authentication used to connect to the HDFS. Possible values
     are: Anonymous and Windows. Type: string (or Expression with resultType string).
    :type authentication_type: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: Password for Windows authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param url: Required. The URL of the HDFS service endpoint, e.g.
     http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
    :type url: object
    :param user_name: User name for Windows authentication. Type: string (or Expression with
     resultType string).
    :type user_name: object
    """

    _validation = {
        'type': {'required': True},
        'url': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'url': {'key': 'typeProperties.url', 'type': 'object'},
        'user_name': {'key': 'typeProperties.userName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        url: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        authentication_type: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        user_name: Optional[object] = None,
        **kwargs
    ):
        super(HdfsLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Hdfs'
        self.authentication_type = authentication_type
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.url = url
        self.user_name = user_name


class HDInsightHiveActivity(ExecutionActivity):
    """HDInsight Hive activity type.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param arguments: User specified arguments to HDInsightActivity.
    :type arguments: list[object]
    :param defines: Allows user to specify defines for Hive job request.
    :type defines: dict[str, object]
    :param get_debug_info: Debug info option. Possible values include: "None", "Always", "Failure".
    :type get_debug_info: str or ~azure.synapse.models.HDInsightActivityDebugInfoOption
    :param query_timeout: Query timeout value (in minutes).  Effective when the HDInsight cluster
     is with ESP (Enterprise Security Package).
    :type query_timeout: int
    :param script_linked_service: Script linked service reference.
    :type script_linked_service: ~azure.synapse.models.LinkedServiceReference
    :param script_path: Script path. Type: string (or Expression with resultType string).
    :type script_path: object
    :param storage_linked_services: Storage linked service references.
    :type storage_linked_services: list[~azure.synapse.models.LinkedServiceReference]
    :param variables: User specified arguments under hivevar namespace.
    :type variables: list[object]
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'arguments': {'key': 'typeProperties.arguments', 'type': '[object]'},
        'defines': {'key': 'typeProperties.defines', 'type': '{object}'},
        'get_debug_info': {'key': 'typeProperties.getDebugInfo', 'type': 'str'},
        'query_timeout': {'key': 'typeProperties.queryTimeout', 'type': 'int'},
        'script_linked_service': {'key': 'typeProperties.scriptLinkedService', 'type': 'LinkedServiceReference'},
        'script_path': {'key': 'typeProperties.scriptPath', 'type': 'object'},
        'storage_linked_services': {'key': 'typeProperties.storageLinkedServices', 'type': '[LinkedServiceReference]'},
        'variables': {'key': 'typeProperties.variables', 'type': '[object]'},
    }

    def __init__(
        self,
        *,
        name: str,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        arguments: Optional[List[object]] = None,
        defines: Optional[Dict[str, object]] = None,
        get_debug_info: Optional[Union[str, "HDInsightActivityDebugInfoOption"]] = None,
        query_timeout: Optional[int] = None,
        script_linked_service: Optional["LinkedServiceReference"] = None,
        script_path: Optional[object] = None,
        storage_linked_services: Optional[List["LinkedServiceReference"]] = None,
        variables: Optional[List[object]] = None,
        **kwargs
    ):
        super(HDInsightHiveActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'HDInsightHive'
        self.arguments = arguments
        self.defines = defines
        self.get_debug_info = get_debug_info
        self.query_timeout = query_timeout
        self.script_linked_service = script_linked_service
        self.script_path = script_path
        self.storage_linked_services = storage_linked_services
        self.variables = variables


class HDInsightLinkedService(LinkedService):
    """HDInsight linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param cluster_uri: Required. HDInsight cluster URI. Type: string (or Expression with
     resultType string).
    :type cluster_uri: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param file_system: Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2.
     Type: string (or Expression with resultType string).
    :type file_system: object
    :param hcatalog_linked_service_name: A reference to the Azure SQL linked service that points to
     the HCatalog database.
    :type hcatalog_linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param is_esp_enabled: Specify if the HDInsight is created with ESP (Enterprise Security
     Package). Type: Boolean.
    :type is_esp_enabled: object
    :param linked_service_name: The Azure Storage linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param password: HDInsight cluster password.
    :type password: ~azure.synapse.models.SecretBase
    :param user_name: HDInsight cluster user name. Type: string (or Expression with resultType
     string).
    :type user_name: object
    """

    _validation = {
        'type': {'required': True},
        'cluster_uri': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'cluster_uri': {'key': 'typeProperties.clusterUri', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'file_system': {'key': 'typeProperties.fileSystem', 'type': 'object'},
        'hcatalog_linked_service_name': {'key': 'typeProperties.hcatalogLinkedServiceName', 'type': 'LinkedServiceReference'},
        'is_esp_enabled': {'key': 'typeProperties.isEspEnabled', 'type': 'object'},
        'linked_service_name': {'key': 'typeProperties.linkedServiceName', 'type': 'LinkedServiceReference'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'user_name': {'key': 'typeProperties.userName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        cluster_uri: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        file_system: Optional[object] = None,
        hcatalog_linked_service_name: Optional["LinkedServiceReference"] = None,
        is_esp_enabled: Optional[object] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        password: Optional["SecretBase"] = None,
        user_name: Optional[object] = None,
        **kwargs
    ):
        super(HDInsightLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'HDInsight'
        self.cluster_uri = cluster_uri
        self.encrypted_credential = encrypted_credential
        self.file_system = file_system
        self.hcatalog_linked_service_name = hcatalog_linked_service_name
        self.is_esp_enabled = is_esp_enabled
        self.linked_service_name = linked_service_name
        self.password = password
        self.user_name = user_name


class HDInsightMapReduceActivity(ExecutionActivity):
    """HDInsight MapReduce activity type.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param arguments: User specified arguments to HDInsightActivity.
    :type arguments: list[object]
    :param class_name: Required. Class name. Type: string (or Expression with resultType string).
    :type class_name: object
    :param defines: Allows user to specify defines for the MapReduce job request.
    :type defines: dict[str, object]
    :param get_debug_info: Debug info option. Possible values include: "None", "Always", "Failure".
    :type get_debug_info: str or ~azure.synapse.models.HDInsightActivityDebugInfoOption
    :param jar_file_path: Required. Jar path. Type: string (or Expression with resultType string).
    :type jar_file_path: object
    :param jar_libs: Jar libs.
    :type jar_libs: list[object]
    :param jar_linked_service: Jar linked service reference.
    :type jar_linked_service: ~azure.synapse.models.LinkedServiceReference
    :param storage_linked_services: Storage linked service references.
    :type storage_linked_services: list[~azure.synapse.models.LinkedServiceReference]
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'class_name': {'required': True},
        'jar_file_path': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'arguments': {'key': 'typeProperties.arguments', 'type': '[object]'},
        'class_name': {'key': 'typeProperties.className', 'type': 'object'},
        'defines': {'key': 'typeProperties.defines', 'type': '{object}'},
        'get_debug_info': {'key': 'typeProperties.getDebugInfo', 'type': 'str'},
        'jar_file_path': {'key': 'typeProperties.jarFilePath', 'type': 'object'},
        'jar_libs': {'key': 'typeProperties.jarLibs', 'type': '[object]'},
        'jar_linked_service': {'key': 'typeProperties.jarLinkedService', 'type': 'LinkedServiceReference'},
        'storage_linked_services': {'key': 'typeProperties.storageLinkedServices', 'type': '[LinkedServiceReference]'},
    }

    def __init__(
        self,
        *,
        name: str,
        class_name: object,
        jar_file_path: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        arguments: Optional[List[object]] = None,
        defines: Optional[Dict[str, object]] = None,
        get_debug_info: Optional[Union[str, "HDInsightActivityDebugInfoOption"]] = None,
        jar_libs: Optional[List[object]] = None,
        jar_linked_service: Optional["LinkedServiceReference"] = None,
        storage_linked_services: Optional[List["LinkedServiceReference"]] = None,
        **kwargs
    ):
        super(HDInsightMapReduceActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'HDInsightMapReduce'
        self.arguments = arguments
        self.class_name = class_name
        self.defines = defines
        self.get_debug_info = get_debug_info
        self.jar_file_path = jar_file_path
        self.jar_libs = jar_libs
        self.jar_linked_service = jar_linked_service
        self.storage_linked_services = storage_linked_services


class HDInsightOnDemandLinkedService(LinkedService):
    """HDInsight ondemand linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param additional_linked_service_names: Specifies additional storage accounts for the HDInsight
     linked service so that the Data Factory service can register them on your behalf.
    :type additional_linked_service_names: list[~azure.synapse.models.LinkedServiceReference]
    :param cluster_name_prefix: The prefix of cluster name, postfix will be distinct with
     timestamp. Type: string (or Expression with resultType string).
    :type cluster_name_prefix: object
    :param cluster_password: The password to access the cluster.
    :type cluster_password: ~azure.synapse.models.SecretBase
    :param cluster_resource_group: Required. The resource group where the cluster belongs. Type:
     string (or Expression with resultType string).
    :type cluster_resource_group: object
    :param cluster_size: Required. Number of worker/data nodes in the cluster. Suggestion value: 4.
     Type: string (or Expression with resultType string).
    :type cluster_size: object
    :param cluster_ssh_password: The password to SSH remotely connect cluster’s node (for Linux).
    :type cluster_ssh_password: ~azure.synapse.models.SecretBase
    :param cluster_ssh_user_name: The username to SSH remotely connect to cluster’s node (for
     Linux). Type: string (or Expression with resultType string).
    :type cluster_ssh_user_name: object
    :param cluster_type: The cluster type. Type: string (or Expression with resultType string).
    :type cluster_type: object
    :param cluster_user_name: The username to access the cluster. Type: string (or Expression with
     resultType string).
    :type cluster_user_name: object
    :param core_configuration: Specifies the core configuration parameters (as in core-site.xml)
     for the HDInsight cluster to be created.
    :type core_configuration: object
    :param data_node_size: Specifies the size of the data node for the HDInsight cluster.
    :type data_node_size: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param h_base_configuration: Specifies the HBase configuration parameters (hbase-site.xml) for
     the HDInsight cluster.
    :type h_base_configuration: object
    :param hcatalog_linked_service_name: The name of Azure SQL linked service that point to the
     HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database
     as the metastore.
    :type hcatalog_linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param hdfs_configuration: Specifies the HDFS configuration parameters (hdfs-site.xml) for the
     HDInsight cluster.
    :type hdfs_configuration: object
    :param head_node_size: Specifies the size of the head node for the HDInsight cluster.
    :type head_node_size: object
    :param hive_configuration: Specifies the hive configuration parameters (hive-site.xml) for the
     HDInsight cluster.
    :type hive_configuration: object
    :param host_subscription_id: Required. The customer’s subscription to host the cluster. Type:
     string (or Expression with resultType string).
    :type host_subscription_id: object
    :param linked_service_name: Required. Azure Storage linked service to be used by the on-demand
     cluster for storing and processing data.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param map_reduce_configuration: Specifies the MapReduce configuration parameters (mapred-
     site.xml) for the HDInsight cluster.
    :type map_reduce_configuration: object
    :param oozie_configuration: Specifies the Oozie configuration parameters (oozie-site.xml) for
     the HDInsight cluster.
    :type oozie_configuration: object
    :param script_actions: Custom script actions to run on HDI ondemand cluster once it's up.
     Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-
     cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-
     us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
    :type script_actions: list[~azure.synapse.models.ScriptAction]
    :param service_principal_id: The service principal id for the hostSubscriptionId. Type: string
     (or Expression with resultType string).
    :type service_principal_id: object
    :param service_principal_key: The key for the service principal id.
    :type service_principal_key: ~azure.synapse.models.SecretBase
    :param spark_version: The version of spark if the cluster type is 'spark'. Type: string (or
     Expression with resultType string).
    :type spark_version: object
    :param storm_configuration: Specifies the Storm configuration parameters (storm-site.xml) for
     the HDInsight cluster.
    :type storm_configuration: object
    :param subnet_name: The ARM resource ID for the subnet in the vNet. If virtualNetworkId was
     specified, then this property is required. Type: string (or Expression with resultType string).
    :type subnet_name: object
    :param tenant: Required. The Tenant id/name to which the service principal belongs. Type:
     string (or Expression with resultType string).
    :type tenant: object
    :param time_to_live: Required. The allowed idle time for the on-demand HDInsight cluster.
     Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity
     run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string
     (or Expression with resultType string).
    :type time_to_live: object
    :param version: Required. Version of the HDInsight cluster.  Type: string (or Expression with
     resultType string).
    :type version: object
    :param virtual_network_id: The ARM resource ID for the vNet to which the cluster should be
     joined after creation. Type: string (or Expression with resultType string).
    :type virtual_network_id: object
    :param yarn_configuration: Specifies the Yarn configuration parameters (yarn-site.xml) for the
     HDInsight cluster.
    :type yarn_configuration: object
    :param zookeeper_node_size: Specifies the size of the Zoo Keeper node for the HDInsight
     cluster.
    :type zookeeper_node_size: object
    """

    _validation = {
        'type': {'required': True},
        'cluster_resource_group': {'required': True},
        'cluster_size': {'required': True},
        'host_subscription_id': {'required': True},
        'linked_service_name': {'required': True},
        'tenant': {'required': True},
        'time_to_live': {'required': True},
        'version': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'additional_linked_service_names': {'key': 'typeProperties.additionalLinkedServiceNames', 'type': '[LinkedServiceReference]'},
        'cluster_name_prefix': {'key': 'typeProperties.clusterNamePrefix', 'type': 'object'},
        'cluster_password': {'key': 'typeProperties.clusterPassword', 'type': 'SecretBase'},
        'cluster_resource_group': {'key': 'typeProperties.clusterResourceGroup', 'type': 'object'},
        'cluster_size': {'key': 'typeProperties.clusterSize', 'type': 'object'},
        'cluster_ssh_password': {'key': 'typeProperties.clusterSshPassword', 'type': 'SecretBase'},
        'cluster_ssh_user_name': {'key': 'typeProperties.clusterSshUserName', 'type': 'object'},
        'cluster_type': {'key': 'typeProperties.clusterType', 'type': 'object'},
        'cluster_user_name': {'key': 'typeProperties.clusterUserName', 'type': 'object'},
        'core_configuration': {'key': 'typeProperties.coreConfiguration', 'type': 'object'},
        'data_node_size': {'key': 'typeProperties.dataNodeSize', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'h_base_configuration': {'key': 'typeProperties.hBaseConfiguration', 'type': 'object'},
        'hcatalog_linked_service_name': {'key': 'typeProperties.hcatalogLinkedServiceName', 'type': 'LinkedServiceReference'},
        'hdfs_configuration': {'key': 'typeProperties.hdfsConfiguration', 'type': 'object'},
        'head_node_size': {'key': 'typeProperties.headNodeSize', 'type': 'object'},
        'hive_configuration': {'key': 'typeProperties.hiveConfiguration', 'type': 'object'},
        'host_subscription_id': {'key': 'typeProperties.hostSubscriptionId', 'type': 'object'},
        'linked_service_name': {'key': 'typeProperties.linkedServiceName', 'type': 'LinkedServiceReference'},
        'map_reduce_configuration': {'key': 'typeProperties.mapReduceConfiguration', 'type': 'object'},
        'oozie_configuration': {'key': 'typeProperties.oozieConfiguration', 'type': 'object'},
        'script_actions': {'key': 'typeProperties.scriptActions', 'type': '[ScriptAction]'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_principal_key': {'key': 'typeProperties.servicePrincipalKey', 'type': 'SecretBase'},
        'spark_version': {'key': 'typeProperties.sparkVersion', 'type': 'object'},
        'storm_configuration': {'key': 'typeProperties.stormConfiguration', 'type': 'object'},
        'subnet_name': {'key': 'typeProperties.subnetName', 'type': 'object'},
        'tenant': {'key': 'typeProperties.tenant', 'type': 'object'},
        'time_to_live': {'key': 'typeProperties.timeToLive', 'type': 'object'},
        'version': {'key': 'typeProperties.version', 'type': 'object'},
        'virtual_network_id': {'key': 'typeProperties.virtualNetworkId', 'type': 'object'},
        'yarn_configuration': {'key': 'typeProperties.yarnConfiguration', 'type': 'object'},
        'zookeeper_node_size': {'key': 'typeProperties.zookeeperNodeSize', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        cluster_resource_group: object,
        cluster_size: object,
        host_subscription_id: object,
        linked_service_name: "LinkedServiceReference",
        tenant: object,
        time_to_live: object,
        version: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        additional_linked_service_names: Optional[List["LinkedServiceReference"]] = None,
        cluster_name_prefix: Optional[object] = None,
        cluster_password: Optional["SecretBase"] = None,
        cluster_ssh_password: Optional["SecretBase"] = None,
        cluster_ssh_user_name: Optional[object] = None,
        cluster_type: Optional[object] = None,
        cluster_user_name: Optional[object] = None,
        core_configuration: Optional[object] = None,
        data_node_size: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        h_base_configuration: Optional[object] = None,
        hcatalog_linked_service_name: Optional["LinkedServiceReference"] = None,
        hdfs_configuration: Optional[object] = None,
        head_node_size: Optional[object] = None,
        hive_configuration: Optional[object] = None,
        map_reduce_configuration: Optional[object] = None,
        oozie_configuration: Optional[object] = None,
        script_actions: Optional[List["ScriptAction"]] = None,
        service_principal_id: Optional[object] = None,
        service_principal_key: Optional["SecretBase"] = None,
        spark_version: Optional[object] = None,
        storm_configuration: Optional[object] = None,
        subnet_name: Optional[object] = None,
        virtual_network_id: Optional[object] = None,
        yarn_configuration: Optional[object] = None,
        zookeeper_node_size: Optional[object] = None,
        **kwargs
    ):
        super(HDInsightOnDemandLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'HDInsightOnDemand'
        self.additional_linked_service_names = additional_linked_service_names
        self.cluster_name_prefix = cluster_name_prefix
        self.cluster_password = cluster_password
        self.cluster_resource_group = cluster_resource_group
        self.cluster_size = cluster_size
        self.cluster_ssh_password = cluster_ssh_password
        self.cluster_ssh_user_name = cluster_ssh_user_name
        self.cluster_type = cluster_type
        self.cluster_user_name = cluster_user_name
        self.core_configuration = core_configuration
        self.data_node_size = data_node_size
        self.encrypted_credential = encrypted_credential
        self.h_base_configuration = h_base_configuration
        self.hcatalog_linked_service_name = hcatalog_linked_service_name
        self.hdfs_configuration = hdfs_configuration
        self.head_node_size = head_node_size
        self.hive_configuration = hive_configuration
        self.host_subscription_id = host_subscription_id
        self.linked_service_name = linked_service_name
        self.map_reduce_configuration = map_reduce_configuration
        self.oozie_configuration = oozie_configuration
        self.script_actions = script_actions
        self.service_principal_id = service_principal_id
        self.service_principal_key = service_principal_key
        self.spark_version = spark_version
        self.storm_configuration = storm_configuration
        self.subnet_name = subnet_name
        self.tenant = tenant
        self.time_to_live = time_to_live
        self.version = version
        self.virtual_network_id = virtual_network_id
        self.yarn_configuration = yarn_configuration
        self.zookeeper_node_size = zookeeper_node_size


class HDInsightPigActivity(ExecutionActivity):
    """HDInsight Pig activity type.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param arguments: User specified arguments to HDInsightActivity. Type: array (or Expression
     with resultType array).
    :type arguments: object
    :param defines: Allows user to specify defines for Pig job request.
    :type defines: dict[str, object]
    :param get_debug_info: Debug info option. Possible values include: "None", "Always", "Failure".
    :type get_debug_info: str or ~azure.synapse.models.HDInsightActivityDebugInfoOption
    :param script_linked_service: Script linked service reference.
    :type script_linked_service: ~azure.synapse.models.LinkedServiceReference
    :param script_path: Script path. Type: string (or Expression with resultType string).
    :type script_path: object
    :param storage_linked_services: Storage linked service references.
    :type storage_linked_services: list[~azure.synapse.models.LinkedServiceReference]
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'arguments': {'key': 'typeProperties.arguments', 'type': 'object'},
        'defines': {'key': 'typeProperties.defines', 'type': '{object}'},
        'get_debug_info': {'key': 'typeProperties.getDebugInfo', 'type': 'str'},
        'script_linked_service': {'key': 'typeProperties.scriptLinkedService', 'type': 'LinkedServiceReference'},
        'script_path': {'key': 'typeProperties.scriptPath', 'type': 'object'},
        'storage_linked_services': {'key': 'typeProperties.storageLinkedServices', 'type': '[LinkedServiceReference]'},
    }

    def __init__(
        self,
        *,
        name: str,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        arguments: Optional[object] = None,
        defines: Optional[Dict[str, object]] = None,
        get_debug_info: Optional[Union[str, "HDInsightActivityDebugInfoOption"]] = None,
        script_linked_service: Optional["LinkedServiceReference"] = None,
        script_path: Optional[object] = None,
        storage_linked_services: Optional[List["LinkedServiceReference"]] = None,
        **kwargs
    ):
        super(HDInsightPigActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'HDInsightPig'
        self.arguments = arguments
        self.defines = defines
        self.get_debug_info = get_debug_info
        self.script_linked_service = script_linked_service
        self.script_path = script_path
        self.storage_linked_services = storage_linked_services


class HDInsightSparkActivity(ExecutionActivity):
    """HDInsight Spark activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param arguments: The user-specified arguments to HDInsightSparkActivity.
    :type arguments: list[object]
    :param class_name: The application's Java/Spark main class.
    :type class_name: str
    :param entry_file_path: Required. The relative path to the root folder of the code/package to
     be executed. Type: string (or Expression with resultType string).
    :type entry_file_path: object
    :param get_debug_info: Debug info option. Possible values include: "None", "Always", "Failure".
    :type get_debug_info: str or ~azure.synapse.models.HDInsightActivityDebugInfoOption
    :param proxy_user: The user to impersonate that will execute the job. Type: string (or
     Expression with resultType string).
    :type proxy_user: object
    :param root_path: Required. The root path in 'sparkJobLinkedService' for all the job’s files.
     Type: string (or Expression with resultType string).
    :type root_path: object
    :param spark_config: Spark configuration property.
    :type spark_config: dict[str, object]
    :param spark_job_linked_service: The storage linked service for uploading the entry file and
     dependencies, and for receiving logs.
    :type spark_job_linked_service: ~azure.synapse.models.LinkedServiceReference
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'entry_file_path': {'required': True},
        'root_path': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'arguments': {'key': 'typeProperties.arguments', 'type': '[object]'},
        'class_name': {'key': 'typeProperties.className', 'type': 'str'},
        'entry_file_path': {'key': 'typeProperties.entryFilePath', 'type': 'object'},
        'get_debug_info': {'key': 'typeProperties.getDebugInfo', 'type': 'str'},
        'proxy_user': {'key': 'typeProperties.proxyUser', 'type': 'object'},
        'root_path': {'key': 'typeProperties.rootPath', 'type': 'object'},
        'spark_config': {'key': 'typeProperties.sparkConfig', 'type': '{object}'},
        'spark_job_linked_service': {'key': 'typeProperties.sparkJobLinkedService', 'type': 'LinkedServiceReference'},
    }

    def __init__(
        self,
        *,
        name: str,
        entry_file_path: object,
        root_path: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        arguments: Optional[List[object]] = None,
        class_name: Optional[str] = None,
        get_debug_info: Optional[Union[str, "HDInsightActivityDebugInfoOption"]] = None,
        proxy_user: Optional[object] = None,
        spark_config: Optional[Dict[str, object]] = None,
        spark_job_linked_service: Optional["LinkedServiceReference"] = None,
        **kwargs
    ):
        super(HDInsightSparkActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'HDInsightSpark'
        self.arguments = arguments
        self.class_name = class_name
        self.entry_file_path = entry_file_path
        self.get_debug_info = get_debug_info
        self.proxy_user = proxy_user
        self.root_path = root_path
        self.spark_config = spark_config
        self.spark_job_linked_service = spark_job_linked_service


class HDInsightStreamingActivity(ExecutionActivity):
    """HDInsight streaming activity type.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param arguments: User specified arguments to HDInsightActivity.
    :type arguments: list[object]
    :param combiner: Combiner executable name. Type: string (or Expression with resultType string).
    :type combiner: object
    :param command_environment: Command line environment values.
    :type command_environment: list[object]
    :param defines: Allows user to specify defines for streaming job request.
    :type defines: dict[str, object]
    :param file_linked_service: Linked service reference where the files are located.
    :type file_linked_service: ~azure.synapse.models.LinkedServiceReference
    :param file_paths: Required. Paths to streaming job files. Can be directories.
    :type file_paths: list[object]
    :param get_debug_info: Debug info option. Possible values include: "None", "Always", "Failure".
    :type get_debug_info: str or ~azure.synapse.models.HDInsightActivityDebugInfoOption
    :param input: Required. Input blob path. Type: string (or Expression with resultType string).
    :type input: object
    :param mapper: Required. Mapper executable name. Type: string (or Expression with resultType
     string).
    :type mapper: object
    :param output: Required. Output blob path. Type: string (or Expression with resultType string).
    :type output: object
    :param reducer: Required. Reducer executable name. Type: string (or Expression with resultType
     string).
    :type reducer: object
    :param storage_linked_services: Storage linked service references.
    :type storage_linked_services: list[~azure.synapse.models.LinkedServiceReference]
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'file_paths': {'required': True},
        'input': {'required': True},
        'mapper': {'required': True},
        'output': {'required': True},
        'reducer': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'arguments': {'key': 'typeProperties.arguments', 'type': '[object]'},
        'combiner': {'key': 'typeProperties.combiner', 'type': 'object'},
        'command_environment': {'key': 'typeProperties.commandEnvironment', 'type': '[object]'},
        'defines': {'key': 'typeProperties.defines', 'type': '{object}'},
        'file_linked_service': {'key': 'typeProperties.fileLinkedService', 'type': 'LinkedServiceReference'},
        'file_paths': {'key': 'typeProperties.filePaths', 'type': '[object]'},
        'get_debug_info': {'key': 'typeProperties.getDebugInfo', 'type': 'str'},
        'input': {'key': 'typeProperties.input', 'type': 'object'},
        'mapper': {'key': 'typeProperties.mapper', 'type': 'object'},
        'output': {'key': 'typeProperties.output', 'type': 'object'},
        'reducer': {'key': 'typeProperties.reducer', 'type': 'object'},
        'storage_linked_services': {'key': 'typeProperties.storageLinkedServices', 'type': '[LinkedServiceReference]'},
    }

    def __init__(
        self,
        *,
        name: str,
        file_paths: List[object],
        input: object,
        mapper: object,
        output: object,
        reducer: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        arguments: Optional[List[object]] = None,
        combiner: Optional[object] = None,
        command_environment: Optional[List[object]] = None,
        defines: Optional[Dict[str, object]] = None,
        file_linked_service: Optional["LinkedServiceReference"] = None,
        get_debug_info: Optional[Union[str, "HDInsightActivityDebugInfoOption"]] = None,
        storage_linked_services: Optional[List["LinkedServiceReference"]] = None,
        **kwargs
    ):
        super(HDInsightStreamingActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'HDInsightStreaming'
        self.arguments = arguments
        self.combiner = combiner
        self.command_environment = command_environment
        self.defines = defines
        self.file_linked_service = file_linked_service
        self.file_paths = file_paths
        self.get_debug_info = get_debug_info
        self.input = input
        self.mapper = mapper
        self.output = output
        self.reducer = reducer
        self.storage_linked_services = storage_linked_services


class HistoryServerDataResponse(msrest.serialization.Model):
    """HistoryServerDataResponse.

    :param data:
    :type data: ~azure.synapse.models.Data
    """

    _attribute_map = {
        'data': {'key': 'data', 'type': 'Data'},
    }

    def __init__(
        self,
        *,
        data: Optional["Data"] = None,
        **kwargs
    ):
        super(HistoryServerDataResponse, self).__init__(**kwargs)
        self.data = data


class HistoryServerDiagnosticResponse(msrest.serialization.Model):
    """HistoryServerDiagnosticResponse.

    :param data:
    :type data: ~azure.synapse.models.HistoryServerDiagnosticResponseData
    """

    _attribute_map = {
        'data': {'key': 'data', 'type': 'HistoryServerDiagnosticResponseData'},
    }

    def __init__(
        self,
        *,
        data: Optional["HistoryServerDiagnosticResponseData"] = None,
        **kwargs
    ):
        super(HistoryServerDiagnosticResponse, self).__init__(**kwargs)
        self.data = data


class HistoryServerDiagnosticResponseData(msrest.serialization.Model):
    """HistoryServerDiagnosticResponseData.

    :param executors:
    :type executors: ~azure.synapse.models.Executors
    :param stages:
    :type stages: ~azure.synapse.models.Stages
    """

    _attribute_map = {
        'executors': {'key': 'executors', 'type': 'Executors'},
        'stages': {'key': 'stages', 'type': 'Stages'},
    }

    def __init__(
        self,
        *,
        executors: Optional["Executors"] = None,
        stages: Optional["Stages"] = None,
        **kwargs
    ):
        super(HistoryServerDiagnosticResponseData, self).__init__(**kwargs)
        self.executors = executors
        self.stages = stages


class HistoryServerGraphResponse(msrest.serialization.Model):
    """HistoryServerGraphResponse.

    :param data:
    :type data: ~azure.synapse.models.HistoryServerGraphResponseData
    """

    _attribute_map = {
        'data': {'key': 'data', 'type': 'HistoryServerGraphResponseData'},
    }

    def __init__(
        self,
        *,
        data: Optional["HistoryServerGraphResponseData"] = None,
        **kwargs
    ):
        super(HistoryServerGraphResponse, self).__init__(**kwargs)
        self.data = data


class HistoryServerGraphResponseData(msrest.serialization.Model):
    """HistoryServerGraphResponseData.

    :param is_app_finished:
    :type is_app_finished: bool
    :param jobs:
    :type jobs: ~azure.synapse.models.Jobs
    :param stages:
    :type stages: ~azure.synapse.models.Stages
    """

    _attribute_map = {
        'is_app_finished': {'key': 'isAppFinished', 'type': 'bool'},
        'jobs': {'key': 'jobs', 'type': 'Jobs'},
        'stages': {'key': 'stages', 'type': 'Stages'},
    }

    def __init__(
        self,
        *,
        is_app_finished: Optional[bool] = None,
        jobs: Optional["Jobs"] = None,
        stages: Optional["Stages"] = None,
        **kwargs
    ):
        super(HistoryServerGraphResponseData, self).__init__(**kwargs)
        self.is_app_finished = is_app_finished
        self.jobs = jobs
        self.stages = stages


class HistoryServerPropertiesResponse(msrest.serialization.Model):
    """HistoryServerPropertiesResponse.

    :param web_proxy_endpoint:
    :type web_proxy_endpoint: str
    """

    _attribute_map = {
        'web_proxy_endpoint': {'key': 'webProxyEndpoint', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        web_proxy_endpoint: Optional[str] = None,
        **kwargs
    ):
        super(HistoryServerPropertiesResponse, self).__init__(**kwargs)
        self.web_proxy_endpoint = web_proxy_endpoint


class HiveLinkedService(LinkedService):
    """Hive Server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param allow_host_name_cn_mismatch: Specifies whether to require a CA-issued SSL certificate
     name to match the host name of the server when connecting over SSL. The default value is false.
    :type allow_host_name_cn_mismatch: object
    :param allow_self_signed_server_cert: Specifies whether to allow self-signed certificates from
     the server. The default value is false.
    :type allow_self_signed_server_cert: object
    :param authentication_type: Required. The authentication method used to access the Hive server.
     Possible values include: "Anonymous", "Username", "UsernameAndPassword",
     "WindowsAzureHDInsightService".
    :type authentication_type: str or ~azure.synapse.models.HiveAuthenticationType
    :param enable_ssl: Specifies whether the connections to the server are encrypted using SSL. The
     default value is false.
    :type enable_ssl: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. IP address or host name of the Hive server, separated by ';' for
     multiple hosts (only when serviceDiscoveryMode is enable).
    :type host: object
    :param http_path: The partial URL corresponding to the Hive server.
    :type http_path: object
    :param password: The password corresponding to the user name that you provided in the Username
     field.
    :type password: ~azure.synapse.models.SecretBase
    :param port: The TCP port that the Hive server uses to listen for client connections.
    :type port: object
    :param server_type: The type of Hive server. Possible values include: "HiveServer1",
     "HiveServer2", "HiveThriftServer".
    :type server_type: str or ~azure.synapse.models.HiveServerType
    :param service_discovery_mode: true to indicate using the ZooKeeper service, false not.
    :type service_discovery_mode: object
    :param thrift_transport_protocol: The transport protocol to use in the Thrift layer. Possible
     values include: "Binary", "SASL", "HTTP ".
    :type thrift_transport_protocol: str or ~azure.synapse.models.HiveThriftTransportProtocol
    :param trusted_cert_path: The full path of the .pem file containing trusted CA certificates for
     verifying the server when connecting over SSL. This property can only be set when using SSL on
     self-hosted IR. The default value is the cacerts.pem file installed with the IR.
    :type trusted_cert_path: object
    :param use_native_query: Specifies whether the driver uses native HiveQL queries,or converts
     them into an equivalent form in HiveQL.
    :type use_native_query: object
    :param use_system_trust_store: Specifies whether to use a CA certificate from the system trust
     store or from a specified PEM file. The default value is false.
    :type use_system_trust_store: object
    :param username: The user name that you use to access Hive Server.
    :type username: object
    :param zoo_keeper_name_space: The namespace on ZooKeeper under which Hive Server 2 nodes are
     added.
    :type zoo_keeper_name_space: object
    """

    _validation = {
        'type': {'required': True},
        'authentication_type': {'required': True},
        'host': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'allow_host_name_cn_mismatch': {'key': 'typeProperties.allowHostNameCNMismatch', 'type': 'object'},
        'allow_self_signed_server_cert': {'key': 'typeProperties.allowSelfSignedServerCert', 'type': 'object'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'enable_ssl': {'key': 'typeProperties.enableSsl', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'http_path': {'key': 'typeProperties.httpPath', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'port': {'key': 'typeProperties.port', 'type': 'object'},
        'server_type': {'key': 'typeProperties.serverType', 'type': 'str'},
        'service_discovery_mode': {'key': 'typeProperties.serviceDiscoveryMode', 'type': 'object'},
        'thrift_transport_protocol': {'key': 'typeProperties.thriftTransportProtocol', 'type': 'str'},
        'trusted_cert_path': {'key': 'typeProperties.trustedCertPath', 'type': 'object'},
        'use_native_query': {'key': 'typeProperties.useNativeQuery', 'type': 'object'},
        'use_system_trust_store': {'key': 'typeProperties.useSystemTrustStore', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
        'zoo_keeper_name_space': {'key': 'typeProperties.zooKeeperNameSpace', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        authentication_type: Union[str, "HiveAuthenticationType"],
        host: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        allow_host_name_cn_mismatch: Optional[object] = None,
        allow_self_signed_server_cert: Optional[object] = None,
        enable_ssl: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        http_path: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        port: Optional[object] = None,
        server_type: Optional[Union[str, "HiveServerType"]] = None,
        service_discovery_mode: Optional[object] = None,
        thrift_transport_protocol: Optional[Union[str, "HiveThriftTransportProtocol"]] = None,
        trusted_cert_path: Optional[object] = None,
        use_native_query: Optional[object] = None,
        use_system_trust_store: Optional[object] = None,
        username: Optional[object] = None,
        zoo_keeper_name_space: Optional[object] = None,
        **kwargs
    ):
        super(HiveLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Hive'
        self.allow_host_name_cn_mismatch = allow_host_name_cn_mismatch
        self.allow_self_signed_server_cert = allow_self_signed_server_cert
        self.authentication_type = authentication_type
        self.enable_ssl = enable_ssl
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.http_path = http_path
        self.password = password
        self.port = port
        self.server_type = server_type
        self.service_discovery_mode = service_discovery_mode
        self.thrift_transport_protocol = thrift_transport_protocol
        self.trusted_cert_path = trusted_cert_path
        self.use_native_query = use_native_query
        self.use_system_trust_store = use_system_trust_store
        self.username = username
        self.zoo_keeper_name_space = zoo_keeper_name_space


class HiveObjectDataset(Dataset):
    """Hive Server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of the Hive. Type: string (or Expression
     with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of the Hive. Type: string (or Expression with resultType string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(HiveObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'HiveObject'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class HttpLinkedService(LinkedService):
    """Linked service for an HTTP source.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param authentication_type: The authentication type to be used to connect to the HTTP server.
     Possible values include: "Basic", "Anonymous", "Digest", "Windows", "ClientCertificate".
    :type authentication_type: str or ~azure.synapse.models.HttpAuthenticationType
    :param cert_thumbprint: Thumbprint of certificate for ClientCertificate authentication. Only
     valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either
     CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression
     with resultType string).
    :type cert_thumbprint: object
    :param embedded_cert_data: Base64 encoded certificate data for ClientCertificate
     authentication. For on-premises copy with ClientCertificate authentication, either
     CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression
     with resultType string).
    :type embedded_cert_data: object
    :param enable_server_certificate_validation: If true, validate the HTTPS server SSL
     certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
    :type enable_server_certificate_validation: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: Password for Basic, Digest, Windows, or ClientCertificate with
     EmbeddedCertData authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param url: Required. The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type:
     string (or Expression with resultType string).
    :type url: object
    :param user_name: User name for Basic, Digest, or Windows authentication. Type: string (or
     Expression with resultType string).
    :type user_name: object
    """

    _validation = {
        'type': {'required': True},
        'url': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'cert_thumbprint': {'key': 'typeProperties.certThumbprint', 'type': 'object'},
        'embedded_cert_data': {'key': 'typeProperties.embeddedCertData', 'type': 'object'},
        'enable_server_certificate_validation': {'key': 'typeProperties.enableServerCertificateValidation', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'url': {'key': 'typeProperties.url', 'type': 'object'},
        'user_name': {'key': 'typeProperties.userName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        url: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        authentication_type: Optional[Union[str, "HttpAuthenticationType"]] = None,
        cert_thumbprint: Optional[object] = None,
        embedded_cert_data: Optional[object] = None,
        enable_server_certificate_validation: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        user_name: Optional[object] = None,
        **kwargs
    ):
        super(HttpLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'HttpServer'
        self.authentication_type = authentication_type
        self.cert_thumbprint = cert_thumbprint
        self.embedded_cert_data = embedded_cert_data
        self.enable_server_certificate_validation = enable_server_certificate_validation
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.url = url
        self.user_name = user_name


class HubspotLinkedService(LinkedService):
    """Hubspot Service linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param access_token: The access token obtained when initially authenticating your OAuth
     integration.
    :type access_token: ~azure.synapse.models.SecretBase
    :param client_id: Required. The client ID associated with your Hubspot application.
    :type client_id: object
    :param client_secret: The client secret associated with your Hubspot application.
    :type client_secret: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param refresh_token: The refresh token obtained when initially authenticating your OAuth
     integration.
    :type refresh_token: ~azure.synapse.models.SecretBase
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true.
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true.
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true.
    :type use_peer_verification: object
    """

    _validation = {
        'type': {'required': True},
        'client_id': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'access_token': {'key': 'typeProperties.accessToken', 'type': 'SecretBase'},
        'client_id': {'key': 'typeProperties.clientId', 'type': 'object'},
        'client_secret': {'key': 'typeProperties.clientSecret', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'refresh_token': {'key': 'typeProperties.refreshToken', 'type': 'SecretBase'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        client_id: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        access_token: Optional["SecretBase"] = None,
        client_secret: Optional["SecretBase"] = None,
        encrypted_credential: Optional[object] = None,
        refresh_token: Optional["SecretBase"] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        **kwargs
    ):
        super(HubspotLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Hubspot'
        self.access_token = access_token
        self.client_id = client_id
        self.client_secret = client_secret
        self.encrypted_credential = encrypted_credential
        self.refresh_token = refresh_token
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification


class HubspotObjectDataset(Dataset):
    """Hubspot Service dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(HubspotObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'HubspotObject'
        self.table_name = table_name


class IfConditionActivity(Activity):
    """This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities property or the ifFalseActivities property depending on the result of the expression.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param expression: Required. An expression that would evaluate to Boolean. This is used to
     determine the block of activities (ifTrueActivities or ifFalseActivities) that will be
     executed.
    :type expression: ~azure.synapse.models.Expression
    :param if_false_activities: List of activities to execute if expression is evaluated to false.
     This is an optional property and if not provided, the activity will exit without any action.
    :type if_false_activities: list[~azure.synapse.models.Activity]
    :param if_true_activities: List of activities to execute if expression is evaluated to true.
     This is an optional property and if not provided, the activity will exit without any action.
    :type if_true_activities: list[~azure.synapse.models.Activity]
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'expression': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'expression': {'key': 'typeProperties.expression', 'type': 'Expression'},
        'if_false_activities': {'key': 'typeProperties.ifFalseActivities', 'type': '[Activity]'},
        'if_true_activities': {'key': 'typeProperties.ifTrueActivities', 'type': '[Activity]'},
    }

    def __init__(
        self,
        *,
        name: str,
        expression: "Expression",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        if_false_activities: Optional[List["Activity"]] = None,
        if_true_activities: Optional[List["Activity"]] = None,
        **kwargs
    ):
        super(IfConditionActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, **kwargs)
        self.type = 'IfCondition'
        self.expression = expression
        self.if_false_activities = if_false_activities
        self.if_true_activities = if_true_activities


class ImpalaLinkedService(LinkedService):
    """Impala server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param allow_host_name_cn_mismatch: Specifies whether to require a CA-issued SSL certificate
     name to match the host name of the server when connecting over SSL. The default value is false.
    :type allow_host_name_cn_mismatch: object
    :param allow_self_signed_server_cert: Specifies whether to allow self-signed certificates from
     the server. The default value is false.
    :type allow_self_signed_server_cert: object
    :param authentication_type: Required. The authentication type to use. Possible values include:
     "Anonymous", "SASLUsername", "UsernameAndPassword".
    :type authentication_type: str or ~azure.synapse.models.ImpalaAuthenticationType
    :param enable_ssl: Specifies whether the connections to the server are encrypted using SSL. The
     default value is false.
    :type enable_ssl: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. The IP address or host name of the Impala server. (i.e.
     192.168.222.160).
    :type host: object
    :param password: The password corresponding to the user name when using UsernameAndPassword.
    :type password: ~azure.synapse.models.SecretBase
    :param port: The TCP port that the Impala server uses to listen for client connections. The
     default value is 21050.
    :type port: object
    :param trusted_cert_path: The full path of the .pem file containing trusted CA certificates for
     verifying the server when connecting over SSL. This property can only be set when using SSL on
     self-hosted IR. The default value is the cacerts.pem file installed with the IR.
    :type trusted_cert_path: object
    :param use_system_trust_store: Specifies whether to use a CA certificate from the system trust
     store or from a specified PEM file. The default value is false.
    :type use_system_trust_store: object
    :param username: The user name used to access the Impala server. The default value is anonymous
     when using SASLUsername.
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'authentication_type': {'required': True},
        'host': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'allow_host_name_cn_mismatch': {'key': 'typeProperties.allowHostNameCNMismatch', 'type': 'object'},
        'allow_self_signed_server_cert': {'key': 'typeProperties.allowSelfSignedServerCert', 'type': 'object'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'enable_ssl': {'key': 'typeProperties.enableSsl', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'port': {'key': 'typeProperties.port', 'type': 'object'},
        'trusted_cert_path': {'key': 'typeProperties.trustedCertPath', 'type': 'object'},
        'use_system_trust_store': {'key': 'typeProperties.useSystemTrustStore', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        authentication_type: Union[str, "ImpalaAuthenticationType"],
        host: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        allow_host_name_cn_mismatch: Optional[object] = None,
        allow_self_signed_server_cert: Optional[object] = None,
        enable_ssl: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        port: Optional[object] = None,
        trusted_cert_path: Optional[object] = None,
        use_system_trust_store: Optional[object] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(ImpalaLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Impala'
        self.allow_host_name_cn_mismatch = allow_host_name_cn_mismatch
        self.allow_self_signed_server_cert = allow_self_signed_server_cert
        self.authentication_type = authentication_type
        self.enable_ssl = enable_ssl
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.password = password
        self.port = port
        self.trusted_cert_path = trusted_cert_path
        self.use_system_trust_store = use_system_trust_store
        self.username = username


class ImpalaObjectDataset(Dataset):
    """Impala server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of the Impala. Type: string (or
     Expression with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of the Impala. Type: string (or Expression with resultType
     string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(ImpalaObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'ImpalaObject'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class InformixLinkedService(LinkedService):
    """Informix linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param authentication_type: Type of authentication used to connect to the Informix as ODBC data
     store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType
     string).
    :type authentication_type: object
    :param connection_string: Required. The non-access credential portion of the connection string
     as well as an optional encrypted credential. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param credential: The access credential portion of the connection string specified in driver-
     specific property-value format.
    :type credential: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: Password for Basic authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param user_name: User name for Basic authentication. Type: string (or Expression with
     resultType string).
    :type user_name: object
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'object'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'credential': {'key': 'typeProperties.credential', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'user_name': {'key': 'typeProperties.userName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        connection_string: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        authentication_type: Optional[object] = None,
        credential: Optional["SecretBase"] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        user_name: Optional[object] = None,
        **kwargs
    ):
        super(InformixLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Informix'
        self.authentication_type = authentication_type
        self.connection_string = connection_string
        self.credential = credential
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.user_name = user_name


class InformixTableDataset(Dataset):
    """The Informix table dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The Informix table name. Type: string (or Expression with resultType
     string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(InformixTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'InformixTable'
        self.table_name = table_name


class IntegrationRuntimeReference(msrest.serialization.Model):
    """Integration runtime reference type.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Type of integration runtime. Default value:
     "IntegrationRuntimeReference".
    :vartype type: str
    :param parameters: Arguments for integration runtime.
    :type parameters: dict[str, object]
    :param reference_name: Required. Reference integration runtime name.
    :type reference_name: str
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'reference_name': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '{object}'},
        'reference_name': {'key': 'referenceName', 'type': 'str'},
    }

    type = "IntegrationRuntimeReference"

    def __init__(
        self,
        *,
        reference_name: str,
        parameters: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(IntegrationRuntimeReference, self).__init__(**kwargs)
        self.parameters = parameters
        self.reference_name = reference_name


class JiraLinkedService(LinkedService):
    """Jira Service linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. The IP address or host name of the Jira service. (e.g.
     jira.example.com).
    :type host: object
    :param password: The password corresponding to the user name that you provided in the username
     field.
    :type password: ~azure.synapse.models.SecretBase
    :param port: The TCP port that the Jira server uses to listen for client connections. The
     default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
    :type port: object
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true.
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true.
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true.
    :type use_peer_verification: object
    :param username: Required. The user name that you use to access Jira Service.
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'host': {'required': True},
        'username': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'port': {'key': 'typeProperties.port', 'type': 'object'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        host: object,
        username: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        port: Optional[object] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        **kwargs
    ):
        super(JiraLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Jira'
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.password = password
        self.port = port
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification
        self.username = username


class JiraObjectDataset(Dataset):
    """Jira Service dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(JiraObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'JiraObject'
        self.table_name = table_name


class Jobs(msrest.serialization.Model):
    """Jobs.

    :param edges:
    :type edges: list[~azure.synapse.models.Edge]
    :param id:
    :type id: int
    :param nodes:
    :type nodes: list[int]
    :param start_time:
    :type start_time: int
    :param time:
    :type time: int
    """

    _attribute_map = {
        'edges': {'key': 'edges', 'type': '[Edge]'},
        'id': {'key': 'id', 'type': 'int'},
        'nodes': {'key': 'nodes', 'type': '[int]'},
        'start_time': {'key': 'startTime', 'type': 'int'},
        'time': {'key': 'time', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        edges: Optional[List["Edge"]] = None,
        id: Optional[int] = None,
        nodes: Optional[List[int]] = None,
        start_time: Optional[int] = None,
        time: Optional[int] = None,
        **kwargs
    ):
        super(Jobs, self).__init__(**kwargs)
        self.edges = edges
        self.id = id
        self.nodes = nodes
        self.start_time = start_time
        self.time = time


class JsonDataset(Dataset):
    """Json dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param compression: The data compression method used for the json dataset.
    :type compression: ~azure.synapse.models.DatasetCompression
    :param encoding_name: The code page name of the preferred encoding. If not specified, the
     default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column
     of the table in the following link to set supported values:
     https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with
     resultType string).
    :type encoding_name: object
    :param location: The location of the json data storage.
    :type location: ~azure.synapse.models.DatasetLocation
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'compression': {'key': 'typeProperties.compression', 'type': 'DatasetCompression'},
        'encoding_name': {'key': 'typeProperties.encodingName', 'type': 'object'},
        'location': {'key': 'typeProperties.location', 'type': 'DatasetLocation'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        compression: Optional["DatasetCompression"] = None,
        encoding_name: Optional[object] = None,
        location: Optional["DatasetLocation"] = None,
        **kwargs
    ):
        super(JsonDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'Json'
        self.compression = compression
        self.encoding_name = encoding_name
        self.location = location


class LinkedServiceDebugResource(SubResourceDebugResource):
    """Linked service debug resource.

    All required parameters must be populated in order to send to Azure.

    :param name: The resource name.
    :type name: str
    :param properties: Required. Properties of linked service.
    :type properties: ~azure.synapse.models.LinkedService
    """

    _validation = {
        'properties': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'LinkedService'},
    }

    def __init__(
        self,
        *,
        properties: "LinkedService",
        name: Optional[str] = None,
        **kwargs
    ):
        super(LinkedServiceDebugResource, self).__init__(name=name, **kwargs)
        self.properties = properties


class LinkedServiceListResponse(msrest.serialization.Model):
    """A list of linked service resources.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The link to the next page of results, if any remaining results exist.
    :type next_link: str
    :param value: Required. List of linked services.
    :type value: list[~azure.synapse.models.LinkedServiceResource]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[LinkedServiceResource]'},
    }

    def __init__(
        self,
        *,
        value: List["LinkedServiceResource"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(LinkedServiceListResponse, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class LinkedServiceReference(msrest.serialization.Model):
    """Linked service reference type.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Linked service reference type. Possible values include:
     "DatasetReference", "LinkedServiceReference".
    :type type: str or ~azure.synapse.models.Type
    :param parameters: Arguments for LinkedService.
    :type parameters: dict[str, object]
    :param reference_name: Required. Reference LinkedService name.
    :type reference_name: str
    """

    _validation = {
        'type': {'required': True},
        'reference_name': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '{object}'},
        'reference_name': {'key': 'referenceName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "Type"],
        reference_name: str,
        parameters: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(LinkedServiceReference, self).__init__(**kwargs)
        self.type = type
        self.parameters = parameters
        self.reference_name = reference_name


class LinkedServiceResource(SubResource):
    """Linked service resource type.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar etag: Etag identifies change in the resource.
    :vartype etag: str
    :ivar id: The resource identifier.
    :vartype id: str
    :param properties: Required. Properties of linked service.
    :type properties: ~azure.synapse.models.LinkedService
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'id': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'LinkedService'},
    }

    def __init__(
        self,
        *,
        properties: "LinkedService",
        **kwargs
    ):
        super(LinkedServiceResource, self).__init__(**kwargs)
        self.properties = properties


class LivyBatchStateInformation(msrest.serialization.Model):
    """LivyBatchStateInformation.

    :param current_state:
    :type current_state: str
    :param dead_at:
    :type dead_at: ~datetime.datetime
    :param job_creation_request:
    :type job_creation_request: ~azure.synapse.models.LivyRequestBase
    :param killed_at:
    :type killed_at: ~datetime.datetime
    :param not_started_at:
    :type not_started_at: ~datetime.datetime
    :param recovering_at:
    :type recovering_at: ~datetime.datetime
    :param running_at:
    :type running_at: ~datetime.datetime
    :param starting_at:
    :type starting_at: ~datetime.datetime
    :param success_at:
    :type success_at: ~datetime.datetime
    """

    _attribute_map = {
        'current_state': {'key': 'currentState', 'type': 'str'},
        'dead_at': {'key': 'deadAt', 'type': 'iso-8601'},
        'job_creation_request': {'key': 'jobCreationRequest', 'type': 'LivyRequestBase'},
        'killed_at': {'key': 'killedAt', 'type': 'iso-8601'},
        'not_started_at': {'key': 'notStartedAt', 'type': 'iso-8601'},
        'recovering_at': {'key': 'recoveringAt', 'type': 'iso-8601'},
        'running_at': {'key': 'runningAt', 'type': 'iso-8601'},
        'starting_at': {'key': 'startingAt', 'type': 'iso-8601'},
        'success_at': {'key': 'successAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        current_state: Optional[str] = None,
        dead_at: Optional[datetime.datetime] = None,
        job_creation_request: Optional["LivyRequestBase"] = None,
        killed_at: Optional[datetime.datetime] = None,
        not_started_at: Optional[datetime.datetime] = None,
        recovering_at: Optional[datetime.datetime] = None,
        running_at: Optional[datetime.datetime] = None,
        starting_at: Optional[datetime.datetime] = None,
        success_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(LivyBatchStateInformation, self).__init__(**kwargs)
        self.current_state = current_state
        self.dead_at = dead_at
        self.job_creation_request = job_creation_request
        self.killed_at = killed_at
        self.not_started_at = not_started_at
        self.recovering_at = recovering_at
        self.running_at = running_at
        self.starting_at = starting_at
        self.success_at = success_at


class LivyRequestBase(msrest.serialization.Model):
    """LivyRequestBase.

    :param name:
    :type name: str
    :param archives:
    :type archives: list[str]
    :param args:
    :type args: list[str]
    :param class_name:
    :type class_name: str
    :param conf: Dictionary of :code:`<string>`.
    :type conf: dict[str, str]
    :param driver_cores:
    :type driver_cores: int
    :param driver_memory:
    :type driver_memory: str
    :param executor_cores:
    :type executor_cores: int
    :param executor_memory:
    :type executor_memory: str
    :param file:
    :type file: str
    :param files:
    :type files: list[str]
    :param jars:
    :type jars: list[str]
    :param num_executors:
    :type num_executors: int
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'archives': {'key': 'archives', 'type': '[str]'},
        'args': {'key': 'args', 'type': '[str]'},
        'class_name': {'key': 'className', 'type': 'str'},
        'conf': {'key': 'conf', 'type': '{str}'},
        'driver_cores': {'key': 'driverCores', 'type': 'int'},
        'driver_memory': {'key': 'driverMemory', 'type': 'str'},
        'executor_cores': {'key': 'executorCores', 'type': 'int'},
        'executor_memory': {'key': 'executorMemory', 'type': 'str'},
        'file': {'key': 'file', 'type': 'str'},
        'files': {'key': 'files', 'type': '[str]'},
        'jars': {'key': 'jars', 'type': '[str]'},
        'num_executors': {'key': 'numExecutors', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        archives: Optional[List[str]] = None,
        args: Optional[List[str]] = None,
        class_name: Optional[str] = None,
        conf: Optional[Dict[str, str]] = None,
        driver_cores: Optional[int] = None,
        driver_memory: Optional[str] = None,
        executor_cores: Optional[int] = None,
        executor_memory: Optional[str] = None,
        file: Optional[str] = None,
        files: Optional[List[str]] = None,
        jars: Optional[List[str]] = None,
        num_executors: Optional[int] = None,
        **kwargs
    ):
        super(LivyRequestBase, self).__init__(**kwargs)
        self.name = name
        self.archives = archives
        self.args = args
        self.class_name = class_name
        self.conf = conf
        self.driver_cores = driver_cores
        self.driver_memory = driver_memory
        self.executor_cores = executor_cores
        self.executor_memory = executor_memory
        self.file = file
        self.files = files
        self.jars = jars
        self.num_executors = num_executors


class LivySessionStateInformation(msrest.serialization.Model):
    """LivySessionStateInformation.

    :param busy_at:
    :type busy_at: ~datetime.datetime
    :param current_state:
    :type current_state: str
    :param dead_at:
    :type dead_at: ~datetime.datetime
    :param error_at:
    :type error_at: ~datetime.datetime
    :param idle_at:
    :type idle_at: ~datetime.datetime
    :param job_creation_request:
    :type job_creation_request: ~azure.synapse.models.LivyRequestBase
    :param killed_at:
    :type killed_at: ~datetime.datetime
    :param not_started_at:
    :type not_started_at: ~datetime.datetime
    :param recovering_at:
    :type recovering_at: ~datetime.datetime
    :param shutting_down_at:
    :type shutting_down_at: ~datetime.datetime
    :param starting_at:
    :type starting_at: ~datetime.datetime
    """

    _attribute_map = {
        'busy_at': {'key': 'busyAt', 'type': 'iso-8601'},
        'current_state': {'key': 'currentState', 'type': 'str'},
        'dead_at': {'key': 'deadAt', 'type': 'iso-8601'},
        'error_at': {'key': 'errorAt', 'type': 'iso-8601'},
        'idle_at': {'key': 'idleAt', 'type': 'iso-8601'},
        'job_creation_request': {'key': 'jobCreationRequest', 'type': 'LivyRequestBase'},
        'killed_at': {'key': 'killedAt', 'type': 'iso-8601'},
        'not_started_at': {'key': 'notStartedAt', 'type': 'iso-8601'},
        'recovering_at': {'key': 'recoveringAt', 'type': 'iso-8601'},
        'shutting_down_at': {'key': 'shuttingDownAt', 'type': 'iso-8601'},
        'starting_at': {'key': 'startingAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        busy_at: Optional[datetime.datetime] = None,
        current_state: Optional[str] = None,
        dead_at: Optional[datetime.datetime] = None,
        error_at: Optional[datetime.datetime] = None,
        idle_at: Optional[datetime.datetime] = None,
        job_creation_request: Optional["LivyRequestBase"] = None,
        killed_at: Optional[datetime.datetime] = None,
        not_started_at: Optional[datetime.datetime] = None,
        recovering_at: Optional[datetime.datetime] = None,
        shutting_down_at: Optional[datetime.datetime] = None,
        starting_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(LivySessionStateInformation, self).__init__(**kwargs)
        self.busy_at = busy_at
        self.current_state = current_state
        self.dead_at = dead_at
        self.error_at = error_at
        self.idle_at = idle_at
        self.job_creation_request = job_creation_request
        self.killed_at = killed_at
        self.not_started_at = not_started_at
        self.recovering_at = recovering_at
        self.shutting_down_at = shutting_down_at
        self.starting_at = starting_at


class LivyStatementCancellationResponse(msrest.serialization.Model):
    """LivyStatementCancellationResponse.

    :param msg:
    :type msg: str
    """

    _attribute_map = {
        'msg': {'key': 'msg', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        msg: Optional[str] = None,
        **kwargs
    ):
        super(LivyStatementCancellationResponse, self).__init__(**kwargs)
        self.msg = msg


class LivyStatementOutput(msrest.serialization.Model):
    """LivyStatementOutput.

    :param data: Any object.
    :type data: object
    :param ename:
    :type ename: str
    :param evalue:
    :type evalue: str
    :param execution_count:
    :type execution_count: int
    :param status:
    :type status: str
    :param traceback:
    :type traceback: list[str]
    """

    _attribute_map = {
        'data': {'key': 'data', 'type': 'object'},
        'ename': {'key': 'ename', 'type': 'str'},
        'evalue': {'key': 'evalue', 'type': 'str'},
        'execution_count': {'key': 'execution_count', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'traceback': {'key': 'traceback', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        data: Optional[object] = None,
        ename: Optional[str] = None,
        evalue: Optional[str] = None,
        execution_count: Optional[int] = None,
        status: Optional[str] = None,
        traceback: Optional[List[str]] = None,
        **kwargs
    ):
        super(LivyStatementOutput, self).__init__(**kwargs)
        self.data = data
        self.ename = ename
        self.evalue = evalue
        self.execution_count = execution_count
        self.status = status
        self.traceback = traceback


class LivyStatementRequestBody(msrest.serialization.Model):
    """LivyStatementRequestBody.

    :param code:
    :type code: str
    :param kind:
    :type kind: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        kind: Optional[str] = None,
        **kwargs
    ):
        super(LivyStatementRequestBody, self).__init__(**kwargs)
        self.code = code
        self.kind = kind


class LivyStatementResponseBody(msrest.serialization.Model):
    """LivyStatementResponseBody.

    :param code:
    :type code: str
    :param id:
    :type id: int
    :param output:
    :type output: ~azure.synapse.models.LivyStatementOutput
    :param state:
    :type state: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'id': {'key': 'id', 'type': 'int'},
        'output': {'key': 'output', 'type': 'LivyStatementOutput'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        id: Optional[int] = None,
        output: Optional["LivyStatementOutput"] = None,
        state: Optional[str] = None,
        **kwargs
    ):
        super(LivyStatementResponseBody, self).__init__(**kwargs)
        self.code = code
        self.id = id
        self.output = output
        self.state = state


class LivyStatementsResponseBody(msrest.serialization.Model):
    """LivyStatementsResponseBody.

    :param statements:
    :type statements: list[~azure.synapse.models.LivyStatementResponseBody]
    :param total_statements:
    :type total_statements: int
    """

    _attribute_map = {
        'statements': {'key': 'statements', 'type': '[LivyStatementResponseBody]'},
        'total_statements': {'key': 'total_statements', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        statements: Optional[List["LivyStatementResponseBody"]] = None,
        total_statements: Optional[int] = None,
        **kwargs
    ):
        super(LivyStatementsResponseBody, self).__init__(**kwargs)
        self.statements = statements
        self.total_statements = total_statements


class LogStorageSettings(msrest.serialization.Model):
    """Log storage settings.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param path: The path to storage for storing detailed logs of activity execution. Type: string
     (or Expression with resultType string).
    :type path: object
    :param linked_service_name: Required. Log storage linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    """

    _validation = {
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'path': {'key': 'path', 'type': 'object'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        path: Optional[object] = None,
        **kwargs
    ):
        super(LogStorageSettings, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.path = path
        self.linked_service_name = linked_service_name


class LookupActivity(ExecutionActivity):
    """Lookup activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param dataset: Required. Lookup activity dataset reference.
    :type dataset: ~azure.synapse.models.DatasetReference
    :param first_row_only: Whether to return first row or all rows. Default value is true. Type:
     boolean (or Expression with resultType boolean).
    :type first_row_only: object
    :param source: Required. Dataset-specific source properties, same as copy activity source.
    :type source: ~azure.synapse.models.CopySource
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'dataset': {'required': True},
        'source': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'dataset': {'key': 'typeProperties.dataset', 'type': 'DatasetReference'},
        'first_row_only': {'key': 'typeProperties.firstRowOnly', 'type': 'object'},
        'source': {'key': 'typeProperties.source', 'type': 'CopySource'},
    }

    def __init__(
        self,
        *,
        name: str,
        dataset: "DatasetReference",
        source: "CopySource",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        first_row_only: Optional[object] = None,
        **kwargs
    ):
        super(LookupActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'Lookup'
        self.dataset = dataset
        self.first_row_only = first_row_only
        self.source = source


class MagentoLinkedService(LinkedService):
    """Magento server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param access_token: The access token from Magento.
    :type access_token: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. The URL of the Magento instance. (i.e. 192.168.222.110/magento3).
    :type host: object
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true.
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true.
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true.
    :type use_peer_verification: object
    """

    _validation = {
        'type': {'required': True},
        'host': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'access_token': {'key': 'typeProperties.accessToken', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        host: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        access_token: Optional["SecretBase"] = None,
        encrypted_credential: Optional[object] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        **kwargs
    ):
        super(MagentoLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Magento'
        self.access_token = access_token
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification


class MagentoObjectDataset(Dataset):
    """Magento server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(MagentoObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'MagentoObject'
        self.table_name = table_name


class MappingDataFlow(DataFlow):
    """Mapping data flow.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of data flow.Constant filled by server.
    :type type: str
    :param description: The description of the data flow.
    :type description: str
    :param annotations: List of tags that can be used for describing the data flow.
    :type annotations: list[object]
    :param folder: The folder that this data flow is in. If not specified, Data flow will appear at
     the root level.
    :type folder: ~azure.synapse.models.DataFlowFolder
    :param script: DataFlow script.
    :type script: str
    :param sinks: List of sinks in data flow.
    :type sinks: list[~azure.synapse.models.DataFlowSink]
    :param sources: List of sources in data flow.
    :type sources: list[~azure.synapse.models.DataFlowSource]
    :param transformations: List of transformations in data flow.
    :type transformations: list[~azure.synapse.models.Transformation]
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DataFlowFolder'},
        'script': {'key': 'typeProperties.script', 'type': 'str'},
        'sinks': {'key': 'typeProperties.sinks', 'type': '[DataFlowSink]'},
        'sources': {'key': 'typeProperties.sources', 'type': '[DataFlowSource]'},
        'transformations': {'key': 'typeProperties.transformations', 'type': '[Transformation]'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DataFlowFolder"] = None,
        script: Optional[str] = None,
        sinks: Optional[List["DataFlowSink"]] = None,
        sources: Optional[List["DataFlowSource"]] = None,
        transformations: Optional[List["Transformation"]] = None,
        **kwargs
    ):
        super(MappingDataFlow, self).__init__(description=description, annotations=annotations, folder=folder, **kwargs)
        self.type = 'MappingDataFlow'
        self.script = script
        self.sinks = sinks
        self.sources = sources
        self.transformations = transformations


class MariaDBLinkedService(LinkedService):
    """MariaDB server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: An ODBC connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param pwd: The Azure key vault secret reference of password in connection string.
    :type pwd: ~azure.synapse.models.AzureKeyVaultSecretReference
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'pwd': {'key': 'typeProperties.pwd', 'type': 'AzureKeyVaultSecretReference'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        connection_string: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        pwd: Optional["AzureKeyVaultSecretReference"] = None,
        **kwargs
    ):
        super(MariaDBLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'MariaDB'
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.pwd = pwd


class MariaDBTableDataset(Dataset):
    """MariaDB server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(MariaDBTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'MariaDBTable'
        self.table_name = table_name


class MarketoLinkedService(LinkedService):
    """Marketo server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param client_id: Required. The client Id of your Marketo service.
    :type client_id: object
    :param client_secret: The client secret of your Marketo service.
    :type client_secret: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param endpoint: Required. The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com).
    :type endpoint: object
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true.
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true.
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true.
    :type use_peer_verification: object
    """

    _validation = {
        'type': {'required': True},
        'client_id': {'required': True},
        'endpoint': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'client_id': {'key': 'typeProperties.clientId', 'type': 'object'},
        'client_secret': {'key': 'typeProperties.clientSecret', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'endpoint': {'key': 'typeProperties.endpoint', 'type': 'object'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        client_id: object,
        endpoint: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        client_secret: Optional["SecretBase"] = None,
        encrypted_credential: Optional[object] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        **kwargs
    ):
        super(MarketoLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Marketo'
        self.client_id = client_id
        self.client_secret = client_secret
        self.encrypted_credential = encrypted_credential
        self.endpoint = endpoint
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification


class MarketoObjectDataset(Dataset):
    """Marketo server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(MarketoObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'MarketoObject'
        self.table_name = table_name


class MicrosoftAccessLinkedService(LinkedService):
    """Microsoft Access linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param authentication_type: Type of authentication used to connect to the Microsoft Access as
     ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with
     resultType string).
    :type authentication_type: object
    :param connection_string: Required. The non-access credential portion of the connection string
     as well as an optional encrypted credential. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param credential: The access credential portion of the connection string specified in driver-
     specific property-value format.
    :type credential: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: Password for Basic authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param user_name: User name for Basic authentication. Type: string (or Expression with
     resultType string).
    :type user_name: object
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'object'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'credential': {'key': 'typeProperties.credential', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'user_name': {'key': 'typeProperties.userName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        connection_string: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        authentication_type: Optional[object] = None,
        credential: Optional["SecretBase"] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        user_name: Optional[object] = None,
        **kwargs
    ):
        super(MicrosoftAccessLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'MicrosoftAccess'
        self.authentication_type = authentication_type
        self.connection_string = connection_string
        self.credential = credential
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.user_name = user_name


class MicrosoftAccessTableDataset(Dataset):
    """The Microsoft Access table dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The Microsoft Access table name. Type: string (or Expression with resultType
     string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(MicrosoftAccessTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'MicrosoftAccessTable'
        self.table_name = table_name


class MongoDbCollectionDataset(Dataset):
    """The MongoDB database dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param collection_name: Required. The table name of the MongoDB database. Type: string (or
     Expression with resultType string).
    :type collection_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
        'collection_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'collection_name': {'key': 'typeProperties.collectionName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        collection_name: object,
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        **kwargs
    ):
        super(MongoDbCollectionDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'MongoDbCollection'
        self.collection_name = collection_name


class MongoDbLinkedService(LinkedService):
    """Linked service for MongoDb data source.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param allow_self_signed_server_cert: Specifies whether to allow self-signed certificates from
     the server. The default value is false. Type: boolean (or Expression with resultType boolean).
    :type allow_self_signed_server_cert: object
    :param auth_source: Database to verify the username and password. Type: string (or Expression
     with resultType string).
    :type auth_source: object
    :param authentication_type: The authentication type to be used to connect to the MongoDB
     database. Possible values include: "Basic", "Anonymous".
    :type authentication_type: str or ~azure.synapse.models.MongoDbAuthenticationType
    :param database_name: Required. The name of the MongoDB database that you want to access. Type:
     string (or Expression with resultType string).
    :type database_name: object
    :param enable_ssl: Specifies whether the connections to the server are encrypted using SSL. The
     default value is false. Type: boolean (or Expression with resultType boolean).
    :type enable_ssl: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: Password for authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param port: The TCP port number that the MongoDB server uses to listen for client connections.
     The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
    :type port: object
    :param server: Required. The IP address or server name of the MongoDB server. Type: string (or
     Expression with resultType string).
    :type server: object
    :param username: Username for authentication. Type: string (or Expression with resultType
     string).
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'database_name': {'required': True},
        'server': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'allow_self_signed_server_cert': {'key': 'typeProperties.allowSelfSignedServerCert', 'type': 'object'},
        'auth_source': {'key': 'typeProperties.authSource', 'type': 'object'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'database_name': {'key': 'typeProperties.databaseName', 'type': 'object'},
        'enable_ssl': {'key': 'typeProperties.enableSsl', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'port': {'key': 'typeProperties.port', 'type': 'object'},
        'server': {'key': 'typeProperties.server', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        database_name: object,
        server: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        allow_self_signed_server_cert: Optional[object] = None,
        auth_source: Optional[object] = None,
        authentication_type: Optional[Union[str, "MongoDbAuthenticationType"]] = None,
        enable_ssl: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        port: Optional[object] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(MongoDbLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'MongoDb'
        self.allow_self_signed_server_cert = allow_self_signed_server_cert
        self.auth_source = auth_source
        self.authentication_type = authentication_type
        self.database_name = database_name
        self.enable_ssl = enable_ssl
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.port = port
        self.server = server
        self.username = username


class MongoDbV2CollectionDataset(Dataset):
    """The MongoDB database dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param collection: Required. The collection name of the MongoDB database. Type: string (or
     Expression with resultType string).
    :type collection: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
        'collection': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'collection': {'key': 'typeProperties.collection', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        collection: object,
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        **kwargs
    ):
        super(MongoDbV2CollectionDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'MongoDbV2Collection'
        self.collection = collection


class MongoDbV2LinkedService(LinkedService):
    """Linked service for MongoDB data source.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: Required. The MongoDB connection string. Type: string, SecureString
     or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
    :type connection_string: object
    :param database: Required. The name of the MongoDB database that you want to access. Type:
     string (or Expression with resultType string).
    :type database: object
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
        'database': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'database': {'key': 'typeProperties.database', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        connection_string: object,
        database: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        **kwargs
    ):
        super(MongoDbV2LinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'MongoDbV2'
        self.connection_string = connection_string
        self.database = database


class Trigger(msrest.serialization.Model):
    """Azure Synapse nested object which contains information about creating pipeline run.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: MultiplePipelineTrigger, RerunTumblingWindowTrigger.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Trigger type.Constant filled by server.
    :type type: str
    :param description: Trigger description.
    :type description: str
    :param annotations: List of tags that can be used for describing the trigger.
    :type annotations: list[object]
    :ivar runtime_state: Indicates if trigger is running or not. Updated when Start/Stop APIs are
     called on the Trigger. Possible values include: "Started", "Stopped", "Disabled".
    :vartype runtime_state: str or ~azure.synapse.models.TriggerRuntimeState
    """

    _validation = {
        'type': {'required': True},
        'runtime_state': {'readonly': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'runtime_state': {'key': 'runtimeState', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'MultiplePipelineTrigger': 'MultiplePipelineTrigger', 'RerunTumblingWindowTrigger': 'RerunTumblingWindowTrigger'}
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        **kwargs
    ):
        super(Trigger, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.type = 'Trigger'
        self.description = description
        self.annotations = annotations
        self.runtime_state = None


class MultiplePipelineTrigger(Trigger):
    """Base class for all triggers that support one to many model for trigger to pipeline.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Trigger type.Constant filled by server.
    :type type: str
    :param description: Trigger description.
    :type description: str
    :param annotations: List of tags that can be used for describing the trigger.
    :type annotations: list[object]
    :ivar runtime_state: Indicates if trigger is running or not. Updated when Start/Stop APIs are
     called on the Trigger. Possible values include: "Started", "Stopped", "Disabled".
    :vartype runtime_state: str or ~azure.synapse.models.TriggerRuntimeState
    :param pipelines: Pipelines that need to be started.
    :type pipelines: list[~azure.synapse.models.TriggerPipelineReference]
    """

    _validation = {
        'type': {'required': True},
        'runtime_state': {'readonly': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'runtime_state': {'key': 'runtimeState', 'type': 'str'},
        'pipelines': {'key': 'pipelines', 'type': '[TriggerPipelineReference]'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        pipelines: Optional[List["TriggerPipelineReference"]] = None,
        **kwargs
    ):
        super(MultiplePipelineTrigger, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, **kwargs)
        self.type = 'MultiplePipelineTrigger'
        self.pipelines = pipelines


class MySqlLinkedService(LinkedService):
    """Linked service for MySQL data source.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: Required. The connection string.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: The Azure key vault secret reference of password in connection string.
    :type password: ~azure.synapse.models.AzureKeyVaultSecretReference
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'AzureKeyVaultSecretReference'},
    }

    def __init__(
        self,
        *,
        connection_string: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["AzureKeyVaultSecretReference"] = None,
        **kwargs
    ):
        super(MySqlLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'MySql'
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.password = password


class MySqlTableDataset(Dataset):
    """The MySQL table dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The MySQL table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(MySqlTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'MySqlTable'
        self.table_name = table_name


class NetezzaLinkedService(LinkedService):
    """Netezza linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: An ODBC connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param pwd: The Azure key vault secret reference of password in connection string.
    :type pwd: ~azure.synapse.models.AzureKeyVaultSecretReference
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'pwd': {'key': 'typeProperties.pwd', 'type': 'AzureKeyVaultSecretReference'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        connection_string: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        pwd: Optional["AzureKeyVaultSecretReference"] = None,
        **kwargs
    ):
        super(NetezzaLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Netezza'
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.pwd = pwd


class NetezzaTableDataset(Dataset):
    """Netezza dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of the Netezza. Type: string (or
     Expression with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of the Netezza. Type: string (or Expression with resultType
     string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(NetezzaTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'NetezzaTable'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class NoteBook(msrest.serialization.Model):
    """Notebook.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description: The description of the notebook.
    :type description: str
    :param big_data_pool: Big data pool reference.
    :type big_data_pool: ~azure.synapse.models.BigDataPoolReference
    :param cells: Required. Array of cells of the current notebook.
    :type cells: list[~azure.synapse.models.NotebookCell]
    :param metadata: Required. Notebook root-level metadata.
    :type metadata: ~azure.synapse.models.NotebookMetadata
    :param nbformat: Required. Notebook format (major number). Incremented between backwards
     incompatible changes to the notebook format.
    :type nbformat: int
    :param nbformat_minor: Required. Notebook format (minor number). Incremented for backward
     compatible changes to the notebook format.
    :type nbformat_minor: int
    :param session_properties: Session properties.
    :type session_properties: ~azure.synapse.models.NotebookSessionProperties
    """

    _validation = {
        'cells': {'required': True},
        'metadata': {'required': True},
        'nbformat': {'required': True},
        'nbformat_minor': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'big_data_pool': {'key': 'bigDataPool', 'type': 'BigDataPoolReference'},
        'cells': {'key': 'cells', 'type': '[NotebookCell]'},
        'metadata': {'key': 'metadata', 'type': 'NotebookMetadata'},
        'nbformat': {'key': 'nbformat', 'type': 'int'},
        'nbformat_minor': {'key': 'nbformat_minor', 'type': 'int'},
        'session_properties': {'key': 'sessionProperties', 'type': 'NotebookSessionProperties'},
    }

    def __init__(
        self,
        *,
        cells: List["NotebookCell"],
        metadata: "NotebookMetadata",
        nbformat: int,
        nbformat_minor: int,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        big_data_pool: Optional["BigDataPoolReference"] = None,
        session_properties: Optional["NotebookSessionProperties"] = None,
        **kwargs
    ):
        super(NoteBook, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.description = description
        self.big_data_pool = big_data_pool
        self.cells = cells
        self.metadata = metadata
        self.nbformat = nbformat
        self.nbformat_minor = nbformat_minor
        self.session_properties = session_properties


class NotebookCell(msrest.serialization.Model):
    """Notebook cell.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param attachments: Attachments associated with the cell.
    :type attachments: object
    :param cell_type: Required. String identifying the type of cell.
    :type cell_type: str
    :param metadata: Required. Cell-level metadata.
    :type metadata: object
    :param outputs: Cell-level output items.
    :type outputs: list[~azure.synapse.models.NotebookCellOutputItem]
    :param source: Required. Contents of the cell, represented as an array of lines.
    :type source: list[str]
    """

    _validation = {
        'cell_type': {'required': True},
        'metadata': {'required': True},
        'source': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'attachments': {'key': 'attachments', 'type': 'object'},
        'cell_type': {'key': 'cell_type', 'type': 'str'},
        'metadata': {'key': 'metadata', 'type': 'object'},
        'outputs': {'key': 'outputs', 'type': '[NotebookCellOutputItem]'},
        'source': {'key': 'source', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        cell_type: str,
        metadata: object,
        source: List[str],
        additional_properties: Optional[Dict[str, object]] = None,
        attachments: Optional[object] = None,
        outputs: Optional[List["NotebookCellOutputItem"]] = None,
        **kwargs
    ):
        super(NotebookCell, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.attachments = attachments
        self.cell_type = cell_type
        self.metadata = metadata
        self.outputs = outputs
        self.source = source


class NotebookCellOutputItem(msrest.serialization.Model):
    """An item of the notebook cell execution output.

    All required parameters must be populated in order to send to Azure.

    :param name: For output_type=stream, determines the name of stream (stdout / stderr).
    :type name: str
    :param data: Output data. Use MIME type as key, and content as value.
    :type data: object
    :param execution_count: Execution sequence number.
    :type execution_count: int
    :param metadata: Metadata for the output item.
    :type metadata: object
    :param output_type: Required. Execution, display, or stream outputs. Possible values include:
     "execute_result", "display_data", "stream", "error".
    :type output_type: str or ~azure.synapse.models.CellOutputType
    :param text: For output_type=stream, the stream's text output, represented as a string or an
     array of strings.
    :type text: object
    """

    _validation = {
        'output_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'data': {'key': 'data', 'type': 'object'},
        'execution_count': {'key': 'execution_count', 'type': 'int'},
        'metadata': {'key': 'metadata', 'type': 'object'},
        'output_type': {'key': 'output_type', 'type': 'str'},
        'text': {'key': 'text', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        output_type: Union[str, "CellOutputType"],
        name: Optional[str] = None,
        data: Optional[object] = None,
        execution_count: Optional[int] = None,
        metadata: Optional[object] = None,
        text: Optional[object] = None,
        **kwargs
    ):
        super(NotebookCellOutputItem, self).__init__(**kwargs)
        self.name = name
        self.data = data
        self.execution_count = execution_count
        self.metadata = metadata
        self.output_type = output_type
        self.text = text


class NotebookKernelSpec(msrest.serialization.Model):
    """Kernel information.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Name of the kernel specification.
    :type name: str
    :param display_name: Required. Name to display in UI.
    :type display_name: str
    """

    _validation = {
        'name': {'required': True},
        'display_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'display_name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        display_name: str,
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(NotebookKernelSpec, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.name = name
        self.display_name = display_name


class NotebookLanguageInfo(msrest.serialization.Model):
    """Language info.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. The programming language which this kernel runs.
    :type name: str
    :param codemirror_mode: The codemirror mode to use for code in this language.
    :type codemirror_mode: str
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'codemirror_mode': {'key': 'codemirror_mode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        additional_properties: Optional[Dict[str, object]] = None,
        codemirror_mode: Optional[str] = None,
        **kwargs
    ):
        super(NotebookLanguageInfo, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.name = name
        self.codemirror_mode = codemirror_mode


class NoteBookListResponse(msrest.serialization.Model):
    """A list of notebook resources.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The link to the next page of results, if any remaining results exist.
    :type next_link: str
    :param value: Required. List of notebooks.
    :type value: list[~azure.synapse.models.NoteBookResource]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[NoteBookResource]'},
    }

    def __init__(
        self,
        *,
        value: List["NoteBookResource"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(NoteBookListResponse, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class NotebookMetadata(msrest.serialization.Model):
    """Notebook root-level metadata.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param kernelspec: Kernel information.
    :type kernelspec: ~azure.synapse.models.NotebookKernelSpec
    :param language_info: Language info.
    :type language_info: ~azure.synapse.models.NotebookLanguageInfo
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'kernelspec': {'key': 'kernelspec', 'type': 'NotebookKernelSpec'},
        'language_info': {'key': 'language_info', 'type': 'NotebookLanguageInfo'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        kernelspec: Optional["NotebookKernelSpec"] = None,
        language_info: Optional["NotebookLanguageInfo"] = None,
        **kwargs
    ):
        super(NotebookMetadata, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.kernelspec = kernelspec
        self.language_info = language_info


class NoteBookResource(SubResource):
    """NoteBook resource type.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar etag: Etag identifies change in the resource.
    :vartype etag: str
    :ivar id: The resource identifier.
    :vartype id: str
    :param properties: Required. Properties of NoteBook.
    :type properties: ~azure.synapse.models.NoteBook
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'id': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'NoteBook'},
    }

    def __init__(
        self,
        *,
        properties: "NoteBook",
        **kwargs
    ):
        super(NoteBookResource, self).__init__(**kwargs)
        self.properties = properties


class NotebookSessionProperties(msrest.serialization.Model):
    """Session properties.

    All required parameters must be populated in order to send to Azure.

    :param driver_cores: Required. Number of cores to use for the driver.
    :type driver_cores: int
    :param driver_memory: Required. Amount of memory to use for the driver process.
    :type driver_memory: str
    :param executor_cores: Required. Number of cores to use for each executor.
    :type executor_cores: int
    :param executor_memory: Required. Amount of memory to use per executor process.
    :type executor_memory: str
    :param num_executors: Required. Number of executors to launch for this session.
    :type num_executors: int
    """

    _validation = {
        'driver_cores': {'required': True},
        'driver_memory': {'required': True},
        'executor_cores': {'required': True},
        'executor_memory': {'required': True},
        'num_executors': {'required': True},
    }

    _attribute_map = {
        'driver_cores': {'key': 'driverCores', 'type': 'int'},
        'driver_memory': {'key': 'driverMemory', 'type': 'str'},
        'executor_cores': {'key': 'executorCores', 'type': 'int'},
        'executor_memory': {'key': 'executorMemory', 'type': 'str'},
        'num_executors': {'key': 'numExecutors', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        driver_cores: int,
        driver_memory: str,
        executor_cores: int,
        executor_memory: str,
        num_executors: int,
        **kwargs
    ):
        super(NotebookSessionProperties, self).__init__(**kwargs)
        self.driver_cores = driver_cores
        self.driver_memory = driver_memory
        self.executor_cores = executor_cores
        self.executor_memory = executor_memory
        self.num_executors = num_executors


class ODataLinkedService(LinkedService):
    """Open Data Protocol (OData) linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param aad_resource_id: Specify the resource you are requesting authorization to use Directory.
     Type: string (or Expression with resultType string).
    :type aad_resource_id: object
    :param aad_service_principal_credential_type: Specify the credential type (key or cert) is used
     for service principal. Possible values include: "ServicePrincipalKey", "ServicePrincipalCert".
    :type aad_service_principal_credential_type: str or
     ~azure.synapse.models.ODataAadServicePrincipalCredentialType
    :param authentication_type: Type of authentication used to connect to the OData service.
     Possible values include: "Basic", "Anonymous", "Windows", "AadServicePrincipal",
     "ManagedServiceIdentity".
    :type authentication_type: str or ~azure.synapse.models.ODataAuthenticationType
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: Password of the OData service.
    :type password: ~azure.synapse.models.SecretBase
    :param service_principal_embedded_cert: Specify the base64 encoded certificate of your
     application registered in Azure Active Directory. Type: string (or Expression with resultType
     string).
    :type service_principal_embedded_cert: ~azure.synapse.models.SecretBase
    :param service_principal_embedded_cert_password: Specify the password of your certificate if
     your certificate has a password and you are using AadServicePrincipal authentication. Type:
     string (or Expression with resultType string).
    :type service_principal_embedded_cert_password: ~azure.synapse.models.SecretBase
    :param service_principal_id: Specify the application id of your application registered in Azure
     Active Directory. Type: string (or Expression with resultType string).
    :type service_principal_id: object
    :param service_principal_key: Specify the secret of your application registered in Azure Active
     Directory. Type: string (or Expression with resultType string).
    :type service_principal_key: ~azure.synapse.models.SecretBase
    :param tenant: Specify the tenant information (domain name or tenant ID) under which your
     application resides. Type: string (or Expression with resultType string).
    :type tenant: object
    :param url: Required. The URL of the OData service endpoint. Type: string (or Expression with
     resultType string).
    :type url: object
    :param user_name: User name of the OData service. Type: string (or Expression with resultType
     string).
    :type user_name: object
    """

    _validation = {
        'type': {'required': True},
        'url': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'aad_resource_id': {'key': 'typeProperties.aadResourceId', 'type': 'object'},
        'aad_service_principal_credential_type': {'key': 'typeProperties.aadServicePrincipalCredentialType', 'type': 'str'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'service_principal_embedded_cert': {'key': 'typeProperties.servicePrincipalEmbeddedCert', 'type': 'SecretBase'},
        'service_principal_embedded_cert_password': {'key': 'typeProperties.servicePrincipalEmbeddedCertPassword', 'type': 'SecretBase'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_principal_key': {'key': 'typeProperties.servicePrincipalKey', 'type': 'SecretBase'},
        'tenant': {'key': 'typeProperties.tenant', 'type': 'object'},
        'url': {'key': 'typeProperties.url', 'type': 'object'},
        'user_name': {'key': 'typeProperties.userName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        url: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        aad_resource_id: Optional[object] = None,
        aad_service_principal_credential_type: Optional[Union[str, "ODataAadServicePrincipalCredentialType"]] = None,
        authentication_type: Optional[Union[str, "ODataAuthenticationType"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        service_principal_embedded_cert: Optional["SecretBase"] = None,
        service_principal_embedded_cert_password: Optional["SecretBase"] = None,
        service_principal_id: Optional[object] = None,
        service_principal_key: Optional["SecretBase"] = None,
        tenant: Optional[object] = None,
        user_name: Optional[object] = None,
        **kwargs
    ):
        super(ODataLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'OData'
        self.aad_resource_id = aad_resource_id
        self.aad_service_principal_credential_type = aad_service_principal_credential_type
        self.authentication_type = authentication_type
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.service_principal_embedded_cert = service_principal_embedded_cert
        self.service_principal_embedded_cert_password = service_principal_embedded_cert_password
        self.service_principal_id = service_principal_id
        self.service_principal_key = service_principal_key
        self.tenant = tenant
        self.url = url
        self.user_name = user_name


class ODataResourceDataset(Dataset):
    """The Open Data Protocol (OData) resource dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param path: The OData resource path. Type: string (or Expression with resultType string).
    :type path: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'path': {'key': 'typeProperties.path', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        path: Optional[object] = None,
        **kwargs
    ):
        super(ODataResourceDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'ODataResource'
        self.path = path


class OdbcLinkedService(LinkedService):
    """Open Database Connectivity (ODBC) linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param authentication_type: Type of authentication used to connect to the ODBC data store.
     Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
    :type authentication_type: object
    :param connection_string: Required. The non-access credential portion of the connection string
     as well as an optional encrypted credential. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param credential: The access credential portion of the connection string specified in driver-
     specific property-value format.
    :type credential: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: Password for Basic authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param user_name: User name for Basic authentication. Type: string (or Expression with
     resultType string).
    :type user_name: object
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'object'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'credential': {'key': 'typeProperties.credential', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'user_name': {'key': 'typeProperties.userName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        connection_string: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        authentication_type: Optional[object] = None,
        credential: Optional["SecretBase"] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        user_name: Optional[object] = None,
        **kwargs
    ):
        super(OdbcLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Odbc'
        self.authentication_type = authentication_type
        self.connection_string = connection_string
        self.credential = credential
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.user_name = user_name


class OdbcTableDataset(Dataset):
    """The ODBC table dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The ODBC table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(OdbcTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'OdbcTable'
        self.table_name = table_name


class Office365Dataset(Dataset):
    """The Office365 account.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param predicate: A predicate expression that can be used to filter the specific rows to
     extract from Office 365. Type: string (or Expression with resultType string).
    :type predicate: object
    :param table_name: Required. Name of the dataset to extract from Office 365. Type: string (or
     Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
        'table_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'predicate': {'key': 'typeProperties.predicate', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        table_name: object,
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        predicate: Optional[object] = None,
        **kwargs
    ):
        super(Office365Dataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'Office365Table'
        self.predicate = predicate
        self.table_name = table_name


class Office365LinkedService(LinkedService):
    """Office365 linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param office365_tenant_id: Required. Azure tenant ID to which the Office 365 account belongs.
     Type: string (or Expression with resultType string).
    :type office365_tenant_id: object
    :param service_principal_id: Required. Specify the application's client ID. Type: string (or
     Expression with resultType string).
    :type service_principal_id: object
    :param service_principal_key: Required. Specify the application's key.
    :type service_principal_key: ~azure.synapse.models.SecretBase
    :param service_principal_tenant_id: Required. Specify the tenant information under which your
     Azure AD web application resides. Type: string (or Expression with resultType string).
    :type service_principal_tenant_id: object
    """

    _validation = {
        'type': {'required': True},
        'office365_tenant_id': {'required': True},
        'service_principal_id': {'required': True},
        'service_principal_key': {'required': True},
        'service_principal_tenant_id': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'office365_tenant_id': {'key': 'typeProperties.office365TenantId', 'type': 'object'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_principal_key': {'key': 'typeProperties.servicePrincipalKey', 'type': 'SecretBase'},
        'service_principal_tenant_id': {'key': 'typeProperties.servicePrincipalTenantId', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        office365_tenant_id: object,
        service_principal_id: object,
        service_principal_key: "SecretBase",
        service_principal_tenant_id: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        **kwargs
    ):
        super(Office365LinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Office365'
        self.encrypted_credential = encrypted_credential
        self.office365_tenant_id = office365_tenant_id
        self.service_principal_id = service_principal_id
        self.service_principal_key = service_principal_key
        self.service_principal_tenant_id = service_principal_tenant_id


class Option(msrest.serialization.Model):
    """Option.

    :param additional_prop1:
    :type additional_prop1: str
    :param additional_prop2:
    :type additional_prop2: str
    :param additional_prop3:
    :type additional_prop3: str
    """

    _attribute_map = {
        'additional_prop1': {'key': 'additionalProp1', 'type': 'str'},
        'additional_prop2': {'key': 'additionalProp2', 'type': 'str'},
        'additional_prop3': {'key': 'additionalProp3', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_prop1: Optional[str] = None,
        additional_prop2: Optional[str] = None,
        additional_prop3: Optional[str] = None,
        **kwargs
    ):
        super(Option, self).__init__(**kwargs)
        self.additional_prop1 = additional_prop1
        self.additional_prop2 = additional_prop2
        self.additional_prop3 = additional_prop3


class OracleLinkedService(LinkedService):
    """Oracle database.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: Required. The connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: The Azure key vault secret reference of password in connection string.
    :type password: ~azure.synapse.models.AzureKeyVaultSecretReference
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'AzureKeyVaultSecretReference'},
    }

    def __init__(
        self,
        *,
        connection_string: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["AzureKeyVaultSecretReference"] = None,
        **kwargs
    ):
        super(OracleLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Oracle'
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.password = password


class OracleServiceCloudLinkedService(LinkedService):
    """Oracle Service Cloud linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. The URL of the Oracle Service Cloud instance.
    :type host: object
    :param password: Required. The password corresponding to the user name that you provided in the
     username key.
    :type password: ~azure.synapse.models.SecretBase
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true. Type: boolean (or Expression with resultType boolean).
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true. Type: boolean (or Expression with resultType
     boolean).
    :type use_peer_verification: object
    :param username: Required. The user name that you use to access Oracle Service Cloud server.
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'host': {'required': True},
        'password': {'required': True},
        'username': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        host: object,
        password: "SecretBase",
        username: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        **kwargs
    ):
        super(OracleServiceCloudLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'OracleServiceCloud'
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.password = password
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification
        self.username = username


class OracleServiceCloudObjectDataset(Dataset):
    """Oracle Service Cloud dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(OracleServiceCloudObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'OracleServiceCloudObject'
        self.table_name = table_name


class OracleTableDataset(Dataset):
    """The on-premises Oracle database dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of the on-premises Oracle database. Type:
     string (or Expression with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of the on-premises Oracle database. Type: string (or Expression
     with resultType string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(OracleTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'OracleTable'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class OrcDataset(Dataset):
    """ORC dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param location: The location of the ORC data storage.
    :type location: ~azure.synapse.models.DatasetLocation
    :param orc_compression_codec:  Possible values include: "none", "zlib", "snappy".
    :type orc_compression_codec: str or ~azure.synapse.models.OrcCompressionCodec
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'location': {'key': 'typeProperties.location', 'type': 'DatasetLocation'},
        'orc_compression_codec': {'key': 'typeProperties.orcCompressionCodec', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        location: Optional["DatasetLocation"] = None,
        orc_compression_codec: Optional[Union[str, "OrcCompressionCodec"]] = None,
        **kwargs
    ):
        super(OrcDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'Orc'
        self.location = location
        self.orc_compression_codec = orc_compression_codec


class ParameterSpecification(msrest.serialization.Model):
    """Definition of a single parameter for an entity.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Parameter type. Possible values include: "Object", "String", "Int",
     "Float", "Bool", "Array", "SecureString".
    :type type: str or ~azure.synapse.models.ParameterType
    :param default_value: Default value of parameter.
    :type default_value: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'default_value': {'key': 'defaultValue', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "ParameterType"],
        default_value: Optional[object] = None,
        **kwargs
    ):
        super(ParameterSpecification, self).__init__(**kwargs)
        self.type = type
        self.default_value = default_value


class ParquetDataset(Dataset):
    """Parquet dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param compression_codec:  Possible values include: "none", "gzip", "snappy", "lzo".
    :type compression_codec: str or ~azure.synapse.models.ParquetCompressionCodec
    :param location: The location of the parquet storage.
    :type location: ~azure.synapse.models.DatasetLocation
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'compression_codec': {'key': 'typeProperties.compressionCodec', 'type': 'str'},
        'location': {'key': 'typeProperties.location', 'type': 'DatasetLocation'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        compression_codec: Optional[Union[str, "ParquetCompressionCodec"]] = None,
        location: Optional["DatasetLocation"] = None,
        **kwargs
    ):
        super(ParquetDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'Parquet'
        self.compression_codec = compression_codec
        self.location = location


class PaypalLinkedService(LinkedService):
    """Paypal Service linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param client_id: Required. The client ID associated with your PayPal application.
    :type client_id: object
    :param client_secret: The client secret associated with your PayPal application.
    :type client_secret: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. The URL of the PayPal instance. (i.e. api.sandbox.paypal.com).
    :type host: object
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true.
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true.
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true.
    :type use_peer_verification: object
    """

    _validation = {
        'type': {'required': True},
        'client_id': {'required': True},
        'host': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'client_id': {'key': 'typeProperties.clientId', 'type': 'object'},
        'client_secret': {'key': 'typeProperties.clientSecret', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        client_id: object,
        host: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        client_secret: Optional["SecretBase"] = None,
        encrypted_credential: Optional[object] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        **kwargs
    ):
        super(PaypalLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Paypal'
        self.client_id = client_id
        self.client_secret = client_secret
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification


class PaypalObjectDataset(Dataset):
    """Paypal Service dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(PaypalObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'PaypalObject'
        self.table_name = table_name


class PhoenixLinkedService(LinkedService):
    """Phoenix server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param allow_host_name_cn_mismatch: Specifies whether to require a CA-issued SSL certificate
     name to match the host name of the server when connecting over SSL. The default value is false.
    :type allow_host_name_cn_mismatch: object
    :param allow_self_signed_server_cert: Specifies whether to allow self-signed certificates from
     the server. The default value is false.
    :type allow_self_signed_server_cert: object
    :param authentication_type: Required. The authentication mechanism used to connect to the
     Phoenix server. Possible values include: "Anonymous", "UsernameAndPassword",
     "WindowsAzureHDInsightService".
    :type authentication_type: str or ~azure.synapse.models.PhoenixAuthenticationType
    :param enable_ssl: Specifies whether the connections to the server are encrypted using SSL. The
     default value is false.
    :type enable_ssl: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. The IP address or host name of the Phoenix server. (i.e.
     192.168.222.160).
    :type host: object
    :param http_path: The partial URL corresponding to the Phoenix server. (i.e.
     /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using
     WindowsAzureHDInsightService.
    :type http_path: object
    :param password: The password corresponding to the user name.
    :type password: ~azure.synapse.models.SecretBase
    :param port: The TCP port that the Phoenix server uses to listen for client connections. The
     default value is 8765.
    :type port: object
    :param trusted_cert_path: The full path of the .pem file containing trusted CA certificates for
     verifying the server when connecting over SSL. This property can only be set when using SSL on
     self-hosted IR. The default value is the cacerts.pem file installed with the IR.
    :type trusted_cert_path: object
    :param use_system_trust_store: Specifies whether to use a CA certificate from the system trust
     store or from a specified PEM file. The default value is false.
    :type use_system_trust_store: object
    :param username: The user name used to connect to the Phoenix server.
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'authentication_type': {'required': True},
        'host': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'allow_host_name_cn_mismatch': {'key': 'typeProperties.allowHostNameCNMismatch', 'type': 'object'},
        'allow_self_signed_server_cert': {'key': 'typeProperties.allowSelfSignedServerCert', 'type': 'object'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'enable_ssl': {'key': 'typeProperties.enableSsl', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'http_path': {'key': 'typeProperties.httpPath', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'port': {'key': 'typeProperties.port', 'type': 'object'},
        'trusted_cert_path': {'key': 'typeProperties.trustedCertPath', 'type': 'object'},
        'use_system_trust_store': {'key': 'typeProperties.useSystemTrustStore', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        authentication_type: Union[str, "PhoenixAuthenticationType"],
        host: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        allow_host_name_cn_mismatch: Optional[object] = None,
        allow_self_signed_server_cert: Optional[object] = None,
        enable_ssl: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        http_path: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        port: Optional[object] = None,
        trusted_cert_path: Optional[object] = None,
        use_system_trust_store: Optional[object] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(PhoenixLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Phoenix'
        self.allow_host_name_cn_mismatch = allow_host_name_cn_mismatch
        self.allow_self_signed_server_cert = allow_self_signed_server_cert
        self.authentication_type = authentication_type
        self.enable_ssl = enable_ssl
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.http_path = http_path
        self.password = password
        self.port = port
        self.trusted_cert_path = trusted_cert_path
        self.use_system_trust_store = use_system_trust_store
        self.username = username


class PhoenixObjectDataset(Dataset):
    """Phoenix server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of the Phoenix. Type: string (or
     Expression with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of the Phoenix. Type: string (or Expression with resultType
     string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(PhoenixObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'PhoenixObject'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class PipelineFolder(msrest.serialization.Model):
    """The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.

    :param name: The name of the folder that this Pipeline is in.
    :type name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        **kwargs
    ):
        super(PipelineFolder, self).__init__(**kwargs)
        self.name = name


class PipelineListResponse(msrest.serialization.Model):
    """A list of pipeline resources.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The link to the next page of results, if any remaining results exist.
    :type next_link: str
    :param value: Required. List of pipelines.
    :type value: list[~azure.synapse.models.PipelineResource]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[PipelineResource]'},
    }

    def __init__(
        self,
        *,
        value: List["PipelineResource"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(PipelineListResponse, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class PipelineReference(msrest.serialization.Model):
    """Pipeline reference type.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param name: Reference name.
    :type name: str
    :ivar type: Required. Pipeline reference type. Default value: "PipelineReference".
    :vartype type: str
    :param reference_name: Required. Reference pipeline name.
    :type reference_name: str
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'reference_name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'reference_name': {'key': 'referenceName', 'type': 'str'},
    }

    type = "PipelineReference"

    def __init__(
        self,
        *,
        reference_name: str,
        name: Optional[str] = None,
        **kwargs
    ):
        super(PipelineReference, self).__init__(**kwargs)
        self.name = name
        self.reference_name = reference_name


class PipelineResource(SubResource):
    """Pipeline resource type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar etag: Etag identifies change in the resource.
    :vartype etag: str
    :ivar id: The resource identifier.
    :vartype id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description: The description of the pipeline.
    :type description: str
    :param activities: List of activities in pipeline.
    :type activities: list[~azure.synapse.models.Activity]
    :param annotations: List of tags that can be used for describing the Pipeline.
    :type annotations: list[object]
    :param concurrency: The max number of concurrent runs for the pipeline.
    :type concurrency: int
    :param folder: The folder that this Pipeline is in. If not specified, Pipeline will appear at
     the root level.
    :type folder: ~azure.synapse.models.PipelineFolder
    :param parameters: List of parameters for pipeline.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param run_dimensions: Dimensions emitted by Pipeline.
    :type run_dimensions: dict[str, object]
    :param variables: List of variables for pipeline.
    :type variables: dict[str, ~azure.synapse.models.VariableSpecification]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'id': {'readonly': True},
        'concurrency': {'minimum': 1},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'activities': {'key': 'properties.activities', 'type': '[Activity]'},
        'annotations': {'key': 'properties.annotations', 'type': '[object]'},
        'concurrency': {'key': 'properties.concurrency', 'type': 'int'},
        'folder': {'key': 'properties.folder', 'type': 'PipelineFolder'},
        'parameters': {'key': 'properties.parameters', 'type': '{ParameterSpecification}'},
        'run_dimensions': {'key': 'properties.runDimensions', 'type': '{object}'},
        'variables': {'key': 'properties.variables', 'type': '{VariableSpecification}'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        activities: Optional[List["Activity"]] = None,
        annotations: Optional[List[object]] = None,
        concurrency: Optional[int] = None,
        folder: Optional["PipelineFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        run_dimensions: Optional[Dict[str, object]] = None,
        variables: Optional[Dict[str, "VariableSpecification"]] = None,
        **kwargs
    ):
        super(PipelineResource, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.description = description
        self.activities = activities
        self.annotations = annotations
        self.concurrency = concurrency
        self.folder = folder
        self.parameters = parameters
        self.run_dimensions = run_dimensions
        self.variables = variables


class PipelineRun(msrest.serialization.Model):
    """Information about a pipeline run.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :ivar duration_in_ms: The duration of a pipeline run.
    :vartype duration_in_ms: int
    :ivar invoked_by: Entity that started the pipeline run.
    :vartype invoked_by: ~azure.synapse.models.PipelineRunInvokedBy
    :ivar is_latest: Indicates if the recovered pipeline run is the latest in its group.
    :vartype is_latest: bool
    :ivar last_updated: The last updated timestamp for the pipeline run event in ISO8601 format.
    :vartype last_updated: ~datetime.datetime
    :ivar message: The message from a pipeline run.
    :vartype message: str
    :ivar parameters: The full or partial list of parameter name, value pair used in the pipeline
     run.
    :vartype parameters: dict[str, str]
    :ivar pipeline_name: The pipeline name.
    :vartype pipeline_name: str
    :ivar run_end: The end time of a pipeline run in ISO8601 format.
    :vartype run_end: ~datetime.datetime
    :ivar run_group_id: Identifier that correlates all the recovery runs of a pipeline run.
    :vartype run_group_id: str
    :ivar run_id: Identifier of a run.
    :vartype run_id: str
    :ivar run_start: The start time of a pipeline run in ISO8601 format.
    :vartype run_start: ~datetime.datetime
    :ivar status: The status of a pipeline run.
    :vartype status: str
    """

    _validation = {
        'duration_in_ms': {'readonly': True},
        'invoked_by': {'readonly': True},
        'is_latest': {'readonly': True},
        'last_updated': {'readonly': True},
        'message': {'readonly': True},
        'parameters': {'readonly': True},
        'pipeline_name': {'readonly': True},
        'run_end': {'readonly': True},
        'run_group_id': {'readonly': True},
        'run_id': {'readonly': True},
        'run_start': {'readonly': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'duration_in_ms': {'key': 'durationInMs', 'type': 'int'},
        'invoked_by': {'key': 'invokedBy', 'type': 'PipelineRunInvokedBy'},
        'is_latest': {'key': 'isLatest', 'type': 'bool'},
        'last_updated': {'key': 'lastUpdated', 'type': 'iso-8601'},
        'message': {'key': 'message', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '{str}'},
        'pipeline_name': {'key': 'pipelineName', 'type': 'str'},
        'run_end': {'key': 'runEnd', 'type': 'iso-8601'},
        'run_group_id': {'key': 'runGroupId', 'type': 'str'},
        'run_id': {'key': 'runId', 'type': 'str'},
        'run_start': {'key': 'runStart', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(PipelineRun, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.duration_in_ms = None
        self.invoked_by = None
        self.is_latest = None
        self.last_updated = None
        self.message = None
        self.parameters = None
        self.pipeline_name = None
        self.run_end = None
        self.run_group_id = None
        self.run_id = None
        self.run_start = None
        self.status = None


class PipelineRunInvokedBy(msrest.serialization.Model):
    """Provides entity name and id that started the pipeline run.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the entity that started the pipeline run.
    :vartype name: str
    :ivar id: The ID of the entity that started the run.
    :vartype id: str
    :ivar invoked_by_type: The type of the entity that started the run.
    :vartype invoked_by_type: str
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'invoked_by_type': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'invoked_by_type': {'key': 'invokedByType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PipelineRunInvokedBy, self).__init__(**kwargs)
        self.name = None
        self.id = None
        self.invoked_by_type = None


class PipelineRunsQueryResponse(msrest.serialization.Model):
    """A list pipeline runs.

    All required parameters must be populated in order to send to Azure.

    :param continuation_token: The continuation token for getting the next page of results, if any
     remaining results exist, null otherwise.
    :type continuation_token: str
    :param value: Required. List of pipeline runs.
    :type value: list[~azure.synapse.models.PipelineRun]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'continuation_token': {'key': 'continuationToken', 'type': 'str'},
        'value': {'key': 'value', 'type': '[PipelineRun]'},
    }

    def __init__(
        self,
        *,
        value: List["PipelineRun"],
        continuation_token: Optional[str] = None,
        **kwargs
    ):
        super(PipelineRunsQueryResponse, self).__init__(**kwargs)
        self.continuation_token = continuation_token
        self.value = value


class PostgreSqlLinkedService(LinkedService):
    """Linked service for PostgreSQL data source.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: Required. The connection string.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: The Azure key vault secret reference of password in connection string.
    :type password: ~azure.synapse.models.AzureKeyVaultSecretReference
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'AzureKeyVaultSecretReference'},
    }

    def __init__(
        self,
        *,
        connection_string: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["AzureKeyVaultSecretReference"] = None,
        **kwargs
    ):
        super(PostgreSqlLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'PostgreSql'
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.password = password


class PostgreSqlTableDataset(Dataset):
    """The PostgreSQL table dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The PostgreSQL schema name. Type: string (or Expression
     with resultType string).
    :type schema_type_properties_schema: object
    :param table: The PostgreSQL table name. Type: string (or Expression with resultType string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(PostgreSqlTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'PostgreSqlTable'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class PrestoLinkedService(LinkedService):
    """Presto server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param allow_host_name_cn_mismatch: Specifies whether to require a CA-issued SSL certificate
     name to match the host name of the server when connecting over SSL. The default value is false.
    :type allow_host_name_cn_mismatch: object
    :param allow_self_signed_server_cert: Specifies whether to allow self-signed certificates from
     the server. The default value is false.
    :type allow_self_signed_server_cert: object
    :param authentication_type: Required. The authentication mechanism used to connect to the
     Presto server. Possible values include: "Anonymous", "LDAP".
    :type authentication_type: str or ~azure.synapse.models.PrestoAuthenticationType
    :param catalog: Required. The catalog context for all request against the server.
    :type catalog: object
    :param enable_ssl: Specifies whether the connections to the server are encrypted using SSL. The
     default value is false.
    :type enable_ssl: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. The IP address or host name of the Presto server. (i.e.
     192.168.222.160).
    :type host: object
    :param password: The password corresponding to the user name.
    :type password: ~azure.synapse.models.SecretBase
    :param port: The TCP port that the Presto server uses to listen for client connections. The
     default value is 8080.
    :type port: object
    :param server_version: Required. The version of the Presto server. (i.e. 0.148-t).
    :type server_version: object
    :param time_zone_id: The local time zone used by the connection. Valid values for this option
     are specified in the IANA Time Zone Database. The default value is the system time zone.
    :type time_zone_id: object
    :param trusted_cert_path: The full path of the .pem file containing trusted CA certificates for
     verifying the server when connecting over SSL. This property can only be set when using SSL on
     self-hosted IR. The default value is the cacerts.pem file installed with the IR.
    :type trusted_cert_path: object
    :param use_system_trust_store: Specifies whether to use a CA certificate from the system trust
     store or from a specified PEM file. The default value is false.
    :type use_system_trust_store: object
    :param username: The user name used to connect to the Presto server.
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'authentication_type': {'required': True},
        'catalog': {'required': True},
        'host': {'required': True},
        'server_version': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'allow_host_name_cn_mismatch': {'key': 'typeProperties.allowHostNameCNMismatch', 'type': 'object'},
        'allow_self_signed_server_cert': {'key': 'typeProperties.allowSelfSignedServerCert', 'type': 'object'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'catalog': {'key': 'typeProperties.catalog', 'type': 'object'},
        'enable_ssl': {'key': 'typeProperties.enableSsl', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'port': {'key': 'typeProperties.port', 'type': 'object'},
        'server_version': {'key': 'typeProperties.serverVersion', 'type': 'object'},
        'time_zone_id': {'key': 'typeProperties.timeZoneID', 'type': 'object'},
        'trusted_cert_path': {'key': 'typeProperties.trustedCertPath', 'type': 'object'},
        'use_system_trust_store': {'key': 'typeProperties.useSystemTrustStore', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        authentication_type: Union[str, "PrestoAuthenticationType"],
        catalog: object,
        host: object,
        server_version: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        allow_host_name_cn_mismatch: Optional[object] = None,
        allow_self_signed_server_cert: Optional[object] = None,
        enable_ssl: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        port: Optional[object] = None,
        time_zone_id: Optional[object] = None,
        trusted_cert_path: Optional[object] = None,
        use_system_trust_store: Optional[object] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(PrestoLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Presto'
        self.allow_host_name_cn_mismatch = allow_host_name_cn_mismatch
        self.allow_self_signed_server_cert = allow_self_signed_server_cert
        self.authentication_type = authentication_type
        self.catalog = catalog
        self.enable_ssl = enable_ssl
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.password = password
        self.port = port
        self.server_version = server_version
        self.time_zone_id = time_zone_id
        self.trusted_cert_path = trusted_cert_path
        self.use_system_trust_store = use_system_trust_store
        self.username = username


class PrestoObjectDataset(Dataset):
    """Presto server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of the Presto. Type: string (or
     Expression with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of the Presto. Type: string (or Expression with resultType
     string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(PrestoObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'PrestoObject'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class QueryDataFlowDebugSessionsResponse(msrest.serialization.Model):
    """A list of active debug sessions.

    :param next_link: The link to the next page of results, if any remaining results exist.
    :type next_link: str
    :param value: Array with all active debug sessions.
    :type value: list[~azure.synapse.models.DataFlowDebugSessionInfo]
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[DataFlowDebugSessionInfo]'},
    }

    def __init__(
        self,
        *,
        next_link: Optional[str] = None,
        value: Optional[List["DataFlowDebugSessionInfo"]] = None,
        **kwargs
    ):
        super(QueryDataFlowDebugSessionsResponse, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class QuickBooksLinkedService(LinkedService):
    """QuickBooks server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param access_token: Required. The access token for OAuth 1.0 authentication.
    :type access_token: ~azure.synapse.models.SecretBase
    :param access_token_secret: Required. The access token secret for OAuth 1.0 authentication.
    :type access_token_secret: ~azure.synapse.models.SecretBase
    :param company_id: Required. The company ID of the QuickBooks company to authorize.
    :type company_id: object
    :param consumer_key: Required. The consumer key for OAuth 1.0 authentication.
    :type consumer_key: object
    :param consumer_secret: Required. The consumer secret for OAuth 1.0 authentication.
    :type consumer_secret: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param endpoint: Required. The endpoint of the QuickBooks server. (i.e.
     quickbooks.api.intuit.com).
    :type endpoint: object
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true.
    :type use_encrypted_endpoints: object
    """

    _validation = {
        'type': {'required': True},
        'access_token': {'required': True},
        'access_token_secret': {'required': True},
        'company_id': {'required': True},
        'consumer_key': {'required': True},
        'consumer_secret': {'required': True},
        'endpoint': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'access_token': {'key': 'typeProperties.accessToken', 'type': 'SecretBase'},
        'access_token_secret': {'key': 'typeProperties.accessTokenSecret', 'type': 'SecretBase'},
        'company_id': {'key': 'typeProperties.companyId', 'type': 'object'},
        'consumer_key': {'key': 'typeProperties.consumerKey', 'type': 'object'},
        'consumer_secret': {'key': 'typeProperties.consumerSecret', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'endpoint': {'key': 'typeProperties.endpoint', 'type': 'object'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        access_token: "SecretBase",
        access_token_secret: "SecretBase",
        company_id: object,
        consumer_key: object,
        consumer_secret: "SecretBase",
        endpoint: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        use_encrypted_endpoints: Optional[object] = None,
        **kwargs
    ):
        super(QuickBooksLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'QuickBooks'
        self.access_token = access_token
        self.access_token_secret = access_token_secret
        self.company_id = company_id
        self.consumer_key = consumer_key
        self.consumer_secret = consumer_secret
        self.encrypted_credential = encrypted_credential
        self.endpoint = endpoint
        self.use_encrypted_endpoints = use_encrypted_endpoints


class QuickBooksObjectDataset(Dataset):
    """QuickBooks server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(QuickBooksObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'QuickBooksObject'
        self.table_name = table_name


class RedirectIncompatibleRowSettings(msrest.serialization.Model):
    """Redirect incompatible row settings.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param path: The path for storing the redirect incompatible row data. Type: string (or
     Expression with resultType string).
    :type path: object
    :param linked_service_name: Required. Name of the Azure Storage, Storage SAS, or Azure Data
     Lake Store linked service used for redirecting incompatible row. Must be specified if
     redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType
     string).
    :type linked_service_name: object
    """

    _validation = {
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'path': {'key': 'path', 'type': 'object'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: object,
        additional_properties: Optional[Dict[str, object]] = None,
        path: Optional[object] = None,
        **kwargs
    ):
        super(RedirectIncompatibleRowSettings, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.path = path
        self.linked_service_name = linked_service_name


class RelationalTableDataset(Dataset):
    """The relational table dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The relational table name. Type: string (or Expression with resultType
     string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(RelationalTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'RelationalTable'
        self.table_name = table_name


class RerunTriggerListResponse(msrest.serialization.Model):
    """A list of rerun triggers.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: The continuation token for getting the next page of results, if any remaining
     results exist, null otherwise.
    :vartype next_link: str
    :param value: Required. List of rerun triggers.
    :type value: list[~azure.synapse.models.RerunTriggerResource]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[RerunTriggerResource]'},
    }

    def __init__(
        self,
        *,
        value: List["RerunTriggerResource"],
        **kwargs
    ):
        super(RerunTriggerListResponse, self).__init__(**kwargs)
        self.next_link = None
        self.value = value


class RerunTriggerResource(SubResource):
    """RerunTrigger resource type.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar etag: Etag identifies change in the resource.
    :vartype etag: str
    :ivar id: The resource identifier.
    :vartype id: str
    :param properties: Required. Properties of the rerun trigger.
    :type properties: ~azure.synapse.models.RerunTumblingWindowTrigger
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'id': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'RerunTumblingWindowTrigger'},
    }

    def __init__(
        self,
        *,
        properties: "RerunTumblingWindowTrigger",
        **kwargs
    ):
        super(RerunTriggerResource, self).__init__(**kwargs)
        self.properties = properties


class RerunTumblingWindowTrigger(Trigger):
    """Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Trigger type.Constant filled by server.
    :type type: str
    :param description: Trigger description.
    :type description: str
    :param annotations: List of tags that can be used for describing the trigger.
    :type annotations: list[object]
    :ivar runtime_state: Indicates if trigger is running or not. Updated when Start/Stop APIs are
     called on the Trigger. Possible values include: "Started", "Stopped", "Disabled".
    :vartype runtime_state: str or ~azure.synapse.models.TriggerRuntimeState
    :param max_concurrency: Required. The max number of parallel time windows (ready for execution)
     for which a rerun is triggered.
    :type max_concurrency: int
    :param parent_trigger: The parent trigger reference.
    :type parent_trigger: object
    :param requested_end_time: Required. The end time for the time period for which restatement is
     initiated. Only UTC time is currently supported.
    :type requested_end_time: ~datetime.datetime
    :param requested_start_time: Required. The start time for the time period for which restatement
     is initiated. Only UTC time is currently supported.
    :type requested_start_time: ~datetime.datetime
    """

    _validation = {
        'type': {'required': True},
        'runtime_state': {'readonly': True},
        'max_concurrency': {'required': True, 'maximum': 50, 'minimum': 1},
        'requested_end_time': {'required': True},
        'requested_start_time': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'runtime_state': {'key': 'runtimeState', 'type': 'str'},
        'max_concurrency': {'key': 'typeProperties.maxConcurrency', 'type': 'int'},
        'parent_trigger': {'key': 'typeProperties.parentTrigger', 'type': 'object'},
        'requested_end_time': {'key': 'typeProperties.requestedEndTime', 'type': 'iso-8601'},
        'requested_start_time': {'key': 'typeProperties.requestedStartTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        max_concurrency: int,
        requested_end_time: datetime.datetime,
        requested_start_time: datetime.datetime,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        parent_trigger: Optional[object] = None,
        **kwargs
    ):
        super(RerunTumblingWindowTrigger, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, **kwargs)
        self.type = 'RerunTumblingWindowTrigger'
        self.max_concurrency = max_concurrency
        self.parent_trigger = parent_trigger
        self.requested_end_time = requested_end_time
        self.requested_start_time = requested_start_time


class RerunTumblingWindowTriggerActionParameters(msrest.serialization.Model):
    """Rerun tumbling window trigger Parameters.

    All required parameters must be populated in order to send to Azure.

    :param end_time: Required. The end time for the time period for which restatement is initiated.
     Only UTC time is currently supported.
    :type end_time: ~datetime.datetime
    :param max_concurrency: Required. The max number of parallel time windows (ready for execution)
     for which a rerun is triggered.
    :type max_concurrency: int
    :param start_time: Required. The start time for the time period for which restatement is
     initiated. Only UTC time is currently supported.
    :type start_time: ~datetime.datetime
    """

    _validation = {
        'end_time': {'required': True},
        'max_concurrency': {'required': True, 'maximum': 50, 'minimum': 1},
        'start_time': {'required': True},
    }

    _attribute_map = {
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        end_time: datetime.datetime,
        max_concurrency: int,
        start_time: datetime.datetime,
        **kwargs
    ):
        super(RerunTumblingWindowTriggerActionParameters, self).__init__(**kwargs)
        self.end_time = end_time
        self.max_concurrency = max_concurrency
        self.start_time = start_time


class Resource(msrest.serialization.Model):
    """Azure Synapse top-level resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar e_tag: Etag identifies change in the resource.
    :vartype e_tag: str
    :ivar id: The resource identifier.
    :vartype id: str
    :param location: The resource location.
    :type location: str
    :param tags: A set of tags. The resource tags.
    :type tags: dict[str, str]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'e_tag': {'readonly': True},
        'id': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.name = None
        self.type = None
        self.e_tag = None
        self.id = None
        self.location = location
        self.tags = tags


class ResponsysLinkedService(LinkedService):
    """Responsys linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param client_id: Required. The client ID associated with the Responsys application. Type:
     string (or Expression with resultType string).
    :type client_id: object
    :param client_secret: The client secret associated with the Responsys application. Type: string
     (or Expression with resultType string).
    :type client_secret: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param endpoint: Required. The endpoint of the Responsys server.
    :type endpoint: object
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true. Type: boolean (or Expression with resultType boolean).
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true. Type: boolean (or Expression with resultType
     boolean).
    :type use_peer_verification: object
    """

    _validation = {
        'type': {'required': True},
        'client_id': {'required': True},
        'endpoint': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'client_id': {'key': 'typeProperties.clientId', 'type': 'object'},
        'client_secret': {'key': 'typeProperties.clientSecret', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'endpoint': {'key': 'typeProperties.endpoint', 'type': 'object'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        client_id: object,
        endpoint: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        client_secret: Optional["SecretBase"] = None,
        encrypted_credential: Optional[object] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        **kwargs
    ):
        super(ResponsysLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Responsys'
        self.client_id = client_id
        self.client_secret = client_secret
        self.encrypted_credential = encrypted_credential
        self.endpoint = endpoint
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification


class ResponsysObjectDataset(Dataset):
    """Responsys dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(ResponsysObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'ResponsysObject'
        self.table_name = table_name


class RestResourceDataset(Dataset):
    """A Rest service dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param additional_headers: The additional HTTP headers in the request to the RESTful API. Type:
     string (or Expression with resultType string).
    :type additional_headers: object
    :param pagination_rules: The pagination rules to compose next page requests. Type: string (or
     Expression with resultType string).
    :type pagination_rules: object
    :param relative_url: The relative URL to the resource that the RESTful API provides. Type:
     string (or Expression with resultType string).
    :type relative_url: object
    :param request_body: The HTTP request body to the RESTful API if requestMethod is POST. Type:
     string (or Expression with resultType string).
    :type request_body: object
    :param request_method: The HTTP method used to call the RESTful API. The default is GET. Type:
     string (or Expression with resultType string).
    :type request_method: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'additional_headers': {'key': 'typeProperties.additionalHeaders', 'type': 'object'},
        'pagination_rules': {'key': 'typeProperties.paginationRules', 'type': 'object'},
        'relative_url': {'key': 'typeProperties.relativeUrl', 'type': 'object'},
        'request_body': {'key': 'typeProperties.requestBody', 'type': 'object'},
        'request_method': {'key': 'typeProperties.requestMethod', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        additional_headers: Optional[object] = None,
        pagination_rules: Optional[object] = None,
        relative_url: Optional[object] = None,
        request_body: Optional[object] = None,
        request_method: Optional[object] = None,
        **kwargs
    ):
        super(RestResourceDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'RestResource'
        self.additional_headers = additional_headers
        self.pagination_rules = pagination_rules
        self.relative_url = relative_url
        self.request_body = request_body
        self.request_method = request_method


class RestServiceLinkedService(LinkedService):
    """Rest Service linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param aad_resource_id: The resource you are requesting authorization to use.
    :type aad_resource_id: object
    :param authentication_type: Required. Type of authentication used to connect to the REST
     service. Possible values include: "Anonymous", "Basic", "AadServicePrincipal",
     "ManagedServiceIdentity".
    :type authentication_type: str or ~azure.synapse.models.RestServiceAuthenticationType
    :param enable_server_certificate_validation: Whether to validate server side SSL certificate
     when connecting to the endpoint.The default value is true. Type: boolean (or Expression with
     resultType boolean).
    :type enable_server_certificate_validation: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: The password used in Basic authentication type.
    :type password: ~azure.synapse.models.SecretBase
    :param service_principal_id: The application's client ID used in AadServicePrincipal
     authentication type.
    :type service_principal_id: object
    :param service_principal_key: The application's key used in AadServicePrincipal authentication
     type.
    :type service_principal_key: ~azure.synapse.models.SecretBase
    :param tenant: The tenant information (domain name or tenant ID) used in AadServicePrincipal
     authentication type under which your application resides.
    :type tenant: object
    :param url: Required. The base URL of the REST service.
    :type url: object
    :param user_name: The user name used in Basic authentication type.
    :type user_name: object
    """

    _validation = {
        'type': {'required': True},
        'authentication_type': {'required': True},
        'url': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'aad_resource_id': {'key': 'typeProperties.aadResourceId', 'type': 'object'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'enable_server_certificate_validation': {'key': 'typeProperties.enableServerCertificateValidation', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'service_principal_id': {'key': 'typeProperties.servicePrincipalId', 'type': 'object'},
        'service_principal_key': {'key': 'typeProperties.servicePrincipalKey', 'type': 'SecretBase'},
        'tenant': {'key': 'typeProperties.tenant', 'type': 'object'},
        'url': {'key': 'typeProperties.url', 'type': 'object'},
        'user_name': {'key': 'typeProperties.userName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        authentication_type: Union[str, "RestServiceAuthenticationType"],
        url: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        aad_resource_id: Optional[object] = None,
        enable_server_certificate_validation: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        service_principal_id: Optional[object] = None,
        service_principal_key: Optional["SecretBase"] = None,
        tenant: Optional[object] = None,
        user_name: Optional[object] = None,
        **kwargs
    ):
        super(RestServiceLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'RestService'
        self.aad_resource_id = aad_resource_id
        self.authentication_type = authentication_type
        self.enable_server_certificate_validation = enable_server_certificate_validation
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.service_principal_id = service_principal_id
        self.service_principal_key = service_principal_key
        self.tenant = tenant
        self.url = url
        self.user_name = user_name


class RoleAssignmentDetails(msrest.serialization.Model):
    """Role Assignment response details.

    :param id: Role Assignment ID.
    :type id: str
    :param principal_id: Object ID of the AAD principal or security-group.
    :type principal_id: str
    :param role_id: Role ID of the Synapse Built-In Role.
    :type role_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'role_id': {'key': 'roleId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        principal_id: Optional[str] = None,
        role_id: Optional[str] = None,
        **kwargs
    ):
        super(RoleAssignmentDetails, self).__init__(**kwargs)
        self.id = id
        self.principal_id = principal_id
        self.role_id = role_id


class RoleAssignmentRequest(msrest.serialization.Model):
    """Role Assignment request details.

    All required parameters must be populated in order to send to Azure.

    :param principal_id: Required. Object ID of the AAD principal or security-group.
    :type principal_id: str
    :param role_id: Required. Role ID of the Synapse Built-In Role.
    :type role_id: str
    """

    _validation = {
        'principal_id': {'required': True},
        'role_id': {'required': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'role_id': {'key': 'roleId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        principal_id: str,
        role_id: str,
        **kwargs
    ):
        super(RoleAssignmentRequest, self).__init__(**kwargs)
        self.principal_id = principal_id
        self.role_id = role_id


class RolesListResponse(msrest.serialization.Model):
    """A list of Synapse roles available.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The link to the next page of results, if any remaining results exist.
    :type next_link: str
    :param value: Required. List of Synapse roles.
    :type value: list[~azure.synapse.models.SynapseRole]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[SynapseRole]'},
    }

    def __init__(
        self,
        *,
        value: List["SynapseRole"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(RolesListResponse, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class RunFilterParameters(msrest.serialization.Model):
    """Query parameters for listing runs.

    All required parameters must be populated in order to send to Azure.

    :param continuation_token: The continuation token for getting the next page of results. Null
     for first page.
    :type continuation_token: str
    :param filters: List of filters.
    :type filters: list[~azure.synapse.models.RunQueryFilter]
    :param last_updated_after: Required. The time at or after which the run event was updated in
     'ISO 8601' format.
    :type last_updated_after: ~datetime.datetime
    :param last_updated_before: Required. The time at or before which the run event was updated in
     'ISO 8601' format.
    :type last_updated_before: ~datetime.datetime
    :param order_by: List of OrderBy option.
    :type order_by: list[~azure.synapse.models.RunQueryOrderBy]
    """

    _validation = {
        'last_updated_after': {'required': True},
        'last_updated_before': {'required': True},
    }

    _attribute_map = {
        'continuation_token': {'key': 'continuationToken', 'type': 'str'},
        'filters': {'key': 'filters', 'type': '[RunQueryFilter]'},
        'last_updated_after': {'key': 'lastUpdatedAfter', 'type': 'iso-8601'},
        'last_updated_before': {'key': 'lastUpdatedBefore', 'type': 'iso-8601'},
        'order_by': {'key': 'orderBy', 'type': '[RunQueryOrderBy]'},
    }

    def __init__(
        self,
        *,
        last_updated_after: datetime.datetime,
        last_updated_before: datetime.datetime,
        continuation_token: Optional[str] = None,
        filters: Optional[List["RunQueryFilter"]] = None,
        order_by: Optional[List["RunQueryOrderBy"]] = None,
        **kwargs
    ):
        super(RunFilterParameters, self).__init__(**kwargs)
        self.continuation_token = continuation_token
        self.filters = filters
        self.last_updated_after = last_updated_after
        self.last_updated_before = last_updated_before
        self.order_by = order_by


class RunQueryFilter(msrest.serialization.Model):
    """Query filter option for listing runs.

    All required parameters must be populated in order to send to Azure.

    :param operand: Required. Parameter name to be used for filter. The allowed operands to query
     pipeline runs are PipelineName, RunStart, RunEnd and Status; to query activity runs are
     ActivityName, ActivityRunStart, ActivityRunEnd, ActivityType and Status, and to query trigger
     runs are TriggerName, TriggerRunTimestamp and Status. Possible values include: "PipelineName",
     "Status", "RunStart", "RunEnd", "ActivityName", "ActivityRunStart", "ActivityRunEnd",
     "ActivityType", "TriggerName", "TriggerRunTimestamp", "RunGroupId", "LatestOnly".
    :type operand: str or ~azure.synapse.models.RunQueryFilterOperand
    :param operator: Required. Operator to be used for filter. Possible values include: "Equals",
     "NotEquals", "In", "NotIn".
    :type operator: str or ~azure.synapse.models.RunQueryFilterOperator
    :param values: Required. List of filter values.
    :type values: list[str]
    """

    _validation = {
        'operand': {'required': True},
        'operator': {'required': True},
        'values': {'required': True},
    }

    _attribute_map = {
        'operand': {'key': 'operand', 'type': 'str'},
        'operator': {'key': 'operator', 'type': 'str'},
        'values': {'key': 'values', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        operand: Union[str, "RunQueryFilterOperand"],
        operator: Union[str, "RunQueryFilterOperator"],
        values: List[str],
        **kwargs
    ):
        super(RunQueryFilter, self).__init__(**kwargs)
        self.operand = operand
        self.operator = operator
        self.values = values


class RunQueryOrderBy(msrest.serialization.Model):
    """An object to provide order by options for listing runs.

    All required parameters must be populated in order to send to Azure.

    :param order: Required. Sorting order of the parameter. Possible values include: "ASC", "DESC".
    :type order: str or ~azure.synapse.models.RunQueryOrder
    :param order_by: Required. Parameter name to be used for order by. The allowed parameters to
     order by for pipeline runs are PipelineName, RunStart, RunEnd and Status; for activity runs are
     ActivityName, ActivityRunStart, ActivityRunEnd and Status; for trigger runs are TriggerName,
     TriggerRunTimestamp and Status. Possible values include: "RunStart", "RunEnd", "PipelineName",
     "Status", "ActivityName", "ActivityRunStart", "ActivityRunEnd", "TriggerName",
     "TriggerRunTimestamp".
    :type order_by: str or ~azure.synapse.models.RunQueryOrderByField
    """

    _validation = {
        'order': {'required': True},
        'order_by': {'required': True},
    }

    _attribute_map = {
        'order': {'key': 'order', 'type': 'str'},
        'order_by': {'key': 'orderBy', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        order: Union[str, "RunQueryOrder"],
        order_by: Union[str, "RunQueryOrderByField"],
        **kwargs
    ):
        super(RunQueryOrderBy, self).__init__(**kwargs)
        self.order = order
        self.order_by = order_by


class SalesforceLinkedService(LinkedService):
    """Linked service for Salesforce.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param environment_url: The URL of Salesforce instance. Default is
     'https://login.salesforce.com'. To copy data from sandbox, specify
     'https://test.salesforce.com'. To copy data from custom domain, specify, for example,
     'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
    :type environment_url: object
    :param password: The password for Basic authentication of the Salesforce instance.
    :type password: ~azure.synapse.models.SecretBase
    :param security_token: The security token is required to remotely access Salesforce instance.
    :type security_token: ~azure.synapse.models.SecretBase
    :param username: The username for Basic authentication of the Salesforce instance. Type: string
     (or Expression with resultType string).
    :type username: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'environment_url': {'key': 'typeProperties.environmentUrl', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'security_token': {'key': 'typeProperties.securityToken', 'type': 'SecretBase'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        environment_url: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        security_token: Optional["SecretBase"] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(SalesforceLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Salesforce'
        self.encrypted_credential = encrypted_credential
        self.environment_url = environment_url
        self.password = password
        self.security_token = security_token
        self.username = username


class SalesforceMarketingCloudLinkedService(LinkedService):
    """Salesforce Marketing Cloud linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param client_id: Required. The client ID associated with the Salesforce Marketing Cloud
     application. Type: string (or Expression with resultType string).
    :type client_id: object
    :param client_secret: The client secret associated with the Salesforce Marketing Cloud
     application. Type: string (or Expression with resultType string).
    :type client_secret: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true. Type: boolean (or Expression with resultType boolean).
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true. Type: boolean (or Expression with resultType
     boolean).
    :type use_peer_verification: object
    """

    _validation = {
        'type': {'required': True},
        'client_id': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'client_id': {'key': 'typeProperties.clientId', 'type': 'object'},
        'client_secret': {'key': 'typeProperties.clientSecret', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        client_id: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        client_secret: Optional["SecretBase"] = None,
        encrypted_credential: Optional[object] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        **kwargs
    ):
        super(SalesforceMarketingCloudLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'SalesforceMarketingCloud'
        self.client_id = client_id
        self.client_secret = client_secret
        self.encrypted_credential = encrypted_credential
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification


class SalesforceMarketingCloudObjectDataset(Dataset):
    """Salesforce Marketing Cloud dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(SalesforceMarketingCloudObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'SalesforceMarketingCloudObject'
        self.table_name = table_name


class SalesforceObjectDataset(Dataset):
    """The Salesforce object dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param object_api_name: The Salesforce object API name. Type: string (or Expression with
     resultType string).
    :type object_api_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'object_api_name': {'key': 'typeProperties.objectApiName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        object_api_name: Optional[object] = None,
        **kwargs
    ):
        super(SalesforceObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'SalesforceObject'
        self.object_api_name = object_api_name


class SalesforceServiceCloudLinkedService(LinkedService):
    """Linked service for Salesforce Service Cloud.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param environment_url: The URL of Salesforce Service Cloud instance. Default is
     'https://login.salesforce.com'. To copy data from sandbox, specify
     'https://test.salesforce.com'. To copy data from custom domain, specify, for example,
     'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
    :type environment_url: object
    :param extended_properties: Extended properties appended to the connection string. Type: string
     (or Expression with resultType string).
    :type extended_properties: object
    :param password: The password for Basic authentication of the Salesforce instance.
    :type password: ~azure.synapse.models.SecretBase
    :param security_token: The security token is required to remotely access Salesforce instance.
    :type security_token: ~azure.synapse.models.SecretBase
    :param username: The username for Basic authentication of the Salesforce instance. Type: string
     (or Expression with resultType string).
    :type username: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'environment_url': {'key': 'typeProperties.environmentUrl', 'type': 'object'},
        'extended_properties': {'key': 'typeProperties.extendedProperties', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'security_token': {'key': 'typeProperties.securityToken', 'type': 'SecretBase'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        environment_url: Optional[object] = None,
        extended_properties: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        security_token: Optional["SecretBase"] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(SalesforceServiceCloudLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'SalesforceServiceCloud'
        self.encrypted_credential = encrypted_credential
        self.environment_url = environment_url
        self.extended_properties = extended_properties
        self.password = password
        self.security_token = security_token
        self.username = username


class SalesforceServiceCloudObjectDataset(Dataset):
    """The Salesforce Service Cloud object dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param object_api_name: The Salesforce Service Cloud object API name. Type: string (or
     Expression with resultType string).
    :type object_api_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'object_api_name': {'key': 'typeProperties.objectApiName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        object_api_name: Optional[object] = None,
        **kwargs
    ):
        super(SalesforceServiceCloudObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'SalesforceServiceCloudObject'
        self.object_api_name = object_api_name


class SapBWLinkedService(LinkedService):
    """SAP Business Warehouse Linked Service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param client_id: Required. Client ID of the client on the BW system. (Usually a three-digit
     decimal number represented as a string) Type: string (or Expression with resultType string).
    :type client_id: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: Password to access the SAP BW server.
    :type password: ~azure.synapse.models.SecretBase
    :param server: Required. Host name of the SAP BW instance. Type: string (or Expression with
     resultType string).
    :type server: object
    :param system_number: Required. System number of the BW system. (Usually a two-digit decimal
     number represented as a string.) Type: string (or Expression with resultType string).
    :type system_number: object
    :param user_name: Username to access the SAP BW server. Type: string (or Expression with
     resultType string).
    :type user_name: object
    """

    _validation = {
        'type': {'required': True},
        'client_id': {'required': True},
        'server': {'required': True},
        'system_number': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'client_id': {'key': 'typeProperties.clientId', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'server': {'key': 'typeProperties.server', 'type': 'object'},
        'system_number': {'key': 'typeProperties.systemNumber', 'type': 'object'},
        'user_name': {'key': 'typeProperties.userName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        client_id: object,
        server: object,
        system_number: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        user_name: Optional[object] = None,
        **kwargs
    ):
        super(SapBWLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'SapBW'
        self.client_id = client_id
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.server = server
        self.system_number = system_number
        self.user_name = user_name


class SapCloudForCustomerLinkedService(LinkedService):
    """Linked service for SAP Cloud for Customer.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Either encryptedCredential or
     username/password must be provided. Type: string (or Expression with resultType string).
    :type encrypted_credential: object
    :param password: The password for Basic authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param url: Required. The URL of SAP Cloud for Customer OData API. For example,
     '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with
     resultType string).
    :type url: object
    :param username: The username for Basic authentication. Type: string (or Expression with
     resultType string).
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'url': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'url': {'key': 'typeProperties.url', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        url: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(SapCloudForCustomerLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'SapCloudForCustomer'
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.url = url
        self.username = username


class SapCloudForCustomerResourceDataset(Dataset):
    """The path of the SAP Cloud for Customer OData entity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param path: Required. The path of the SAP Cloud for Customer OData entity. Type: string (or
     Expression with resultType string).
    :type path: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
        'path': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'path': {'key': 'typeProperties.path', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        path: object,
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        **kwargs
    ):
        super(SapCloudForCustomerResourceDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'SapCloudForCustomerResource'
        self.path = path


class SapEccLinkedService(LinkedService):
    """Linked service for SAP ERP Central Component(SAP ECC).

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Either encryptedCredential or
     username/password must be provided. Type: string (or Expression with resultType string).
    :type encrypted_credential: str
    :param password: The password for Basic authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param url: Required. The URL of SAP ECC OData API. For example,
     '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with
     resultType string).
    :type url: str
    :param username: The username for Basic authentication. Type: string (or Expression with
     resultType string).
    :type username: str
    """

    _validation = {
        'type': {'required': True},
        'url': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'str'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'url': {'key': 'typeProperties.url', 'type': 'str'},
        'username': {'key': 'typeProperties.username', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        url: str,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[str] = None,
        password: Optional["SecretBase"] = None,
        username: Optional[str] = None,
        **kwargs
    ):
        super(SapEccLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'SapEcc'
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.url = url
        self.username = username


class SapEccResourceDataset(Dataset):
    """The path of the SAP ECC OData entity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param path: Required. The path of the SAP ECC OData entity. Type: string (or Expression with
     resultType string).
    :type path: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
        'path': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'path': {'key': 'typeProperties.path', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        path: object,
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        **kwargs
    ):
        super(SapEccResourceDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'SapEccResource'
        self.path = path


class SapHanaLinkedService(LinkedService):
    """SAP HANA Linked Service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param authentication_type: The authentication type to be used to connect to the SAP HANA
     server. Possible values include: "Basic", "Windows".
    :type authentication_type: str or ~azure.synapse.models.SapHanaAuthenticationType
    :param connection_string: SAP HANA ODBC connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: Password to access the SAP HANA server.
    :type password: ~azure.synapse.models.SecretBase
    :param server: Required. Host name of the SAP HANA server. Type: string (or Expression with
     resultType string).
    :type server: object
    :param user_name: Username to access the SAP HANA server. Type: string (or Expression with
     resultType string).
    :type user_name: object
    """

    _validation = {
        'type': {'required': True},
        'server': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'server': {'key': 'typeProperties.server', 'type': 'object'},
        'user_name': {'key': 'typeProperties.userName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        server: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        authentication_type: Optional[Union[str, "SapHanaAuthenticationType"]] = None,
        connection_string: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        user_name: Optional[object] = None,
        **kwargs
    ):
        super(SapHanaLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'SapHana'
        self.authentication_type = authentication_type
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.server = server
        self.user_name = user_name


class SapHanaTableDataset(Dataset):
    """SAP HANA Table properties.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of SAP HANA. Type: string (or Expression
     with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of SAP HANA. Type: string (or Expression with resultType string).
    :type table: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        **kwargs
    ):
        super(SapHanaTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'SapHanaTable'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table


class SapOpenHubLinkedService(LinkedService):
    """SAP Business Warehouse Open Hub Destination Linked Service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param client_id: Required. Client ID of the client on the BW system where the open hub
     destination is located. (Usually a three-digit decimal number represented as a string) Type:
     string (or Expression with resultType string).
    :type client_id: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: Password to access the SAP BW server where the open hub destination is
     located.
    :type password: ~azure.synapse.models.SecretBase
    :param server: Required. Host name of the SAP BW instance where the open hub destination is
     located. Type: string (or Expression with resultType string).
    :type server: object
    :param system_number: Required. System number of the BW system where the open hub destination
     is located. (Usually a two-digit decimal number represented as a string.) Type: string (or
     Expression with resultType string).
    :type system_number: object
    :param user_name: Username to access the SAP BW server where the open hub destination is
     located. Type: string (or Expression with resultType string).
    :type user_name: object
    :param language: Language of the BW system where the open hub destination is located. The
     default value is EN. Type: string (or Expression with resultType string).
    :type language: object
    """

    _validation = {
        'type': {'required': True},
        'client_id': {'required': True},
        'server': {'required': True},
        'system_number': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'client_id': {'key': 'typeProperties.clientId', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'server': {'key': 'typeProperties.server', 'type': 'object'},
        'system_number': {'key': 'typeProperties.systemNumber', 'type': 'object'},
        'user_name': {'key': 'typeProperties.userName', 'type': 'object'},
        'language': {'key': 'typeProperties.language', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        client_id: object,
        server: object,
        system_number: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        user_name: Optional[object] = None,
        language: Optional[object] = None,
        **kwargs
    ):
        super(SapOpenHubLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'SapOpenHub'
        self.client_id = client_id
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.server = server
        self.system_number = system_number
        self.user_name = user_name
        self.language = language


class SapOpenHubTableDataset(Dataset):
    """Sap Business Warehouse Open Hub Destination Table properties.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param base_request_id: The ID of request for delta loading. Once it is set, only data with
     requestId larger than the value of this property will be retrieved. The default value is 0.
     Type: integer (or Expression with resultType integer ).
    :type base_request_id: object
    :param exclude_last_request: Whether to exclude the records of the last request. The default
     value is true. Type: boolean (or Expression with resultType boolean).
    :type exclude_last_request: object
    :param open_hub_destination_name: Required. The name of the Open Hub Destination with
     destination type as Database Table. Type: string (or Expression with resultType string).
    :type open_hub_destination_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
        'open_hub_destination_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'base_request_id': {'key': 'typeProperties.baseRequestId', 'type': 'object'},
        'exclude_last_request': {'key': 'typeProperties.excludeLastRequest', 'type': 'object'},
        'open_hub_destination_name': {'key': 'typeProperties.openHubDestinationName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        open_hub_destination_name: object,
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        base_request_id: Optional[object] = None,
        exclude_last_request: Optional[object] = None,
        **kwargs
    ):
        super(SapOpenHubTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'SapOpenHubTable'
        self.base_request_id = base_request_id
        self.exclude_last_request = exclude_last_request
        self.open_hub_destination_name = open_hub_destination_name


class SapTableLinkedService(LinkedService):
    """SAP Table Linked Service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param client_id: Client ID of the client on the SAP system where the table is located.
     (Usually a three-digit decimal number represented as a string) Type: string (or Expression with
     resultType string).
    :type client_id: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param logon_group: The Logon Group for the SAP System. Type: string (or Expression with
     resultType string).
    :type logon_group: object
    :param message_server: The hostname of the SAP Message Server. Type: string (or Expression with
     resultType string).
    :type message_server: object
    :param message_server_service: The service name or port number of the Message Server. Type:
     string (or Expression with resultType string).
    :type message_server_service: object
    :param password: Password to access the SAP server where the table is located.
    :type password: ~azure.synapse.models.SecretBase
    :param server: Host name of the SAP instance where the table is located. Type: string (or
     Expression with resultType string).
    :type server: object
    :param snc_library_path: External security product's library to access the SAP server where the
     table is located. Type: string (or Expression with resultType string).
    :type snc_library_path: object
    :param snc_mode: SNC activation indicator to access the SAP server where the table is located.
     Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
    :type snc_mode: object
    :param snc_my_name: Initiator's SNC name to access the SAP server where the table is located.
     Type: string (or Expression with resultType string).
    :type snc_my_name: object
    :param snc_partner_name: Communication partner's SNC name to access the SAP server where the
     table is located. Type: string (or Expression with resultType string).
    :type snc_partner_name: object
    :param snc_qop: SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string
     (or Expression with resultType string).
    :type snc_qop: object
    :param system_id: SystemID of the SAP system where the table is located. Type: string (or
     Expression with resultType string).
    :type system_id: object
    :param system_number: System number of the SAP system where the table is located. (Usually a
     two-digit decimal number represented as a string.) Type: string (or Expression with resultType
     string).
    :type system_number: object
    :param user_name: Username to access the SAP server where the table is located. Type: string
     (or Expression with resultType string).
    :type user_name: object
    :param language: Language of the SAP system where the table is located. The default value is
     EN. Type: string (or Expression with resultType string).
    :type language: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'client_id': {'key': 'typeProperties.clientId', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'logon_group': {'key': 'typeProperties.logonGroup', 'type': 'object'},
        'message_server': {'key': 'typeProperties.messageServer', 'type': 'object'},
        'message_server_service': {'key': 'typeProperties.messageServerService', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'server': {'key': 'typeProperties.server', 'type': 'object'},
        'snc_library_path': {'key': 'typeProperties.sncLibraryPath', 'type': 'object'},
        'snc_mode': {'key': 'typeProperties.sncMode', 'type': 'object'},
        'snc_my_name': {'key': 'typeProperties.sncMyName', 'type': 'object'},
        'snc_partner_name': {'key': 'typeProperties.sncPartnerName', 'type': 'object'},
        'snc_qop': {'key': 'typeProperties.sncQop', 'type': 'object'},
        'system_id': {'key': 'typeProperties.systemId', 'type': 'object'},
        'system_number': {'key': 'typeProperties.systemNumber', 'type': 'object'},
        'user_name': {'key': 'typeProperties.userName', 'type': 'object'},
        'language': {'key': 'typeProperties.language', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        client_id: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        logon_group: Optional[object] = None,
        message_server: Optional[object] = None,
        message_server_service: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        server: Optional[object] = None,
        snc_library_path: Optional[object] = None,
        snc_mode: Optional[object] = None,
        snc_my_name: Optional[object] = None,
        snc_partner_name: Optional[object] = None,
        snc_qop: Optional[object] = None,
        system_id: Optional[object] = None,
        system_number: Optional[object] = None,
        user_name: Optional[object] = None,
        language: Optional[object] = None,
        **kwargs
    ):
        super(SapTableLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'SapTable'
        self.client_id = client_id
        self.encrypted_credential = encrypted_credential
        self.logon_group = logon_group
        self.message_server = message_server
        self.message_server_service = message_server_service
        self.password = password
        self.server = server
        self.snc_library_path = snc_library_path
        self.snc_mode = snc_mode
        self.snc_my_name = snc_my_name
        self.snc_partner_name = snc_partner_name
        self.snc_qop = snc_qop
        self.system_id = system_id
        self.system_number = system_number
        self.user_name = user_name
        self.language = language


class SapTableResourceDataset(Dataset):
    """SAP Table Resource properties.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: Required. The name of the SAP Table. Type: string (or Expression with
     resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
        'table_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        table_name: object,
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        **kwargs
    ):
        super(SapTableResourceDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'SapTableResource'
        self.table_name = table_name


class SchedulerInformation(msrest.serialization.Model):
    """SchedulerInformation.

    :param cancellation_requested_at:
    :type cancellation_requested_at: ~datetime.datetime
    :param current_state:  Possible values include: "Queued", "Scheduled", "Ended".
    :type current_state: str or ~azure.synapse.models.SchedulerCurrentState
    :param ended_at:
    :type ended_at: ~datetime.datetime
    :param scheduled_at:
    :type scheduled_at: ~datetime.datetime
    :param submitted_at:
    :type submitted_at: ~datetime.datetime
    """

    _attribute_map = {
        'cancellation_requested_at': {'key': 'cancellationRequestedAt', 'type': 'iso-8601'},
        'current_state': {'key': 'currentState', 'type': 'str'},
        'ended_at': {'key': 'endedAt', 'type': 'iso-8601'},
        'scheduled_at': {'key': 'scheduledAt', 'type': 'iso-8601'},
        'submitted_at': {'key': 'submittedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        cancellation_requested_at: Optional[datetime.datetime] = None,
        current_state: Optional[Union[str, "SchedulerCurrentState"]] = None,
        ended_at: Optional[datetime.datetime] = None,
        scheduled_at: Optional[datetime.datetime] = None,
        submitted_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(SchedulerInformation, self).__init__(**kwargs)
        self.cancellation_requested_at = cancellation_requested_at
        self.current_state = current_state
        self.ended_at = ended_at
        self.scheduled_at = scheduled_at
        self.submitted_at = submitted_at


class ScriptAction(msrest.serialization.Model):
    """Custom script action to run on HDI ondemand cluster once it's up.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The user provided name of the script action.
    :type name: str
    :param parameters: The parameters for the script action.
    :type parameters: str
    :param roles: Required. The node types on which the script action should be executed. Possible
     values include: "Headnode", "Workernode", "Zookeeper".
    :type roles: str or ~azure.synapse.models.HdiNodeTypes
    :param uri: Required. The URI for the script action.
    :type uri: str
    """

    _validation = {
        'name': {'required': True},
        'roles': {'required': True},
        'uri': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'str'},
        'roles': {'key': 'roles', 'type': 'str'},
        'uri': {'key': 'uri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        roles: Union[str, "HdiNodeTypes"],
        uri: str,
        parameters: Optional[str] = None,
        **kwargs
    ):
        super(ScriptAction, self).__init__(**kwargs)
        self.name = name
        self.parameters = parameters
        self.roles = roles
        self.uri = uri


class SecureString(SecretBase):
    """Azure Synapse secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the secret.Constant filled by server.
    :type type: str
    :param value: Required. Value of secure string.
    :type value: str
    """

    _validation = {
        'type': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: str,
        **kwargs
    ):
        super(SecureString, self).__init__(**kwargs)
        self.type = 'SecureString'
        self.value = value


class ServiceNowLinkedService(LinkedService):
    """ServiceNow server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param authentication_type: Required. The authentication type to use. Possible values include:
     "Basic", "OAuth2".
    :type authentication_type: str or ~azure.synapse.models.ServiceNowAuthenticationType
    :param client_id: The client id for OAuth2 authentication.
    :type client_id: object
    :param client_secret: The client secret for OAuth2 authentication.
    :type client_secret: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param endpoint: Required. The endpoint of the ServiceNow server. (i.e.
     :code:`<instance>`.service-now.com).
    :type endpoint: object
    :param password: The password corresponding to the user name for Basic and OAuth2
     authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true.
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true.
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true.
    :type use_peer_verification: object
    :param username: The user name used to connect to the ServiceNow server for Basic and OAuth2
     authentication.
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'authentication_type': {'required': True},
        'endpoint': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'client_id': {'key': 'typeProperties.clientId', 'type': 'object'},
        'client_secret': {'key': 'typeProperties.clientSecret', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'endpoint': {'key': 'typeProperties.endpoint', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        authentication_type: Union[str, "ServiceNowAuthenticationType"],
        endpoint: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        client_id: Optional[object] = None,
        client_secret: Optional["SecretBase"] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(ServiceNowLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'ServiceNow'
        self.authentication_type = authentication_type
        self.client_id = client_id
        self.client_secret = client_secret
        self.encrypted_credential = encrypted_credential
        self.endpoint = endpoint
        self.password = password
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification
        self.username = username


class ServiceNowObjectDataset(Dataset):
    """ServiceNow server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(ServiceNowObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'ServiceNowObject'
        self.table_name = table_name


class SetVariableActivity(Activity):
    """Set value for a Variable.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param value: Value to be set. Could be a static value or Expression.
    :type value: object
    :param variable_name: Name of the variable whose value needs to be set.
    :type variable_name: str
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'value': {'key': 'typeProperties.value', 'type': 'object'},
        'variable_name': {'key': 'typeProperties.variableName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        value: Optional[object] = None,
        variable_name: Optional[str] = None,
        **kwargs
    ):
        super(SetVariableActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, **kwargs)
        self.type = 'SetVariable'
        self.value = value
        self.variable_name = variable_name


class SftpServerLinkedService(LinkedService):
    """A linked service for an SSH File Transfer Protocol (SFTP) server.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param authentication_type: The authentication type to be used to connect to the FTP server.
     Possible values include: "Basic", "SshPublicKey".
    :type authentication_type: str or ~azure.synapse.models.SftpAuthenticationType
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. The SFTP server host name. Type: string (or Expression with resultType
     string).
    :type host: object
    :param host_key_fingerprint: The host key finger-print of the SFTP server. When
     SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or
     Expression with resultType string).
    :type host_key_fingerprint: object
    :param pass_phrase: The password to decrypt the SSH private key if the SSH private key is
     encrypted.
    :type pass_phrase: ~azure.synapse.models.SecretBase
    :param password: Password to logon the SFTP server for Basic authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param port: The TCP port number that the SFTP server uses to listen for client connections.
     Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
    :type port: object
    :param private_key_content: Base64 encoded SSH private key content for SshPublicKey
     authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or
     PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
    :type private_key_content: ~azure.synapse.models.SecretBase
    :param private_key_path: The SSH private key file path for SshPublicKey authentication. Only
     valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either
     PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH
     format. Type: string (or Expression with resultType string).
    :type private_key_path: object
    :param skip_host_key_validation: If true, skip the SSH host key validation. Default value is
     false. Type: boolean (or Expression with resultType boolean).
    :type skip_host_key_validation: object
    :param user_name: The username used to log on to the SFTP server. Type: string (or Expression
     with resultType string).
    :type user_name: object
    """

    _validation = {
        'type': {'required': True},
        'host': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'host_key_fingerprint': {'key': 'typeProperties.hostKeyFingerprint', 'type': 'object'},
        'pass_phrase': {'key': 'typeProperties.passPhrase', 'type': 'SecretBase'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'port': {'key': 'typeProperties.port', 'type': 'object'},
        'private_key_content': {'key': 'typeProperties.privateKeyContent', 'type': 'SecretBase'},
        'private_key_path': {'key': 'typeProperties.privateKeyPath', 'type': 'object'},
        'skip_host_key_validation': {'key': 'typeProperties.skipHostKeyValidation', 'type': 'object'},
        'user_name': {'key': 'typeProperties.userName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        host: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        authentication_type: Optional[Union[str, "SftpAuthenticationType"]] = None,
        encrypted_credential: Optional[object] = None,
        host_key_fingerprint: Optional[object] = None,
        pass_phrase: Optional["SecretBase"] = None,
        password: Optional["SecretBase"] = None,
        port: Optional[object] = None,
        private_key_content: Optional["SecretBase"] = None,
        private_key_path: Optional[object] = None,
        skip_host_key_validation: Optional[object] = None,
        user_name: Optional[object] = None,
        **kwargs
    ):
        super(SftpServerLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Sftp'
        self.authentication_type = authentication_type
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.host_key_fingerprint = host_key_fingerprint
        self.pass_phrase = pass_phrase
        self.password = password
        self.port = port
        self.private_key_content = private_key_content
        self.private_key_path = private_key_path
        self.skip_host_key_validation = skip_host_key_validation
        self.user_name = user_name


class ShopifyLinkedService(LinkedService):
    """Shopify Service linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param access_token: The API access token that can be used to access Shopify’s data. The token
     won't expire if it is offline mode.
    :type access_token: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. The endpoint of the Shopify server. (i.e. mystore.myshopify.com).
    :type host: object
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true.
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true.
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true.
    :type use_peer_verification: object
    """

    _validation = {
        'type': {'required': True},
        'host': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'access_token': {'key': 'typeProperties.accessToken', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        host: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        access_token: Optional["SecretBase"] = None,
        encrypted_credential: Optional[object] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        **kwargs
    ):
        super(ShopifyLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Shopify'
        self.access_token = access_token
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification


class ShopifyObjectDataset(Dataset):
    """Shopify Service dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(ShopifyObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'ShopifyObject'
        self.table_name = table_name


class SparkJob(msrest.serialization.Model):
    """SparkJob.

    :param name:
    :type name: str
    :param compute:
    :type compute: str
    :param end_time:
    :type end_time: ~datetime.datetime
    :param job_type:
    :type job_type: str
    :param livy_id:
    :type livy_id: str
    :param pipeline:
    :type pipeline: list[~azure.synapse.models.SparkJob]
    :param queued_duration:
    :type queued_duration: str
    :param running_duration:
    :type running_duration: str
    :param spark_application_id:
    :type spark_application_id: str
    :param spark_job_definition:
    :type spark_job_definition: str
    :param state:
    :type state: str
    :param submit_time:
    :type submit_time: ~datetime.datetime
    :param submitter:
    :type submitter: str
    :param timing:
    :type timing: list[str]
    :param total_duration:
    :type total_duration: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'compute': {'key': 'compute', 'type': 'str'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'job_type': {'key': 'jobType', 'type': 'str'},
        'livy_id': {'key': 'livyId', 'type': 'str'},
        'pipeline': {'key': 'pipeline', 'type': '[SparkJob]'},
        'queued_duration': {'key': 'queuedDuration', 'type': 'str'},
        'running_duration': {'key': 'runningDuration', 'type': 'str'},
        'spark_application_id': {'key': 'sparkApplicationId', 'type': 'str'},
        'spark_job_definition': {'key': 'sparkJobDefinition', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'submit_time': {'key': 'submitTime', 'type': 'iso-8601'},
        'submitter': {'key': 'submitter', 'type': 'str'},
        'timing': {'key': 'timing', 'type': '[str]'},
        'total_duration': {'key': 'totalDuration', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        compute: Optional[str] = None,
        end_time: Optional[datetime.datetime] = None,
        job_type: Optional[str] = None,
        livy_id: Optional[str] = None,
        pipeline: Optional[List["SparkJob"]] = None,
        queued_duration: Optional[str] = None,
        running_duration: Optional[str] = None,
        spark_application_id: Optional[str] = None,
        spark_job_definition: Optional[str] = None,
        state: Optional[str] = None,
        submit_time: Optional[datetime.datetime] = None,
        submitter: Optional[str] = None,
        timing: Optional[List[str]] = None,
        total_duration: Optional[str] = None,
        **kwargs
    ):
        super(SparkJob, self).__init__(**kwargs)
        self.name = name
        self.compute = compute
        self.end_time = end_time
        self.job_type = job_type
        self.livy_id = livy_id
        self.pipeline = pipeline
        self.queued_duration = queued_duration
        self.running_duration = running_duration
        self.spark_application_id = spark_application_id
        self.spark_job_definition = spark_job_definition
        self.state = state
        self.submit_time = submit_time
        self.submitter = submitter
        self.timing = timing
        self.total_duration = total_duration


class SparkJobDefinition(msrest.serialization.Model):
    """Spark job definition.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description: The description of the Spark job definition.
    :type description: str
    :param job_properties: Required. The properties of the Spark job.
    :type job_properties: ~azure.synapse.models.SparkJobProperties
    :param required_spark_version: The required Spark version of the application.
    :type required_spark_version: str
    :param target_big_data_pool: Required. Big data pool reference.
    :type target_big_data_pool: ~azure.synapse.models.BigDataPoolReference
    :param language: The language of the Spark application.
    :type language: str
    """

    _validation = {
        'job_properties': {'required': True},
        'target_big_data_pool': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'job_properties': {'key': 'jobProperties', 'type': 'SparkJobProperties'},
        'required_spark_version': {'key': 'requiredSparkVersion', 'type': 'str'},
        'target_big_data_pool': {'key': 'targetBigDataPool', 'type': 'BigDataPoolReference'},
        'language': {'key': 'language', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        job_properties: "SparkJobProperties",
        target_big_data_pool: "BigDataPoolReference",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        required_spark_version: Optional[str] = None,
        language: Optional[str] = None,
        **kwargs
    ):
        super(SparkJobDefinition, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.description = description
        self.job_properties = job_properties
        self.required_spark_version = required_spark_version
        self.target_big_data_pool = target_big_data_pool
        self.language = language


class SparkJobDefinitionResource(SubResource):
    """Spark job definition resource type.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar etag: Etag identifies change in the resource.
    :vartype etag: str
    :ivar id: The resource identifier.
    :vartype id: str
    :param properties: Required. Properties of spark job definition.
    :type properties: ~azure.synapse.models.SparkJobDefinition
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'id': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'SparkJobDefinition'},
    }

    def __init__(
        self,
        *,
        properties: "SparkJobDefinition",
        **kwargs
    ):
        super(SparkJobDefinitionResource, self).__init__(**kwargs)
        self.properties = properties


class SparkJobDefinitionsListResponse(msrest.serialization.Model):
    """A list of spark job definitions resources.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The link to the next page of results, if any remaining results exist.
    :type next_link: str
    :param value: Required. List of spark job definitions.
    :type value: list[~azure.synapse.models.SparkJobDefinitionResource]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[SparkJobDefinitionResource]'},
    }

    def __init__(
        self,
        *,
        value: List["SparkJobDefinitionResource"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(SparkJobDefinitionsListResponse, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class SparkJobListViewResponse(msrest.serialization.Model):
    """SparkJobListViewResponse.

    :param n_jobs:
    :type n_jobs: int
    :param spark_jobs:
    :type spark_jobs: list[~azure.synapse.models.SparkJob]
    """

    _attribute_map = {
        'n_jobs': {'key': 'nJobs', 'type': 'int'},
        'spark_jobs': {'key': 'sparkJobs', 'type': '[SparkJob]'},
    }

    def __init__(
        self,
        *,
        n_jobs: Optional[int] = None,
        spark_jobs: Optional[List["SparkJob"]] = None,
        **kwargs
    ):
        super(SparkJobListViewResponse, self).__init__(**kwargs)
        self.n_jobs = n_jobs
        self.spark_jobs = spark_jobs


class SparkJobProperties(msrest.serialization.Model):
    """The properties of the Spark job.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: The name of the job.
    :type name: str
    :param archives: Archives to be used in this job.
    :type archives: list[str]
    :param args: Command line arguments for the application.
    :type args: list[str]
    :param class_name: Main class for Java/Scala application.
    :type class_name: str
    :param conf: Spark configuration properties.
    :type conf: object
    :param driver_cores: Required. Number of cores to use for the driver.
    :type driver_cores: int
    :param driver_memory: Required. Amount of memory to use for the driver process.
    :type driver_memory: str
    :param executor_cores: Required. Number of cores to use for each executor.
    :type executor_cores: int
    :param executor_memory: Required. Amount of memory to use per executor process.
    :type executor_memory: str
    :param file: Required. File containing the application to execute.
    :type file: str
    :param files: files to be used in this job.
    :type files: list[str]
    :param jars: Jars to be used in this job.
    :type jars: list[str]
    :param num_executors: Required. Number of executors to launch for this job.
    :type num_executors: int
    """

    _validation = {
        'driver_cores': {'required': True},
        'driver_memory': {'required': True},
        'executor_cores': {'required': True},
        'executor_memory': {'required': True},
        'file': {'required': True},
        'num_executors': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'archives': {'key': 'archives', 'type': '[str]'},
        'args': {'key': 'args', 'type': '[str]'},
        'class_name': {'key': 'className', 'type': 'str'},
        'conf': {'key': 'conf', 'type': 'object'},
        'driver_cores': {'key': 'driverCores', 'type': 'int'},
        'driver_memory': {'key': 'driverMemory', 'type': 'str'},
        'executor_cores': {'key': 'executorCores', 'type': 'int'},
        'executor_memory': {'key': 'executorMemory', 'type': 'str'},
        'file': {'key': 'file', 'type': 'str'},
        'files': {'key': 'files', 'type': '[str]'},
        'jars': {'key': 'jars', 'type': '[str]'},
        'num_executors': {'key': 'numExecutors', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        driver_cores: int,
        driver_memory: str,
        executor_cores: int,
        executor_memory: str,
        file: str,
        num_executors: int,
        additional_properties: Optional[Dict[str, object]] = None,
        name: Optional[str] = None,
        archives: Optional[List[str]] = None,
        args: Optional[List[str]] = None,
        class_name: Optional[str] = None,
        conf: Optional[object] = None,
        files: Optional[List[str]] = None,
        jars: Optional[List[str]] = None,
        **kwargs
    ):
        super(SparkJobProperties, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.name = name
        self.archives = archives
        self.args = args
        self.class_name = class_name
        self.conf = conf
        self.driver_cores = driver_cores
        self.driver_memory = driver_memory
        self.executor_cores = executor_cores
        self.executor_memory = executor_memory
        self.file = file
        self.files = files
        self.jars = jars
        self.num_executors = num_executors


class SparkLinkedService(LinkedService):
    """Spark Server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param allow_host_name_cn_mismatch: Specifies whether to require a CA-issued SSL certificate
     name to match the host name of the server when connecting over SSL. The default value is false.
    :type allow_host_name_cn_mismatch: object
    :param allow_self_signed_server_cert: Specifies whether to allow self-signed certificates from
     the server. The default value is false.
    :type allow_self_signed_server_cert: object
    :param authentication_type: Required. The authentication method used to access the Spark
     server. Possible values include: "Anonymous", "Username", "UsernameAndPassword",
     "WindowsAzureHDInsightService".
    :type authentication_type: str or ~azure.synapse.models.SparkAuthenticationType
    :param enable_ssl: Specifies whether the connections to the server are encrypted using SSL. The
     default value is false.
    :type enable_ssl: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. IP address or host name of the Spark server.
    :type host: object
    :param http_path: The partial URL corresponding to the Spark server.
    :type http_path: object
    :param password: The password corresponding to the user name that you provided in the Username
     field.
    :type password: ~azure.synapse.models.SecretBase
    :param port: Required. The TCP port that the Spark server uses to listen for client
     connections.
    :type port: object
    :param server_type: The type of Spark server. Possible values include: "SharkServer",
     "SharkServer2", "SparkThriftServer".
    :type server_type: str or ~azure.synapse.models.SparkServerType
    :param thrift_transport_protocol: The transport protocol to use in the Thrift layer. Possible
     values include: "Binary", "SASL", "HTTP ".
    :type thrift_transport_protocol: str or ~azure.synapse.models.SparkThriftTransportProtocol
    :param trusted_cert_path: The full path of the .pem file containing trusted CA certificates for
     verifying the server when connecting over SSL. This property can only be set when using SSL on
     self-hosted IR. The default value is the cacerts.pem file installed with the IR.
    :type trusted_cert_path: object
    :param use_system_trust_store: Specifies whether to use a CA certificate from the system trust
     store or from a specified PEM file. The default value is false.
    :type use_system_trust_store: object
    :param username: The user name that you use to access Spark Server.
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'authentication_type': {'required': True},
        'host': {'required': True},
        'port': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'allow_host_name_cn_mismatch': {'key': 'typeProperties.allowHostNameCNMismatch', 'type': 'object'},
        'allow_self_signed_server_cert': {'key': 'typeProperties.allowSelfSignedServerCert', 'type': 'object'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'enable_ssl': {'key': 'typeProperties.enableSsl', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'http_path': {'key': 'typeProperties.httpPath', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'port': {'key': 'typeProperties.port', 'type': 'object'},
        'server_type': {'key': 'typeProperties.serverType', 'type': 'str'},
        'thrift_transport_protocol': {'key': 'typeProperties.thriftTransportProtocol', 'type': 'str'},
        'trusted_cert_path': {'key': 'typeProperties.trustedCertPath', 'type': 'object'},
        'use_system_trust_store': {'key': 'typeProperties.useSystemTrustStore', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        authentication_type: Union[str, "SparkAuthenticationType"],
        host: object,
        port: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        allow_host_name_cn_mismatch: Optional[object] = None,
        allow_self_signed_server_cert: Optional[object] = None,
        enable_ssl: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        http_path: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        server_type: Optional[Union[str, "SparkServerType"]] = None,
        thrift_transport_protocol: Optional[Union[str, "SparkThriftTransportProtocol"]] = None,
        trusted_cert_path: Optional[object] = None,
        use_system_trust_store: Optional[object] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(SparkLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Spark'
        self.allow_host_name_cn_mismatch = allow_host_name_cn_mismatch
        self.allow_self_signed_server_cert = allow_self_signed_server_cert
        self.authentication_type = authentication_type
        self.enable_ssl = enable_ssl
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.http_path = http_path
        self.password = password
        self.port = port
        self.server_type = server_type
        self.thrift_transport_protocol = thrift_transport_protocol
        self.trusted_cert_path = trusted_cert_path
        self.use_system_trust_store = use_system_trust_store
        self.username = username


class SparkObjectDataset(Dataset):
    """Spark Server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of the Spark. Type: string (or Expression
     with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of the Spark. Type: string (or Expression with resultType string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(SparkObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'SparkObject'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class SparkServicePluginInformation(msrest.serialization.Model):
    """SparkServicePluginInformation.

    :param cleanup_started_at:
    :type cleanup_started_at: ~datetime.datetime
    :param current_state:  Possible values include: "Preparation", "ResourceAcquisition", "Queued",
     "Submission", "Monitoring", "Cleanup", "Ended".
    :type current_state: str or ~azure.synapse.models.PluginCurrentState
    :param monitoring_started_at:
    :type monitoring_started_at: ~datetime.datetime
    :param preparation_started_at:
    :type preparation_started_at: ~datetime.datetime
    :param resource_acquisition_started_at:
    :type resource_acquisition_started_at: ~datetime.datetime
    :param submission_started_at:
    :type submission_started_at: ~datetime.datetime
    """

    _attribute_map = {
        'cleanup_started_at': {'key': 'cleanupStartedAt', 'type': 'iso-8601'},
        'current_state': {'key': 'currentState', 'type': 'str'},
        'monitoring_started_at': {'key': 'monitoringStartedAt', 'type': 'iso-8601'},
        'preparation_started_at': {'key': 'preparationStartedAt', 'type': 'iso-8601'},
        'resource_acquisition_started_at': {'key': 'resourceAcquisitionStartedAt', 'type': 'iso-8601'},
        'submission_started_at': {'key': 'submissionStartedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        cleanup_started_at: Optional[datetime.datetime] = None,
        current_state: Optional[Union[str, "PluginCurrentState"]] = None,
        monitoring_started_at: Optional[datetime.datetime] = None,
        preparation_started_at: Optional[datetime.datetime] = None,
        resource_acquisition_started_at: Optional[datetime.datetime] = None,
        submission_started_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(SparkServicePluginInformation, self).__init__(**kwargs)
        self.cleanup_started_at = cleanup_started_at
        self.current_state = current_state
        self.monitoring_started_at = monitoring_started_at
        self.preparation_started_at = preparation_started_at
        self.resource_acquisition_started_at = resource_acquisition_started_at
        self.submission_started_at = submission_started_at


class SqlConnection(msrest.serialization.Model):
    """The connection used to execute the SQL script.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. The identifier of the connection.
    :type name: str
    :param type: Required. The type of the connection. Possible values include: "SqlOnDemand",
     "SqlPool".
    :type type: str or ~azure.synapse.models.SqlConnectionType
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        type: Union[str, "SqlConnectionType"],
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(SqlConnection, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.name = name
        self.type = type


class SqlScript(msrest.serialization.Model):
    """SQL script.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :ivar type: The type of the SQL script. Default value: "SqlQuery".
    :vartype type: str
    :param description: The description of the SQL script.
    :type description: str
    :param content: Required. The content of the SQL script.
    :type content: ~azure.synapse.models.SqlScriptContent
    """

    _validation = {
        'type': {'constant': True},
        'content': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'content': {'key': 'content', 'type': 'SqlScriptContent'},
    }

    type = "SqlQuery"

    def __init__(
        self,
        *,
        content: "SqlScriptContent",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(SqlScript, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.description = description
        self.content = content


class SqlScriptContent(msrest.serialization.Model):
    """The content of the SQL script.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param current_connection: Required. The connection used to execute the SQL script.
    :type current_connection: ~azure.synapse.models.SqlConnection
    :param metadata: The metadata of the SQL script.
    :type metadata: ~azure.synapse.models.SqlScriptMetadata
    :param query: Required. SQL query to execute.
    :type query: str
    """

    _validation = {
        'current_connection': {'required': True},
        'query': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'current_connection': {'key': 'currentConnection', 'type': 'SqlConnection'},
        'metadata': {'key': 'metadata', 'type': 'SqlScriptMetadata'},
        'query': {'key': 'query', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        current_connection: "SqlConnection",
        query: str,
        additional_properties: Optional[Dict[str, object]] = None,
        metadata: Optional["SqlScriptMetadata"] = None,
        **kwargs
    ):
        super(SqlScriptContent, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.current_connection = current_connection
        self.metadata = metadata
        self.query = query


class SqlScriptMetadata(msrest.serialization.Model):
    """The metadata of the SQL script.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param language: The language of the SQL script.
    :type language: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'language': {'key': 'language', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        language: Optional[str] = None,
        **kwargs
    ):
        super(SqlScriptMetadata, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.language = language


class SqlScriptResource(SubResource):
    """Sql Script resource type.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar etag: Etag identifies change in the resource.
    :vartype etag: str
    :ivar id: The resource identifier.
    :vartype id: str
    :param properties: Required. Properties of sql script.
    :type properties: ~azure.synapse.models.SqlScript
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'id': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'SqlScript'},
    }

    def __init__(
        self,
        *,
        properties: "SqlScript",
        **kwargs
    ):
        super(SqlScriptResource, self).__init__(**kwargs)
        self.properties = properties


class SqlScriptsListResponse(msrest.serialization.Model):
    """A list of sql scripts resources.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The link to the next page of results, if any remaining results exist.
    :type next_link: str
    :param value: Required. List of sql scripts.
    :type value: list[~azure.synapse.models.SqlScriptResource]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[SqlScriptResource]'},
    }

    def __init__(
        self,
        *,
        value: List["SqlScriptResource"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(SqlScriptsListResponse, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class SqlServerLinkedService(LinkedService):
    """SQL Server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: Required. The connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: The on-premises Windows authentication password.
    :type password: ~azure.synapse.models.SecretBase
    :param user_name: The on-premises Windows authentication user name. Type: string (or Expression
     with resultType string).
    :type user_name: object
    """

    _validation = {
        'type': {'required': True},
        'connection_string': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'user_name': {'key': 'typeProperties.userName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        connection_string: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        user_name: Optional[object] = None,
        **kwargs
    ):
        super(SqlServerLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'SqlServer'
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.user_name = user_name


class SqlServerStoredProcedureActivity(ExecutionActivity):
    """SQL stored procedure activity type.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param stored_procedure_name: Required. Stored procedure name. Type: string (or Expression with
     resultType string).
    :type stored_procedure_name: object
    :param stored_procedure_parameters: Value and type setting for stored procedure parameters.
     Example: "{Parameter1: {value: "1", type: "int"}}".
    :type stored_procedure_parameters: dict[str, ~azure.synapse.models.StoredProcedureParameter]
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'stored_procedure_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'stored_procedure_name': {'key': 'typeProperties.storedProcedureName', 'type': 'object'},
        'stored_procedure_parameters': {'key': 'typeProperties.storedProcedureParameters', 'type': '{StoredProcedureParameter}'},
    }

    def __init__(
        self,
        *,
        name: str,
        stored_procedure_name: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        stored_procedure_parameters: Optional[Dict[str, "StoredProcedureParameter"]] = None,
        **kwargs
    ):
        super(SqlServerStoredProcedureActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'SqlServerStoredProcedure'
        self.stored_procedure_name = stored_procedure_name
        self.stored_procedure_parameters = stored_procedure_parameters


class SqlServerTableDataset(Dataset):
    """The on-premises SQL Server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of the SQL Server dataset. Type: string
     (or Expression with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of the SQL Server dataset. Type: string (or Expression with
     resultType string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(SqlServerTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'SqlServerTable'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class SquareLinkedService(LinkedService):
    """Square Service linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param client_id: Required. The client ID associated with your Square application.
    :type client_id: object
    :param client_secret: The client secret associated with your Square application.
    :type client_secret: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. The URL of the Square instance. (i.e. mystore.mysquare.com).
    :type host: object
    :param redirect_uri: Required. The redirect URL assigned in the Square application dashboard.
     (i.e. http://localhost:2500).
    :type redirect_uri: object
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true.
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true.
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true.
    :type use_peer_verification: object
    """

    _validation = {
        'type': {'required': True},
        'client_id': {'required': True},
        'host': {'required': True},
        'redirect_uri': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'client_id': {'key': 'typeProperties.clientId', 'type': 'object'},
        'client_secret': {'key': 'typeProperties.clientSecret', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'redirect_uri': {'key': 'typeProperties.redirectUri', 'type': 'object'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        client_id: object,
        host: object,
        redirect_uri: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        client_secret: Optional["SecretBase"] = None,
        encrypted_credential: Optional[object] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        **kwargs
    ):
        super(SquareLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Square'
        self.client_id = client_id
        self.client_secret = client_secret
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.redirect_uri = redirect_uri
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification


class SquareObjectDataset(Dataset):
    """Square Service dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(SquareObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'SquareObject'
        self.table_name = table_name


class SSISAccessCredential(msrest.serialization.Model):
    """SSIS access credential.

    All required parameters must be populated in order to send to Azure.

    :param domain: Required. Domain for windows authentication.
    :type domain: object
    :param password: Required. Password for windows authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param user_name: Required. UseName for windows authentication.
    :type user_name: object
    """

    _validation = {
        'domain': {'required': True},
        'password': {'required': True},
        'user_name': {'required': True},
    }

    _attribute_map = {
        'domain': {'key': 'domain', 'type': 'object'},
        'password': {'key': 'password', 'type': 'SecretBase'},
        'user_name': {'key': 'userName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        domain: object,
        password: "SecretBase",
        user_name: object,
        **kwargs
    ):
        super(SSISAccessCredential, self).__init__(**kwargs)
        self.domain = domain
        self.password = password
        self.user_name = user_name


class SSISChildPackage(msrest.serialization.Model):
    """SSIS embedded child package.

    All required parameters must be populated in order to send to Azure.

    :param package_content: Required. Content for embedded child package. Type: string (or
     Expression with resultType string).
    :type package_content: object
    :param package_last_modified_date: Last modified date for embedded child package.
    :type package_last_modified_date: str
    :param package_name: Name for embedded child package.
    :type package_name: str
    :param package_path: Required. Path for embedded child package. Type: string (or Expression
     with resultType string).
    :type package_path: object
    """

    _validation = {
        'package_content': {'required': True},
        'package_path': {'required': True},
    }

    _attribute_map = {
        'package_content': {'key': 'packageContent', 'type': 'object'},
        'package_last_modified_date': {'key': 'packageLastModifiedDate', 'type': 'str'},
        'package_name': {'key': 'packageName', 'type': 'str'},
        'package_path': {'key': 'packagePath', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        package_content: object,
        package_path: object,
        package_last_modified_date: Optional[str] = None,
        package_name: Optional[str] = None,
        **kwargs
    ):
        super(SSISChildPackage, self).__init__(**kwargs)
        self.package_content = package_content
        self.package_last_modified_date = package_last_modified_date
        self.package_name = package_name
        self.package_path = package_path


class SSISExecutionCredential(msrest.serialization.Model):
    """SSIS package execution credential.

    All required parameters must be populated in order to send to Azure.

    :param domain: Required. Domain for windows authentication.
    :type domain: object
    :param password: Required. Password for windows authentication.
    :type password: ~azure.synapse.models.SecureString
    :param user_name: Required. UseName for windows authentication.
    :type user_name: object
    """

    _validation = {
        'domain': {'required': True},
        'password': {'required': True},
        'user_name': {'required': True},
    }

    _attribute_map = {
        'domain': {'key': 'domain', 'type': 'object'},
        'password': {'key': 'password', 'type': 'SecureString'},
        'user_name': {'key': 'userName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        domain: object,
        password: "SecureString",
        user_name: object,
        **kwargs
    ):
        super(SSISExecutionCredential, self).__init__(**kwargs)
        self.domain = domain
        self.password = password
        self.user_name = user_name


class SSISExecutionParameter(msrest.serialization.Model):
    """SSIS execution parameter.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. SSIS package execution parameter value. Type: string (or Expression
     with resultType string).
    :type value: object
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        value: object,
        **kwargs
    ):
        super(SSISExecutionParameter, self).__init__(**kwargs)
        self.value = value


class SSISLogLocation(msrest.serialization.Model):
    """SSIS package execution log location.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. The type of SSIS log location. Default value: "File".
    :vartype type: str
    :param log_path: Required. The SSIS package execution log path. Type: string (or Expression
     with resultType string).
    :type log_path: object
    :param access_credential: The package execution log access credential.
    :type access_credential: ~azure.synapse.models.SSISAccessCredential
    :param log_refresh_interval: Specifies the interval to refresh log. The default interval is 5
     minutes. Type: string (or Expression with resultType string), pattern:
     ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
    :type log_refresh_interval: object
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'log_path': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'log_path': {'key': 'logPath', 'type': 'object'},
        'access_credential': {'key': 'typeProperties.accessCredential', 'type': 'SSISAccessCredential'},
        'log_refresh_interval': {'key': 'typeProperties.logRefreshInterval', 'type': 'object'},
    }

    type = "File"

    def __init__(
        self,
        *,
        log_path: object,
        access_credential: Optional["SSISAccessCredential"] = None,
        log_refresh_interval: Optional[object] = None,
        **kwargs
    ):
        super(SSISLogLocation, self).__init__(**kwargs)
        self.log_path = log_path
        self.access_credential = access_credential
        self.log_refresh_interval = log_refresh_interval


class SsisObjectMetadataStatusResponse(msrest.serialization.Model):
    """The status of the operation.

    :param name: The operation name.
    :type name: str
    :param error: The operation error message.
    :type error: str
    :param properties: The operation properties.
    :type properties: str
    :param status: The status of the operation.
    :type status: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'error': {'key': 'error', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        error: Optional[str] = None,
        properties: Optional[str] = None,
        status: Optional[str] = None,
        **kwargs
    ):
        super(SsisObjectMetadataStatusResponse, self).__init__(**kwargs)
        self.name = name
        self.error = error
        self.properties = properties
        self.status = status


class SSISPackageLocation(msrest.serialization.Model):
    """SSIS package location.

    :param type: The type of SSIS package location. Possible values include: "SSISDB", "File",
     "InlinePackage".
    :type type: str or ~azure.synapse.models.SsisPackageLocationType
    :param package_path: The SSIS package path. Type: string (or Expression with resultType
     string).
    :type package_path: object
    :param access_credential: The package access credential.
    :type access_credential: ~azure.synapse.models.SSISAccessCredential
    :param child_packages: The embedded child package list.
    :type child_packages: list[~azure.synapse.models.SSISChildPackage]
    :param configuration_path: The configuration file of the package execution. Type: string (or
     Expression with resultType string).
    :type configuration_path: object
    :param package_content: The embedded package content. Type: string (or Expression with
     resultType string).
    :type package_content: object
    :param package_last_modified_date: The embedded package last modified date.
    :type package_last_modified_date: str
    :param package_name: The package name.
    :type package_name: str
    :param package_password: Password of the package.
    :type package_password: ~azure.synapse.models.SecretBase
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'package_path': {'key': 'packagePath', 'type': 'object'},
        'access_credential': {'key': 'typeProperties.accessCredential', 'type': 'SSISAccessCredential'},
        'child_packages': {'key': 'typeProperties.childPackages', 'type': '[SSISChildPackage]'},
        'configuration_path': {'key': 'typeProperties.configurationPath', 'type': 'object'},
        'package_content': {'key': 'typeProperties.packageContent', 'type': 'object'},
        'package_last_modified_date': {'key': 'typeProperties.packageLastModifiedDate', 'type': 'str'},
        'package_name': {'key': 'typeProperties.packageName', 'type': 'str'},
        'package_password': {'key': 'typeProperties.packagePassword', 'type': 'SecretBase'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "SsisPackageLocationType"]] = None,
        package_path: Optional[object] = None,
        access_credential: Optional["SSISAccessCredential"] = None,
        child_packages: Optional[List["SSISChildPackage"]] = None,
        configuration_path: Optional[object] = None,
        package_content: Optional[object] = None,
        package_last_modified_date: Optional[str] = None,
        package_name: Optional[str] = None,
        package_password: Optional["SecretBase"] = None,
        **kwargs
    ):
        super(SSISPackageLocation, self).__init__(**kwargs)
        self.type = type
        self.package_path = package_path
        self.access_credential = access_credential
        self.child_packages = child_packages
        self.configuration_path = configuration_path
        self.package_content = package_content
        self.package_last_modified_date = package_last_modified_date
        self.package_name = package_name
        self.package_password = package_password


class SSISPropertyOverride(msrest.serialization.Model):
    """SSIS property override.

    All required parameters must be populated in order to send to Azure.

    :param is_sensitive: Whether SSIS package property override value is sensitive data. Value will
     be encrypted in SSISDB if it is true.
    :type is_sensitive: bool
    :param value: Required. SSIS package property override value. Type: string (or Expression with
     resultType string).
    :type value: object
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'is_sensitive': {'key': 'isSensitive', 'type': 'bool'},
        'value': {'key': 'value', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        value: object,
        is_sensitive: Optional[bool] = None,
        **kwargs
    ):
        super(SSISPropertyOverride, self).__init__(**kwargs)
        self.is_sensitive = is_sensitive
        self.value = value


class Stages(msrest.serialization.Model):
    """Stages.

    :param name:
    :type name: str
    :param attempt_id:
    :type attempt_id: int
    :param data_avg:
    :type data_avg: int
    :param data_skew_task:
    :type data_skew_task: list[int]
    :param id:
    :type id: int
    :param tasks:
    :type tasks: list[int]
    :param time_avg:
    :type time_avg: int
    :param time_skew_task:
    :type time_skew_task: list[int]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'attempt_id': {'key': 'attemptId', 'type': 'int'},
        'data_avg': {'key': 'dataAvg', 'type': 'int'},
        'data_skew_task': {'key': 'dataSkewTask', 'type': '[int]'},
        'id': {'key': 'id', 'type': 'int'},
        'tasks': {'key': 'tasks', 'type': '[int]'},
        'time_avg': {'key': 'timeAvg', 'type': 'int'},
        'time_skew_task': {'key': 'timeSkewTask', 'type': '[int]'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        attempt_id: Optional[int] = None,
        data_avg: Optional[int] = None,
        data_skew_task: Optional[List[int]] = None,
        id: Optional[int] = None,
        tasks: Optional[List[int]] = None,
        time_avg: Optional[int] = None,
        time_skew_task: Optional[List[int]] = None,
        **kwargs
    ):
        super(Stages, self).__init__(**kwargs)
        self.name = name
        self.attempt_id = attempt_id
        self.data_avg = data_avg
        self.data_skew_task = data_skew_task
        self.id = id
        self.tasks = tasks
        self.time_avg = time_avg
        self.time_skew_task = time_skew_task


class StagingSettings(msrest.serialization.Model):
    """Staging settings.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param path: The path to storage for storing the interim data. Type: string (or Expression with
     resultType string).
    :type path: object
    :param enable_compression: Specifies whether to use compression when copying data via an
     interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
    :type enable_compression: object
    :param linked_service_name: Required. Staging linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    """

    _validation = {
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'path': {'key': 'path', 'type': 'object'},
        'enable_compression': {'key': 'enableCompression', 'type': 'object'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        path: Optional[object] = None,
        enable_compression: Optional[object] = None,
        **kwargs
    ):
        super(StagingSettings, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.path = path
        self.enable_compression = enable_compression
        self.linked_service_name = linked_service_name


class StartDataFlowDebugSessionRequest(msrest.serialization.Model):
    """Request body structure for starting data flow debug session.

    :param data_flow: Data flow instance.
    :type data_flow: ~azure.synapse.models.DataFlowResource
    :param datasets: List of datasets.
    :type datasets: list[~azure.synapse.models.DatasetResource]
    :param debug_settings: Data flow debug settings.
    :type debug_settings: object
    :param incremental_debug: The type of new Databricks cluster.
    :type incremental_debug: bool
    :param linked_services: List of linked services.
    :type linked_services: list[~azure.synapse.models.LinkedServiceResource]
    :param session_id: The ID of data flow debug session.
    :type session_id: str
    :param staging: Staging info for debug session.
    :type staging: object
    """

    _attribute_map = {
        'data_flow': {'key': 'dataFlow', 'type': 'DataFlowResource'},
        'datasets': {'key': 'datasets', 'type': '[DatasetResource]'},
        'debug_settings': {'key': 'debugSettings', 'type': 'object'},
        'incremental_debug': {'key': 'incrementalDebug', 'type': 'bool'},
        'linked_services': {'key': 'linkedServices', 'type': '[LinkedServiceResource]'},
        'session_id': {'key': 'sessionId', 'type': 'str'},
        'staging': {'key': 'staging', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        data_flow: Optional["DataFlowResource"] = None,
        datasets: Optional[List["DatasetResource"]] = None,
        debug_settings: Optional[object] = None,
        incremental_debug: Optional[bool] = None,
        linked_services: Optional[List["LinkedServiceResource"]] = None,
        session_id: Optional[str] = None,
        staging: Optional[object] = None,
        **kwargs
    ):
        super(StartDataFlowDebugSessionRequest, self).__init__(**kwargs)
        self.data_flow = data_flow
        self.datasets = datasets
        self.debug_settings = debug_settings
        self.incremental_debug = incremental_debug
        self.linked_services = linked_services
        self.session_id = session_id
        self.staging = staging


class StartDataFlowDebugSessionResponse(msrest.serialization.Model):
    """Response body structure for starting data flow debug session.

    :param job_version: The ID of data flow debug job version.
    :type job_version: str
    """

    _attribute_map = {
        'job_version': {'key': 'jobVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        job_version: Optional[str] = None,
        **kwargs
    ):
        super(StartDataFlowDebugSessionResponse, self).__init__(**kwargs)
        self.job_version = job_version


class StoredProcedureParameter(msrest.serialization.Model):
    """SQL stored procedure parameter.

    :param type: Stored procedure parameter type. Possible values include: "String", "Int",
     "Int64", "Decimal", "Guid", "Boolean", "Date".
    :type type: str or ~azure.synapse.models.StoredProcedureParameterType
    :param value: Stored procedure parameter value. Type: string (or Expression with resultType
     string).
    :type value: object
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "StoredProcedureParameterType"]] = None,
        value: Optional[object] = None,
        **kwargs
    ):
        super(StoredProcedureParameter, self).__init__(**kwargs)
        self.type = type
        self.value = value


class SwitchActivity(Activity):
    """This activity evaluates an expression and executes activities under the cases property that correspond to the expression evaluation expected in the equals property.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param cases: List of cases that correspond to expected values of the 'on' property. This is an
     optional property and if not provided, the activity will execute activities provided in
     defaultActivities.
    :type cases: list[~azure.synapse.models.SwitchCase]
    :param default_activities: List of activities to execute if no case condition is satisfied.
     This is an optional property and if not provided, the activity will exit without any action.
    :type default_activities: list[~azure.synapse.models.Activity]
    :param on: Required. An expression that would evaluate to a string or integer. This is used to
     determine the block of activities in cases that will be executed.
    :type on: ~azure.synapse.models.Expression
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'on': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'cases': {'key': 'typeProperties.cases', 'type': '[SwitchCase]'},
        'default_activities': {'key': 'typeProperties.defaultActivities', 'type': '[Activity]'},
        'on': {'key': 'typeProperties.on', 'type': 'Expression'},
    }

    def __init__(
        self,
        *,
        name: str,
        on: "Expression",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        cases: Optional[List["SwitchCase"]] = None,
        default_activities: Optional[List["Activity"]] = None,
        **kwargs
    ):
        super(SwitchActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, **kwargs)
        self.type = 'Switch'
        self.cases = cases
        self.default_activities = default_activities
        self.on = on


class SwitchCase(msrest.serialization.Model):
    """Switch cases with have a value and corresponding activities.

    :param activities: List of activities to execute for satisfied case condition.
    :type activities: list[~azure.synapse.models.Activity]
    :param value: Expected value that satisfies the expression result of the 'on' property.
    :type value: str
    """

    _attribute_map = {
        'activities': {'key': 'activities', 'type': '[Activity]'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        activities: Optional[List["Activity"]] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(SwitchCase, self).__init__(**kwargs)
        self.activities = activities
        self.value = value


class SybaseLinkedService(LinkedService):
    """Linked service for Sybase data source.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param schema: Schema name for connection. Type: string (or Expression with resultType string).
    :type schema: object
    :param authentication_type: AuthenticationType to be used for connection. Possible values
     include: "Basic", "Windows".
    :type authentication_type: str or ~azure.synapse.models.SybaseAuthenticationType
    :param database: Required. Database name for connection. Type: string (or Expression with
     resultType string).
    :type database: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: Password for authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param server: Required. Server name for connection. Type: string (or Expression with
     resultType string).
    :type server: object
    :param username: Username for authentication. Type: string (or Expression with resultType
     string).
    :type username: object
    """

    _validation = {
        'type': {'required': True},
        'database': {'required': True},
        'server': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'database': {'key': 'typeProperties.database', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'server': {'key': 'typeProperties.server', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        database: object,
        server: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        schema: Optional[object] = None,
        authentication_type: Optional[Union[str, "SybaseAuthenticationType"]] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(SybaseLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Sybase'
        self.schema = schema
        self.authentication_type = authentication_type
        self.database = database
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.server = server
        self.username = username


class SybaseTableDataset(Dataset):
    """The Sybase table dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The Sybase table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(SybaseTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'SybaseTable'
        self.table_name = table_name


class SynapseRole(msrest.serialization.Model):
    """Synapse role details.

    :param name: Name of the Synapse role.
    :type name: str
    :param id: Role ID.
    :type id: str
    :param is_built_in: Is a built-in role or not.
    :type is_built_in: bool
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'is_built_in': {'key': 'isBuiltIn', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        id: Optional[str] = None,
        is_built_in: Optional[bool] = None,
        **kwargs
    ):
        super(SynapseRole, self).__init__(**kwargs)
        self.name = name
        self.id = id
        self.is_built_in = is_built_in


class Tables(msrest.serialization.Model):
    """Tables.

    :param operation:
    :type operation: str
    :param options:
    :type options: list[~azure.synapse.models.Option]
    """

    _attribute_map = {
        'operation': {'key': 'operation', 'type': 'str'},
        'options': {'key': 'options', 'type': '[Option]'},
    }

    def __init__(
        self,
        *,
        operation: Optional[str] = None,
        options: Optional[List["Option"]] = None,
        **kwargs
    ):
        super(Tables, self).__init__(**kwargs)
        self.operation = operation
        self.options = options


class TeradataLinkedService(LinkedService):
    """Linked service for Teradata data source.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param authentication_type: AuthenticationType to be used for connection. Possible values
     include: "Basic", "Windows".
    :type authentication_type: str or ~azure.synapse.models.TeradataAuthenticationType
    :param connection_string: Teradata ODBC connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param password: Password for authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param server: Server name for connection. Type: string (or Expression with resultType string).
    :type server: object
    :param username: Username for authentication. Type: string (or Expression with resultType
     string).
    :type username: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'authentication_type': {'key': 'typeProperties.authenticationType', 'type': 'str'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'password': {'key': 'typeProperties.password', 'type': 'SecretBase'},
        'server': {'key': 'typeProperties.server', 'type': 'object'},
        'username': {'key': 'typeProperties.username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        authentication_type: Optional[Union[str, "TeradataAuthenticationType"]] = None,
        connection_string: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        password: Optional["SecretBase"] = None,
        server: Optional[object] = None,
        username: Optional[object] = None,
        **kwargs
    ):
        super(TeradataLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Teradata'
        self.authentication_type = authentication_type
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.password = password
        self.server = server
        self.username = username


class TeradataTableDataset(Dataset):
    """The Teradata database dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param database: The database name of Teradata. Type: string (or Expression with resultType
     string).
    :type database: object
    :param table: The table name of Teradata. Type: string (or Expression with resultType string).
    :type table: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'database': {'key': 'typeProperties.database', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        database: Optional[object] = None,
        table: Optional[object] = None,
        **kwargs
    ):
        super(TeradataTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'TeradataTable'
        self.database = database
        self.table = table


class TriggerDependencyProvisioningStatus(msrest.serialization.Model):
    """Defines the response of a provision trigger dependency operation.

    All required parameters must be populated in order to send to Azure.

    :param provisioning_status: Required. Provisioning status.
    :type provisioning_status: str
    :param trigger_name: Required. Trigger name.
    :type trigger_name: str
    """

    _validation = {
        'provisioning_status': {'required': True},
        'trigger_name': {'required': True},
    }

    _attribute_map = {
        'provisioning_status': {'key': 'provisioningStatus', 'type': 'str'},
        'trigger_name': {'key': 'triggerName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        provisioning_status: str,
        trigger_name: str,
        **kwargs
    ):
        super(TriggerDependencyProvisioningStatus, self).__init__(**kwargs)
        self.provisioning_status = provisioning_status
        self.trigger_name = trigger_name


class TriggerListResponse(msrest.serialization.Model):
    """A list of trigger resources.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The link to the next page of results, if any remaining results exist.
    :type next_link: str
    :param value: Required. List of triggers.
    :type value: list[~azure.synapse.models.TriggerResource]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[TriggerResource]'},
    }

    def __init__(
        self,
        *,
        value: List["TriggerResource"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(TriggerListResponse, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class TriggerPipelineReference(msrest.serialization.Model):
    """Pipeline that needs to be triggered with the given parameters.

    :param parameters: Pipeline parameters.
    :type parameters: dict[str, object]
    :param pipeline_reference: Pipeline reference.
    :type pipeline_reference: ~azure.synapse.models.PipelineReference
    """

    _attribute_map = {
        'parameters': {'key': 'parameters', 'type': '{object}'},
        'pipeline_reference': {'key': 'pipelineReference', 'type': 'PipelineReference'},
    }

    def __init__(
        self,
        *,
        parameters: Optional[Dict[str, object]] = None,
        pipeline_reference: Optional["PipelineReference"] = None,
        **kwargs
    ):
        super(TriggerPipelineReference, self).__init__(**kwargs)
        self.parameters = parameters
        self.pipeline_reference = pipeline_reference


class TriggerResource(SubResource):
    """Trigger resource type.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar etag: Etag identifies change in the resource.
    :vartype etag: str
    :ivar id: The resource identifier.
    :vartype id: str
    :param properties: Required. Properties of the trigger.
    :type properties: ~azure.synapse.models.Trigger
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'id': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'Trigger'},
    }

    def __init__(
        self,
        *,
        properties: "Trigger",
        **kwargs
    ):
        super(TriggerResource, self).__init__(**kwargs)
        self.properties = properties


class TriggerRun(msrest.serialization.Model):
    """Trigger runs.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :ivar message: Trigger error message.
    :vartype message: str
    :ivar properties: List of property name and value related to trigger run. Name, value pair
     depends on type of trigger.
    :vartype properties: dict[str, str]
    :ivar status: Trigger run status. Possible values include: "Succeeded", "Failed", "Inprogress".
    :vartype status: str or ~azure.synapse.models.TriggerRunStatus
    :ivar trigger_name: Trigger name.
    :vartype trigger_name: str
    :ivar trigger_run_id: Trigger run id.
    :vartype trigger_run_id: str
    :ivar trigger_run_timestamp: Trigger run start time.
    :vartype trigger_run_timestamp: ~datetime.datetime
    :ivar trigger_type: Trigger type.
    :vartype trigger_type: str
    :ivar triggered_pipelines: List of pipeline name and run Id triggered by the trigger run.
    :vartype triggered_pipelines: dict[str, str]
    """

    _validation = {
        'message': {'readonly': True},
        'properties': {'readonly': True},
        'status': {'readonly': True},
        'trigger_name': {'readonly': True},
        'trigger_run_id': {'readonly': True},
        'trigger_run_timestamp': {'readonly': True},
        'trigger_type': {'readonly': True},
        'triggered_pipelines': {'readonly': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'message': {'key': 'message', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'status': {'key': 'status', 'type': 'str'},
        'trigger_name': {'key': 'triggerName', 'type': 'str'},
        'trigger_run_id': {'key': 'triggerRunId', 'type': 'str'},
        'trigger_run_timestamp': {'key': 'triggerRunTimestamp', 'type': 'iso-8601'},
        'trigger_type': {'key': 'triggerType', 'type': 'str'},
        'triggered_pipelines': {'key': 'triggeredPipelines', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(TriggerRun, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.message = None
        self.properties = None
        self.status = None
        self.trigger_name = None
        self.trigger_run_id = None
        self.trigger_run_timestamp = None
        self.trigger_type = None
        self.triggered_pipelines = None


class TriggerRunsQueryResponse(msrest.serialization.Model):
    """A list of trigger runs.

    All required parameters must be populated in order to send to Azure.

    :param continuation_token: The continuation token for getting the next page of results, if any
     remaining results exist, null otherwise.
    :type continuation_token: str
    :param value: Required. List of trigger runs.
    :type value: list[~azure.synapse.models.TriggerRun]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'continuation_token': {'key': 'continuationToken', 'type': 'str'},
        'value': {'key': 'value', 'type': '[TriggerRun]'},
    }

    def __init__(
        self,
        *,
        value: List["TriggerRun"],
        continuation_token: Optional[str] = None,
        **kwargs
    ):
        super(TriggerRunsQueryResponse, self).__init__(**kwargs)
        self.continuation_token = continuation_token
        self.value = value


class TriggerSubscriptionOperationStatus(msrest.serialization.Model):
    """Defines the response of a trigger subscription operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: Event Subscription Status. Possible values include: "Enabled", "Provisioning",
     "Deprovisioning", "Disabled", "Unknown".
    :vartype status: str or ~azure.synapse.models.EventSubscriptionStatus
    :ivar trigger_name: Trigger name.
    :vartype trigger_name: str
    """

    _validation = {
        'status': {'readonly': True},
        'trigger_name': {'readonly': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'trigger_name': {'key': 'triggerName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TriggerSubscriptionOperationStatus, self).__init__(**kwargs)
        self.status = None
        self.trigger_name = None


class UntilActivity(Activity):
    """This activity executes inner activities until the specified boolean expression results to true or timeout is reached, whichever is earlier.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param activities: Required. List of activities to execute.
    :type activities: list[~azure.synapse.models.Activity]
    :param expression: Required. An expression that would evaluate to Boolean. The loop will
     continue until this expression evaluates to true.
    :type expression: ~azure.synapse.models.Expression
    :param timeout: Specifies the timeout for the activity to run. If there is no value specified,
     it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or
     Expression with resultType string), pattern:
     ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). Type: string (or Expression with
     resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
    :type timeout: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'activities': {'required': True},
        'expression': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'activities': {'key': 'typeProperties.activities', 'type': '[Activity]'},
        'expression': {'key': 'typeProperties.expression', 'type': 'Expression'},
        'timeout': {'key': 'typeProperties.timeout', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        activities: List["Activity"],
        expression: "Expression",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        timeout: Optional[object] = None,
        **kwargs
    ):
        super(UntilActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, **kwargs)
        self.type = 'Until'
        self.activities = activities
        self.expression = expression
        self.timeout = timeout


class UserProperty(msrest.serialization.Model):
    """User property.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. User property name.
    :type name: str
    :param value: Required. User property value. Type: string (or Expression with resultType
     string).
    :type value: object
    """

    _validation = {
        'name': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        value: object,
        **kwargs
    ):
        super(UserProperty, self).__init__(**kwargs)
        self.name = name
        self.value = value


class ValidationActivity(Activity):
    """This activity verifies that an external resource exists.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param child_items: Can be used if dataset points to a folder. If set to true, the folder must
     have at least one file. If set to false, the folder must be empty. Type: boolean (or Expression
     with resultType boolean).
    :type child_items: object
    :param dataset: Required. Validation activity dataset reference.
    :type dataset: ~azure.synapse.models.DatasetReference
    :param minimum_size: Can be used if dataset points to a file. The file must be greater than or
     equal in size to the value specified. Type: integer (or Expression with resultType integer).
    :type minimum_size: object
    :param sleep: A delay in seconds between validation attempts. If no value is specified, 10
     seconds will be used as the default. Type: integer (or Expression with resultType integer).
    :type sleep: object
    :param timeout: Specifies the timeout for the activity to run. If there is no value specified,
     it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or
     Expression with resultType string), pattern:
     ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
    :type timeout: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'dataset': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'child_items': {'key': 'typeProperties.childItems', 'type': 'object'},
        'dataset': {'key': 'typeProperties.dataset', 'type': 'DatasetReference'},
        'minimum_size': {'key': 'typeProperties.minimumSize', 'type': 'object'},
        'sleep': {'key': 'typeProperties.sleep', 'type': 'object'},
        'timeout': {'key': 'typeProperties.timeout', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        dataset: "DatasetReference",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        child_items: Optional[object] = None,
        minimum_size: Optional[object] = None,
        sleep: Optional[object] = None,
        timeout: Optional[object] = None,
        **kwargs
    ):
        super(ValidationActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, **kwargs)
        self.type = 'Validation'
        self.child_items = child_items
        self.dataset = dataset
        self.minimum_size = minimum_size
        self.sleep = sleep
        self.timeout = timeout


class VariableSpecification(msrest.serialization.Model):
    """Definition of a single variable for a Pipeline.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Variable type. Possible values include: "String", "Bool", "Boolean",
     "Array".
    :type type: str or ~azure.synapse.models.VariableType
    :param default_value: Default value of variable.
    :type default_value: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'default_value': {'key': 'defaultValue', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "VariableType"],
        default_value: Optional[object] = None,
        **kwargs
    ):
        super(VariableSpecification, self).__init__(**kwargs)
        self.type = type
        self.default_value = default_value


class VerticaLinkedService(LinkedService):
    """Vertica linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param connection_string: An ODBC connection string. Type: string, SecureString or
     AzureKeyVaultSecretReference.
    :type connection_string: object
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param pwd: The Azure key vault secret reference of password in connection string.
    :type pwd: ~azure.synapse.models.AzureKeyVaultSecretReference
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'connection_string': {'key': 'typeProperties.connectionString', 'type': 'object'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'pwd': {'key': 'typeProperties.pwd', 'type': 'AzureKeyVaultSecretReference'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        connection_string: Optional[object] = None,
        encrypted_credential: Optional[object] = None,
        pwd: Optional["AzureKeyVaultSecretReference"] = None,
        **kwargs
    ):
        super(VerticaLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Vertica'
        self.connection_string = connection_string
        self.encrypted_credential = encrypted_credential
        self.pwd = pwd


class VerticaTableDataset(Dataset):
    """Vertica dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param schema_type_properties_schema: The schema name of the Vertica. Type: string (or
     Expression with resultType string).
    :type schema_type_properties_schema: object
    :param table: The table name of the Vertica. Type: string (or Expression with resultType
     string).
    :type table: object
    :param table_name: This property will be retired. Please consider using schema + table
     properties instead.
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'schema_type_properties_schema': {'key': 'typeProperties.schema', 'type': 'object'},
        'table': {'key': 'typeProperties.table', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        schema_type_properties_schema: Optional[object] = None,
        table: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(VerticaTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'VerticaTable'
        self.schema_type_properties_schema = schema_type_properties_schema
        self.table = table
        self.table_name = table_name


class WaitActivity(Activity):
    """This activity suspends pipeline execution for the specified interval.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param wait_time_in_seconds: Required. Duration in seconds.
    :type wait_time_in_seconds: int
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'wait_time_in_seconds': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'wait_time_in_seconds': {'key': 'typeProperties.waitTimeInSeconds', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        name: str,
        wait_time_in_seconds: int,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        **kwargs
    ):
        super(WaitActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, **kwargs)
        self.type = 'Wait'
        self.wait_time_in_seconds = wait_time_in_seconds


class WebActivity(ExecutionActivity):
    """Web activity.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :param linked_service_name: Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param policy: Activity policy.
    :type policy: ~azure.synapse.models.ActivityPolicy
    :param method: Required. Rest API method for target endpoint. Possible values include: "GET",
     "POST", "PUT", "DELETE".
    :type method: str or ~azure.synapse.models.WebActivityMethod
    :param authentication: Authentication method used for calling the endpoint.
    :type authentication: ~azure.synapse.models.WebActivityAuthentication
    :param body: Represents the payload that will be sent to the endpoint. Required for POST/PUT
     method, not allowed for GET method Type: string (or Expression with resultType string).
    :type body: object
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param datasets: List of datasets passed to web endpoint.
    :type datasets: list[~azure.synapse.models.DatasetReference]
    :param headers: Represents the headers that will be sent to the request. For example, to set
     the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type":
     "application/json" }. Type: string (or Expression with resultType string).
    :type headers: object
    :param linked_services: List of linked services passed to web endpoint.
    :type linked_services: list[~azure.synapse.models.LinkedServiceReference]
    :param url: Required. Web activity target endpoint and path. Type: string (or Expression with
     resultType string).
    :type url: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'method': {'required': True},
        'url': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'policy': {'key': 'policy', 'type': 'ActivityPolicy'},
        'method': {'key': 'typeProperties.method', 'type': 'str'},
        'authentication': {'key': 'typeProperties.authentication', 'type': 'WebActivityAuthentication'},
        'body': {'key': 'typeProperties.body', 'type': 'object'},
        'connect_via': {'key': 'typeProperties.connectVia', 'type': 'IntegrationRuntimeReference'},
        'datasets': {'key': 'typeProperties.datasets', 'type': '[DatasetReference]'},
        'headers': {'key': 'typeProperties.headers', 'type': 'object'},
        'linked_services': {'key': 'typeProperties.linkedServices', 'type': '[LinkedServiceReference]'},
        'url': {'key': 'typeProperties.url', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        method: Union[str, "WebActivityMethod"],
        url: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        linked_service_name: Optional["LinkedServiceReference"] = None,
        policy: Optional["ActivityPolicy"] = None,
        authentication: Optional["WebActivityAuthentication"] = None,
        body: Optional[object] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        datasets: Optional[List["DatasetReference"]] = None,
        headers: Optional[object] = None,
        linked_services: Optional[List["LinkedServiceReference"]] = None,
        **kwargs
    ):
        super(WebActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, linked_service_name=linked_service_name, policy=policy, **kwargs)
        self.type = 'WebActivity'
        self.method = method
        self.authentication = authentication
        self.body = body
        self.connect_via = connect_via
        self.datasets = datasets
        self.headers = headers
        self.linked_services = linked_services
        self.url = url


class WebActivityAuthentication(msrest.serialization.Model):
    """Web activity authentication properties.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Web activity authentication (Basic/ClientCertificate/MSI).
    :type type: str
    :param password: Password for the PFX file or basic authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param pfx: Base64-encoded contents of a PFX file.
    :type pfx: ~azure.synapse.models.SecretBase
    :param resource: Resource for which Azure Auth token will be requested when using MSI
     Authentication.
    :type resource: str
    :param username: Web activity authentication user name for basic authentication.
    :type username: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'password': {'key': 'password', 'type': 'SecretBase'},
        'pfx': {'key': 'pfx', 'type': 'SecretBase'},
        'resource': {'key': 'resource', 'type': 'str'},
        'username': {'key': 'username', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: str,
        password: Optional["SecretBase"] = None,
        pfx: Optional["SecretBase"] = None,
        resource: Optional[str] = None,
        username: Optional[str] = None,
        **kwargs
    ):
        super(WebActivityAuthentication, self).__init__(**kwargs)
        self.type = type
        self.password = password
        self.pfx = pfx
        self.resource = resource
        self.username = username


class WebLinkedServiceTypeProperties(msrest.serialization.Model):
    """Base definition of WebLinkedServiceTypeProperties, this typeProperties is polymorphic based on authenticationType, so not flattened in SDK models.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: WebBasicAuthentication, WebClientCertificateAuthentication.

    All required parameters must be populated in order to send to Azure.

    :param authentication_type: Required. Type of authentication used to connect to the web table
     source.Constant filled by server.  Possible values include: "Basic", "Anonymous",
     "ClientCertificate".
    :type authentication_type: str or ~azure.synapse.models.WebAuthenticationType
    :param url: Required. The URL of the web service endpoint, e.g. http://www.microsoft.com .
     Type: string (or Expression with resultType string).
    :type url: object
    """

    _validation = {
        'authentication_type': {'required': True},
        'url': {'required': True},
    }

    _attribute_map = {
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'url': {'key': 'url', 'type': 'object'},
    }

    _subtype_map = {
        'authentication_type': {'Basic': 'WebBasicAuthentication', 'ClientCertificate': 'WebClientCertificateAuthentication'}
    }

    def __init__(
        self,
        *,
        url: object,
        **kwargs
    ):
        super(WebLinkedServiceTypeProperties, self).__init__(**kwargs)
        self.authentication_type = None
        self.url = url


class WebBasicAuthentication(WebLinkedServiceTypeProperties):
    """A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.

    All required parameters must be populated in order to send to Azure.

    :param authentication_type: Required. Type of authentication used to connect to the web table
     source.Constant filled by server.  Possible values include: "Basic", "Anonymous",
     "ClientCertificate".
    :type authentication_type: str or ~azure.synapse.models.WebAuthenticationType
    :param url: Required. The URL of the web service endpoint, e.g. http://www.microsoft.com .
     Type: string (or Expression with resultType string).
    :type url: object
    :param password: Required. The password for Basic authentication.
    :type password: ~azure.synapse.models.SecretBase
    :param username: Required. User name for Basic authentication. Type: string (or Expression with
     resultType string).
    :type username: object
    """

    _validation = {
        'authentication_type': {'required': True},
        'url': {'required': True},
        'password': {'required': True},
        'username': {'required': True},
    }

    _attribute_map = {
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'url': {'key': 'url', 'type': 'object'},
        'password': {'key': 'password', 'type': 'SecretBase'},
        'username': {'key': 'username', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        url: object,
        password: "SecretBase",
        username: object,
        **kwargs
    ):
        super(WebBasicAuthentication, self).__init__(url=url, **kwargs)
        self.authentication_type = 'Basic'
        self.password = password
        self.username = username


class WebClientCertificateAuthentication(WebLinkedServiceTypeProperties):
    """A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.

    All required parameters must be populated in order to send to Azure.

    :param authentication_type: Required. Type of authentication used to connect to the web table
     source.Constant filled by server.  Possible values include: "Basic", "Anonymous",
     "ClientCertificate".
    :type authentication_type: str or ~azure.synapse.models.WebAuthenticationType
    :param url: Required. The URL of the web service endpoint, e.g. http://www.microsoft.com .
     Type: string (or Expression with resultType string).
    :type url: object
    :param password: Required. Password for the PFX file.
    :type password: ~azure.synapse.models.SecretBase
    :param pfx: Required. Base64-encoded contents of a PFX file.
    :type pfx: ~azure.synapse.models.SecretBase
    """

    _validation = {
        'authentication_type': {'required': True},
        'url': {'required': True},
        'password': {'required': True},
        'pfx': {'required': True},
    }

    _attribute_map = {
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'url': {'key': 'url', 'type': 'object'},
        'password': {'key': 'password', 'type': 'SecretBase'},
        'pfx': {'key': 'pfx', 'type': 'SecretBase'},
    }

    def __init__(
        self,
        *,
        url: object,
        password: "SecretBase",
        pfx: "SecretBase",
        **kwargs
    ):
        super(WebClientCertificateAuthentication, self).__init__(url=url, **kwargs)
        self.authentication_type = 'ClientCertificate'
        self.password = password
        self.pfx = pfx


class WebHookActivity(Activity):
    """WebHook activity.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Required. Activity name.
    :type name: str
    :param type: Required. Type of activity.Constant filled by server.
    :type type: str
    :param description: Activity description.
    :type description: str
    :param depends_on: Activity depends on condition.
    :type depends_on: list[~azure.synapse.models.ActivityDependency]
    :param user_properties: Activity user properties.
    :type user_properties: list[~azure.synapse.models.UserProperty]
    :ivar method: Required. Rest API method for target endpoint. Default value: "POST".
    :vartype method: str
    :param authentication: Authentication method used for calling the endpoint.
    :type authentication: ~azure.synapse.models.WebActivityAuthentication
    :param body: Represents the payload that will be sent to the endpoint. Required for POST/PUT
     method, not allowed for GET method Type: string (or Expression with resultType string).
    :type body: object
    :param headers: Represents the headers that will be sent to the request. For example, to set
     the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type":
     "application/json" }. Type: string (or Expression with resultType string).
    :type headers: object
    :param report_status_on_call_back: When set to true,
     statusCode, output and error in callback request body will be
     consumed by activity. The activity can be marked as failed by setting statusCode >= 400 in
     callback request. Default is false. Type: boolean (or Expression with resultType boolean).
    :type report_status_on_call_back: object
    :param timeout: The timeout within which the webhook should be called back. If there is no
     value specified, it defaults to 10 minutes. Type: string. Pattern:
     ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
    :type timeout: str
    :param url: Required. WebHook activity target endpoint and path. Type: string (or Expression
     with resultType string).
    :type url: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'method': {'required': True, 'constant': True},
        'url': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[ActivityDependency]'},
        'user_properties': {'key': 'userProperties', 'type': '[UserProperty]'},
        'method': {'key': 'typeProperties.method', 'type': 'str'},
        'authentication': {'key': 'typeProperties.authentication', 'type': 'WebActivityAuthentication'},
        'body': {'key': 'typeProperties.body', 'type': 'object'},
        'headers': {'key': 'typeProperties.headers', 'type': 'object'},
        'report_status_on_call_back': {'key': 'typeProperties.reportStatusOnCallBack', 'type': 'object'},
        'timeout': {'key': 'typeProperties.timeout', 'type': 'str'},
        'url': {'key': 'typeProperties.url', 'type': 'object'},
    }

    method = "POST"

    def __init__(
        self,
        *,
        name: str,
        url: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        depends_on: Optional[List["ActivityDependency"]] = None,
        user_properties: Optional[List["UserProperty"]] = None,
        authentication: Optional["WebActivityAuthentication"] = None,
        body: Optional[object] = None,
        headers: Optional[object] = None,
        report_status_on_call_back: Optional[object] = None,
        timeout: Optional[str] = None,
        **kwargs
    ):
        super(WebHookActivity, self).__init__(additional_properties=additional_properties, name=name, description=description, depends_on=depends_on, user_properties=user_properties, **kwargs)
        self.type = 'WebHook'
        self.authentication = authentication
        self.body = body
        self.headers = headers
        self.report_status_on_call_back = report_status_on_call_back
        self.timeout = timeout
        self.url = url


class WebLinkedService(LinkedService):
    """Web linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param type_properties: Required. Web linked service properties.
    :type type_properties: ~azure.synapse.models.WebLinkedServiceTypeProperties
    """

    _validation = {
        'type': {'required': True},
        'type_properties': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'type_properties': {'key': 'typeProperties', 'type': 'WebLinkedServiceTypeProperties'},
    }

    def __init__(
        self,
        *,
        type_properties: "WebLinkedServiceTypeProperties",
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        **kwargs
    ):
        super(WebLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Web'
        self.type_properties = type_properties


class WebTableDataset(Dataset):
    """The dataset points to a HTML table in the web page.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param path: The relative URL to the web page from the linked service URL. Type: string (or
     Expression with resultType string).
    :type path: object
    :param index: Required. The zero-based index of the table in the web page. Type: integer (or
     Expression with resultType integer), minimum: 0.
    :type index: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
        'index': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'path': {'key': 'typeProperties.path', 'type': 'object'},
        'index': {'key': 'typeProperties.index', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        index: object,
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        path: Optional[object] = None,
        **kwargs
    ):
        super(WebTableDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'WebTable'
        self.path = path
        self.index = index


class Workspace(Resource):
    """Workspace resource type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar e_tag: Etag identifies change in the resource.
    :vartype e_tag: str
    :ivar id: The resource identifier.
    :vartype id: str
    :param location: The resource location.
    :type location: str
    :param tags: A set of tags. The resource tags.
    :type tags: dict[str, str]
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param identity: Managed service identity of the workspace.
    :type identity: ~azure.synapse.models.WorkspaceIdentity
    :ivar create_time: Time the workspace was created in ISO8601 format.
    :vartype create_time: ~datetime.datetime
    :param default_sql_server: Linked service reference.
    :type default_sql_server: ~azure.synapse.models.LinkedServiceReference
    :param default_storage: Linked service reference.
    :type default_storage: ~azure.synapse.models.LinkedServiceReference
    :ivar provisioning_state: Workspace provisioning state, example Succeeded.
    :vartype provisioning_state: str
    :ivar version: Version of the workspace.
    :vartype version: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'e_tag': {'readonly': True},
        'id': {'readonly': True},
        'create_time': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'version': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'identity': {'key': 'identity', 'type': 'WorkspaceIdentity'},
        'create_time': {'key': 'properties.createTime', 'type': 'iso-8601'},
        'default_sql_server': {'key': 'properties.defaultSqlServer', 'type': 'LinkedServiceReference'},
        'default_storage': {'key': 'properties.defaultStorage', 'type': 'LinkedServiceReference'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'version': {'key': 'properties.version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        identity: Optional["WorkspaceIdentity"] = None,
        default_sql_server: Optional["LinkedServiceReference"] = None,
        default_storage: Optional["LinkedServiceReference"] = None,
        **kwargs
    ):
        super(Workspace, self).__init__(location=location, tags=tags, **kwargs)
        self.additional_properties = additional_properties
        self.identity = identity
        self.create_time = None
        self.default_sql_server = default_sql_server
        self.default_storage = default_storage
        self.provisioning_state = None
        self.version = None


class WorkspaceIdentity(msrest.serialization.Model):
    """Identity properties of the workspace resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. The identity type. Currently the only supported type is 'SystemAssigned'.
     Default value: "SystemAssigned".
    :vartype type: str
    :ivar principal_id: The principal id of the identity.
    :vartype principal_id: str
    :ivar tenant_id: The client tenant id of the identity.
    :vartype tenant_id: str
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
    }

    type = "SystemAssigned"

    def __init__(
        self,
        **kwargs
    ):
        super(WorkspaceIdentity, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None


class WorkspaceUpdateParameters(msrest.serialization.Model):
    """Parameters for updating a workspace resource.

    :param identity: Managed service identity of the workspace.
    :type identity: ~azure.synapse.models.WorkspaceIdentity
    :param tags: A set of tags. The resource tags.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'identity': {'key': 'identity', 'type': 'WorkspaceIdentity'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        identity: Optional["WorkspaceIdentity"] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(WorkspaceUpdateParameters, self).__init__(**kwargs)
        self.identity = identity
        self.tags = tags


class XeroLinkedService(LinkedService):
    """Xero Service linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param consumer_key: The consumer key associated with the Xero application.
    :type consumer_key: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param host: Required. The endpoint of the Xero server. (i.e. api.xero.com).
    :type host: object
    :param private_key: The private key from the .pem file that was generated for your Xero private
     application. You must include all the text from the .pem file, including the Unix line endings(
     ).
    :type private_key: ~azure.synapse.models.SecretBase
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true.
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true.
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true.
    :type use_peer_verification: object
    """

    _validation = {
        'type': {'required': True},
        'host': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'consumer_key': {'key': 'typeProperties.consumerKey', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'host': {'key': 'typeProperties.host', 'type': 'object'},
        'private_key': {'key': 'typeProperties.privateKey', 'type': 'SecretBase'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        host: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        consumer_key: Optional["SecretBase"] = None,
        encrypted_credential: Optional[object] = None,
        private_key: Optional["SecretBase"] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        **kwargs
    ):
        super(XeroLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Xero'
        self.consumer_key = consumer_key
        self.encrypted_credential = encrypted_credential
        self.host = host
        self.private_key = private_key
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification


class XeroObjectDataset(Dataset):
    """Xero Service dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(XeroObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'XeroObject'
        self.table_name = table_name


class ZohoLinkedService(LinkedService):
    """Zoho server linked service.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of linked service.Constant filled by server.
    :type type: str
    :param description: Linked service description.
    :type description: str
    :param annotations: List of tags that can be used for describing the linked service.
    :type annotations: list[object]
    :param connect_via: The integration runtime reference.
    :type connect_via: ~azure.synapse.models.IntegrationRuntimeReference
    :param parameters: Parameters for linked service.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param access_token: The access token for Zoho authentication.
    :type access_token: ~azure.synapse.models.SecretBase
    :param encrypted_credential: The encrypted credential used for authentication. Credentials are
     encrypted using the integration runtime credential manager. Type: string (or Expression with
     resultType string).
    :type encrypted_credential: object
    :param endpoint: Required. The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private).
    :type endpoint: object
    :param use_encrypted_endpoints: Specifies whether the data source endpoints are encrypted using
     HTTPS. The default value is true.
    :type use_encrypted_endpoints: object
    :param use_host_verification: Specifies whether to require the host name in the server's
     certificate to match the host name of the server when connecting over SSL. The default value is
     true.
    :type use_host_verification: object
    :param use_peer_verification: Specifies whether to verify the identity of the server when
     connecting over SSL. The default value is true.
    :type use_peer_verification: object
    """

    _validation = {
        'type': {'required': True},
        'endpoint': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'connect_via': {'key': 'connectVia', 'type': 'IntegrationRuntimeReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'access_token': {'key': 'typeProperties.accessToken', 'type': 'SecretBase'},
        'encrypted_credential': {'key': 'typeProperties.encryptedCredential', 'type': 'object'},
        'endpoint': {'key': 'typeProperties.endpoint', 'type': 'object'},
        'use_encrypted_endpoints': {'key': 'typeProperties.useEncryptedEndpoints', 'type': 'object'},
        'use_host_verification': {'key': 'typeProperties.useHostVerification', 'type': 'object'},
        'use_peer_verification': {'key': 'typeProperties.usePeerVerification', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        endpoint: object,
        additional_properties: Optional[Dict[str, object]] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        connect_via: Optional["IntegrationRuntimeReference"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        access_token: Optional["SecretBase"] = None,
        encrypted_credential: Optional[object] = None,
        use_encrypted_endpoints: Optional[object] = None,
        use_host_verification: Optional[object] = None,
        use_peer_verification: Optional[object] = None,
        **kwargs
    ):
        super(ZohoLinkedService, self).__init__(additional_properties=additional_properties, description=description, annotations=annotations, connect_via=connect_via, parameters=parameters, **kwargs)
        self.type = 'Zoho'
        self.access_token = access_token
        self.encrypted_credential = encrypted_credential
        self.endpoint = endpoint
        self.use_encrypted_endpoints = use_encrypted_endpoints
        self.use_host_verification = use_host_verification
        self.use_peer_verification = use_peer_verification


class ZohoObjectDataset(Dataset):
    """Zoho server dataset.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Required. Type of dataset.Constant filled by server.
    :type type: str
    :param schema: Columns that define the physical type schema of the dataset. Type: array (or
     Expression with resultType array), itemType: DatasetSchemaDataElement.
    :type schema: object
    :param description: Dataset description.
    :type description: str
    :param annotations: List of tags that can be used for describing the Dataset.
    :type annotations: list[object]
    :param folder: The folder that this Dataset is in. If not specified, Dataset will appear at the
     root level.
    :type folder: ~azure.synapse.models.DatasetFolder
    :param linked_service_name: Required. Linked service reference.
    :type linked_service_name: ~azure.synapse.models.LinkedServiceReference
    :param parameters: Parameters for dataset.
    :type parameters: dict[str, ~azure.synapse.models.ParameterSpecification]
    :param structure: Columns that define the structure of the dataset. Type: array (or Expression
     with resultType array), itemType: DatasetDataElement.
    :type structure: object
    :param table_name: The table name. Type: string (or Expression with resultType string).
    :type table_name: object
    """

    _validation = {
        'type': {'required': True},
        'linked_service_name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'schema': {'key': 'schema', 'type': 'object'},
        'description': {'key': 'description', 'type': 'str'},
        'annotations': {'key': 'annotations', 'type': '[object]'},
        'folder': {'key': 'folder', 'type': 'DatasetFolder'},
        'linked_service_name': {'key': 'linkedServiceName', 'type': 'LinkedServiceReference'},
        'parameters': {'key': 'parameters', 'type': '{ParameterSpecification}'},
        'structure': {'key': 'structure', 'type': 'object'},
        'table_name': {'key': 'typeProperties.tableName', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        linked_service_name: "LinkedServiceReference",
        additional_properties: Optional[Dict[str, object]] = None,
        schema: Optional[object] = None,
        description: Optional[str] = None,
        annotations: Optional[List[object]] = None,
        folder: Optional["DatasetFolder"] = None,
        parameters: Optional[Dict[str, "ParameterSpecification"]] = None,
        structure: Optional[object] = None,
        table_name: Optional[object] = None,
        **kwargs
    ):
        super(ZohoObjectDataset, self).__init__(additional_properties=additional_properties, schema=schema, description=description, annotations=annotations, folder=folder, linked_service_name=linked_service_name, parameters=parameters, structure=structure, **kwargs)
        self.type = 'ZohoObject'
        self.table_name = table_name
