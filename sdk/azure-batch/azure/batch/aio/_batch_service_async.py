# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

from ._configuration_async import BatchServiceConfiguration
from .operations_async import ApplicationOperations
from .operations_async import PoolOperations
from .operations_async import AccountOperations
from .operations_async import JobOperations
from .operations_async import CertificateOperations
from .operations_async import FileOperations
from .operations_async import JobScheduleOperations
from .operations_async import TaskOperations
from .operations_async import ComputeNodeOperations
from .. import models


class BatchService(object):
    """A client for issuing REST requests to the Azure Batch service.

    :ivar application: ApplicationOperations operations
    :vartype application: azure.batch.aio.operations_async.ApplicationOperations
    :ivar pool: PoolOperations operations
    :vartype pool: azure.batch.aio.operations_async.PoolOperations
    :ivar account: AccountOperations operations
    :vartype account: azure.batch.aio.operations_async.AccountOperations
    :ivar job: JobOperations operations
    :vartype job: azure.batch.aio.operations_async.JobOperations
    :ivar certificate: CertificateOperations operations
    :vartype certificate: azure.batch.aio.operations_async.CertificateOperations
    :ivar file: FileOperations operations
    :vartype file: azure.batch.aio.operations_async.FileOperations
    :ivar job_schedule: JobScheduleOperations operations
    :vartype job_schedule: azure.batch.aio.operations_async.JobScheduleOperations
    :ivar task: TaskOperations operations
    :vartype task: azure.batch.aio.operations_async.TaskOperations
    :ivar compute_node: ComputeNodeOperations operations
    :vartype compute_node: azure.batch.aio.operations_async.ComputeNodeOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: azure.core.credentials.AsyncTokenCredential
    :param batch_url: The base URL for all Azure Batch service requests.
    :type batch_url: str
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        batch_url: str,
        **kwargs: Any
    ) -> None:
        base_url = '{batchUrl}'
        self._config = BatchServiceConfiguration(credential, batch_url, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.application = ApplicationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.pool = PoolOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.account = AccountOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.job = JobOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.certificate = CertificateOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.file = FileOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.job_schedule = JobScheduleOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.task = TaskOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.compute_node = ComputeNodeOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "BatchService":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
