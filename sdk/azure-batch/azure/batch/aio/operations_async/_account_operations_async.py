# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class AccountOperations:
    """AccountOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.batch.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_supported_images(
        self,
        account_list_supported_images_options: Optional["models.AccountListSupportedImagesOptions"] = None,
        **kwargs
    ) -> "models.AccountListSupportedImagesResult":
        """Lists all Virtual Machine Images supported by the Azure Batch service.

        Lists all Virtual Machine Images supported by the Azure Batch service.

        :param account_list_supported_images_options: Parameter group.
        :type account_list_supported_images_options: ~azure.batch.models.AccountListSupportedImagesOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AccountListSupportedImagesResult or the result of cls(response)
        :rtype: ~azure.batch.models.AccountListSupportedImagesResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.AccountListSupportedImagesResult"]
        error_map = kwargs.pop('error_map', {404: ResourceNotFoundError, 409: ResourceExistsError})
        
        _filter = None
        _max_results = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if account_list_supported_images_options is not None:
            _filter = account_list_supported_images_options.filter
            _max_results = account_list_supported_images_options.max_results
            _timeout = account_list_supported_images_options.timeout
            _client_request_id = account_list_supported_images_options.client_request_id
            _return_client_request_id = account_list_supported_images_options.return_client_request_id
            _ocp_date = account_list_supported_images_options.ocp_date
        api_version = "2020-03-01.11.0"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_supported_images.metadata['url']
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                }
                url = self._client.format_url(url, **path_format_arguments)

            # Construct parameters
            query_parameters = {}  # type: Dict[str, Any]
            if _filter is not None:
                query_parameters['$filter'] = self._serialize.query("filter", _filter, 'str')
            if _max_results is not None:
                query_parameters['maxresults'] = self._serialize.query("max_results", _max_results, 'int', maximum=1000, minimum=1)
            if _timeout is not None:
                query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            if _client_request_id is not None:
                header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
            if _return_client_request_id is not None:
                header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
            if _ocp_date is not None:
                header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('AccountListSupportedImagesResult', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.BatchError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_supported_images.metadata = {'url': '/supportedimages'}

    def list_pool_node_counts(
        self,
        account_list_pool_node_counts_options: Optional["models.AccountListPoolNodeCountsOptions"] = None,
        **kwargs
    ) -> "models.PoolNodeCountsListResult":
        """Gets the number of Compute Nodes in each state, grouped by Pool.

        :param account_list_pool_node_counts_options: Parameter group.
        :type account_list_pool_node_counts_options: ~azure.batch.models.AccountListPoolNodeCountsOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PoolNodeCountsListResult or the result of cls(response)
        :rtype: ~azure.batch.models.PoolNodeCountsListResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.PoolNodeCountsListResult"]
        error_map = kwargs.pop('error_map', {404: ResourceNotFoundError, 409: ResourceExistsError})
        
        _filter = None
        _max_results = None
        _timeout = None
        _client_request_id = None
        _return_client_request_id = None
        _ocp_date = None
        if account_list_pool_node_counts_options is not None:
            _filter = account_list_pool_node_counts_options.filter
            _max_results = account_list_pool_node_counts_options.max_results
            _timeout = account_list_pool_node_counts_options.timeout
            _client_request_id = account_list_pool_node_counts_options.client_request_id
            _return_client_request_id = account_list_pool_node_counts_options.return_client_request_id
            _ocp_date = account_list_pool_node_counts_options.ocp_date
        api_version = "2020-03-01.11.0"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_pool_node_counts.metadata['url']
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link
                path_format_arguments = {
                    'batchUrl': self._serialize.url("self._config.batch_url", self._config.batch_url, 'str', skip_quote=True),
                }
                url = self._client.format_url(url, **path_format_arguments)

            # Construct parameters
            query_parameters = {}  # type: Dict[str, Any]
            if _filter is not None:
                query_parameters['$filter'] = self._serialize.query("filter", _filter, 'str')
            if _max_results is not None:
                query_parameters['maxresults'] = self._serialize.query("max_results", _max_results, 'int', maximum=10, minimum=1)
            if _timeout is not None:
                query_parameters['timeout'] = self._serialize.query("timeout", _timeout, 'int')
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            if _client_request_id is not None:
                header_parameters['client-request-id'] = self._serialize.header("client_request_id", _client_request_id, 'str')
            if _return_client_request_id is not None:
                header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", _return_client_request_id, 'bool')
            if _ocp_date is not None:
                header_parameters['ocp-date'] = self._serialize.header("ocp_date", _ocp_date, 'rfc-1123')
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('PoolNodeCountsListResult', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.BatchError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_pool_node_counts.metadata = {'url': '/nodecounts'}
